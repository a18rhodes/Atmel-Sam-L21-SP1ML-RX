
Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000298c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000298c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00010068  2**0
                  CONTENTS
  3 .bss          00000204  20000068  000029f4  00010068  2**2
                  ALLOC
  4 .stack        00002004  2000026c  00002bf8  00010068  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001adc4  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026e3  00000000  00000000  0002aeaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000588  00000000  00000000  0002d592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00005a96  00000000  00000000  0002db1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b3b2  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00095b1b  00000000  00000000  0003e962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000562b  00000000  00000000  000d447d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005d0  00000000  00000000  000d9aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001140  00000000  00000000  000da078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002270 	.word	0x20002270
       4:	00001cd5 	.word	0x00001cd5
       8:	00001cd1 	.word	0x00001cd1
       c:	00001cd1 	.word	0x00001cd1
	...
      2c:	00001cd1 	.word	0x00001cd1
	...
      38:	00001cd1 	.word	0x00001cd1
      3c:	00001cd1 	.word	0x00001cd1
      40:	00001cd1 	.word	0x00001cd1
      44:	00001cd1 	.word	0x00001cd1
      48:	00001cd1 	.word	0x00001cd1
      4c:	00000115 	.word	0x00000115
      50:	00001cd1 	.word	0x00001cd1
      54:	00001cd1 	.word	0x00001cd1
      58:	00000221 	.word	0x00000221
      5c:	00001cd1 	.word	0x00001cd1
      60:	00001cd1 	.word	0x00001cd1
      64:	00001cd1 	.word	0x00001cd1
      68:	00001cd1 	.word	0x00001cd1
      6c:	00001cd1 	.word	0x00001cd1
      70:	00001cd1 	.word	0x00001cd1
      74:	00001cd1 	.word	0x00001cd1
      78:	00001cd1 	.word	0x00001cd1
      7c:	00001cd1 	.word	0x00001cd1
      80:	00001cd1 	.word	0x00001cd1
      84:	00001cd1 	.word	0x00001cd1
      88:	00001cd1 	.word	0x00001cd1
	...
      94:	00001cd1 	.word	0x00001cd1
      98:	00001cd1 	.word	0x00001cd1
      9c:	00001cd1 	.word	0x00001cd1
      a0:	00001cd1 	.word	0x00001cd1
      a4:	00001cd1 	.word	0x00001cd1
      a8:	00001cd1 	.word	0x00001cd1
      ac:	00001cd1 	.word	0x00001cd1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	0000298c 	.word	0x0000298c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000298c 	.word	0x0000298c
     108:	2000006c 	.word	0x2000006c
     10c:	0000298c 	.word	0x0000298c
     110:	00000000 	.word	0x00000000

00000114 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     116:	2200      	movs	r2, #0
     118:	4b15      	ldr	r3, [pc, #84]	; (170 <EIC_Handler+0x5c>)
     11a:	701a      	strb	r2, [r3, #0]
     11c:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     11e:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     120:	4e14      	ldr	r6, [pc, #80]	; (174 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     122:	4c13      	ldr	r4, [pc, #76]	; (170 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     124:	2b1f      	cmp	r3, #31
     126:	d919      	bls.n	15c <EIC_Handler+0x48>
     128:	e00f      	b.n	14a <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     12a:	2100      	movs	r1, #0
     12c:	e000      	b.n	130 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     12e:	4912      	ldr	r1, [pc, #72]	; (178 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     130:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     132:	009b      	lsls	r3, r3, #2
     134:	599b      	ldr	r3, [r3, r6]
     136:	2b00      	cmp	r3, #0
     138:	d000      	beq.n	13c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     13a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     13c:	7823      	ldrb	r3, [r4, #0]
     13e:	3301      	adds	r3, #1
     140:	b2db      	uxtb	r3, r3
     142:	7023      	strb	r3, [r4, #0]
     144:	2b0f      	cmp	r3, #15
     146:	d9ed      	bls.n	124 <EIC_Handler+0x10>
     148:	e011      	b.n	16e <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     14a:	1c29      	adds	r1, r5, #0
     14c:	4019      	ands	r1, r3
     14e:	2201      	movs	r2, #1
     150:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     152:	2100      	movs	r1, #0
     154:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     156:	4211      	tst	r1, r2
     158:	d1e7      	bne.n	12a <EIC_Handler+0x16>
     15a:	e7ef      	b.n	13c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     15c:	1c29      	adds	r1, r5, #0
     15e:	4019      	ands	r1, r3
     160:	2201      	movs	r2, #1
     162:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     164:	4904      	ldr	r1, [pc, #16]	; (178 <EIC_Handler+0x64>)
     166:	6949      	ldr	r1, [r1, #20]
     168:	4211      	tst	r1, r2
     16a:	d1e0      	bne.n	12e <EIC_Handler+0x1a>
     16c:	e7e6      	b.n	13c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     16e:	bd70      	pop	{r4, r5, r6, pc}
     170:	200000d5 	.word	0x200000d5
     174:	200000d8 	.word	0x200000d8
     178:	40002400 	.word	0x40002400

0000017c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     17c:	4a06      	ldr	r2, [pc, #24]	; (198 <_extint_enable+0x1c>)
     17e:	7811      	ldrb	r1, [r2, #0]
     180:	2302      	movs	r3, #2
     182:	430b      	orrs	r3, r1
     184:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     186:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     188:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     18a:	6853      	ldr	r3, [r2, #4]
     18c:	4219      	tst	r1, r3
     18e:	d1fc      	bne.n	18a <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     190:	6853      	ldr	r3, [r2, #4]
     192:	4218      	tst	r0, r3
     194:	d1f9      	bne.n	18a <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     196:	4770      	bx	lr
     198:	40002400 	.word	0x40002400

0000019c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     19c:	b500      	push	{lr}
     19e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     1a0:	4a18      	ldr	r2, [pc, #96]	; (204 <_system_extint_init+0x68>)
     1a2:	6953      	ldr	r3, [r2, #20]
     1a4:	2180      	movs	r1, #128	; 0x80
     1a6:	0089      	lsls	r1, r1, #2
     1a8:	430b      	orrs	r3, r1
     1aa:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1ac:	a901      	add	r1, sp, #4
     1ae:	2300      	movs	r3, #0
     1b0:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1b2:	2003      	movs	r0, #3
     1b4:	4b14      	ldr	r3, [pc, #80]	; (208 <_system_extint_init+0x6c>)
     1b6:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     1b8:	2003      	movs	r0, #3
     1ba:	4b14      	ldr	r3, [pc, #80]	; (20c <_system_extint_init+0x70>)
     1bc:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     1be:	4a14      	ldr	r2, [pc, #80]	; (210 <_system_extint_init+0x74>)
     1c0:	7811      	ldrb	r1, [r2, #0]
     1c2:	2301      	movs	r3, #1
     1c4:	430b      	orrs	r3, r1
     1c6:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     1c8:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     1ca:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     1cc:	6853      	ldr	r3, [r2, #4]
     1ce:	4219      	tst	r1, r3
     1d0:	d1fc      	bne.n	1cc <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     1d2:	6853      	ldr	r3, [r2, #4]
     1d4:	4218      	tst	r0, r3
     1d6:	d009      	beq.n	1ec <_system_extint_init+0x50>
     1d8:	e7f8      	b.n	1cc <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     1da:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1dc:	428b      	cmp	r3, r1
     1de:	d1fc      	bne.n	1da <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1e0:	2208      	movs	r2, #8
     1e2:	4b0c      	ldr	r3, [pc, #48]	; (214 <_system_extint_init+0x78>)
     1e4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     1e6:	4b0c      	ldr	r3, [pc, #48]	; (218 <_system_extint_init+0x7c>)
     1e8:	4798      	blx	r3
     1ea:	e009      	b.n	200 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     1ec:	4a08      	ldr	r2, [pc, #32]	; (210 <_system_extint_init+0x74>)
     1ee:	7813      	ldrb	r3, [r2, #0]
     1f0:	2110      	movs	r1, #16
     1f2:	438b      	bics	r3, r1
     1f4:	7013      	strb	r3, [r2, #0]
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <_system_extint_init+0x80>)
     1f8:	1c19      	adds	r1, r3, #0
     1fa:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     1fc:	2200      	movs	r2, #0
     1fe:	e7ec      	b.n	1da <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
     200:	b003      	add	sp, #12
     202:	bd00      	pop	{pc}
     204:	40000400 	.word	0x40000400
     208:	00001b75 	.word	0x00001b75
     20c:	00001b0d 	.word	0x00001b0d
     210:	40002400 	.word	0x40002400
     214:	e000e100 	.word	0xe000e100
     218:	0000017d 	.word	0x0000017d
     21c:	200000d8 	.word	0x200000d8

00000220 <USB_Handler>:
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
     22e:	4bc8      	ldr	r3, [pc, #800]	; (550 <USB_Handler+0x330>)
     230:	681f      	ldr	r7, [r3, #0]
     232:	683d      	ldr	r5, [r7, #0]
     234:	782b      	ldrb	r3, [r5, #0]
     236:	09db      	lsrs	r3, r3, #7
     238:	d100      	bne.n	23c <USB_Handler+0x1c>
     23a:	e154      	b.n	4e6 <USB_Handler+0x2c6>
     23c:	8c28      	ldrh	r0, [r5, #32]
     23e:	b280      	uxth	r0, r0
	}

	return STATUS_OK;
     240:	4bc4      	ldr	r3, [pc, #784]	; (554 <USB_Handler+0x334>)
}
     242:	4798      	blx	r3
     244:	1e04      	subs	r4, r0, #0
     246:	2c1f      	cmp	r4, #31
     248:	d900      	bls.n	24c <USB_Handler+0x2c>
     24a:	e0d2      	b.n	3f2 <USB_Handler+0x1d2>
     24c:	1c03      	adds	r3, r0, #0
     24e:	3308      	adds	r3, #8
     250:	015b      	lsls	r3, r3, #5
     252:	18ed      	adds	r5, r5, r3
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
	if (pipe_int < 32) {
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     254:	79ed      	ldrb	r5, [r5, #7]
     256:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     258:	07ab      	lsls	r3, r5, #30
     25a:	d050      	beq.n	2fe <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     25c:	4abe      	ldr	r2, [pc, #760]	; (558 <USB_Handler+0x338>)
     25e:	2301      	movs	r3, #1
     260:	4083      	lsls	r3, r0
     262:	6811      	ldr	r1, [r2, #0]
     264:	4399      	bics	r1, r3
     266:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     268:	1c03      	adds	r3, r0, #0
     26a:	3308      	adds	r3, #8
     26c:	015b      	lsls	r3, r3, #5
     26e:	683a      	ldr	r2, [r7, #0]
     270:	4694      	mov	ip, r2
     272:	4463      	add	r3, ip
     274:	2203      	movs	r2, #3
     276:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     278:	183b      	adds	r3, r7, r0
     27a:	33a8      	adds	r3, #168	; 0xa8
     27c:	799b      	ldrb	r3, [r3, #6]
     27e:	07db      	lsls	r3, r3, #31
     280:	d53d      	bpl.n	2fe <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
     282:	4bb6      	ldr	r3, [pc, #728]	; (55c <USB_Handler+0x33c>)
     284:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     286:	683a      	ldr	r2, [r7, #0]
     288:	1c03      	adds	r3, r0, #0
     28a:	3308      	adds	r3, #8
     28c:	015b      	lsls	r3, r3, #5
     28e:	5c9b      	ldrb	r3, [r3, r2]
     290:	2203      	movs	r2, #3
     292:	4013      	ands	r3, r2
     294:	2b01      	cmp	r3, #1
     296:	d110      	bne.n	2ba <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     298:	0142      	lsls	r2, r0, #5
     29a:	4bb1      	ldr	r3, [pc, #708]	; (560 <USB_Handler+0x340>)
     29c:	189b      	adds	r3, r3, r2
     29e:	685a      	ldr	r2, [r3, #4]
     2a0:	0492      	lsls	r2, r2, #18
     2a2:	0c92      	lsrs	r2, r2, #18
     2a4:	49ad      	ldr	r1, [pc, #692]	; (55c <USB_Handler+0x33c>)
     2a6:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     2a8:	685a      	ldr	r2, [r3, #4]
     2aa:	0112      	lsls	r2, r2, #4
     2ac:	0c92      	lsrs	r2, r2, #18
     2ae:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     2b0:	685a      	ldr	r2, [r3, #4]
     2b2:	0b92      	lsrs	r2, r2, #14
     2b4:	0392      	lsls	r2, r2, #14
     2b6:	605a      	str	r2, [r3, #4]
     2b8:	e019      	b.n	2ee <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     2ba:	0143      	lsls	r3, r0, #5
     2bc:	4aa8      	ldr	r2, [pc, #672]	; (560 <USB_Handler+0x340>)
     2be:	18d3      	adds	r3, r2, r3
     2c0:	685a      	ldr	r2, [r3, #4]
     2c2:	0112      	lsls	r2, r2, #4
     2c4:	0c92      	lsrs	r2, r2, #18
     2c6:	48a5      	ldr	r0, [pc, #660]	; (55c <USB_Handler+0x33c>)
     2c8:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     2ca:	6859      	ldr	r1, [r3, #4]
     2cc:	0489      	lsls	r1, r1, #18
     2ce:	0c89      	lsrs	r1, r1, #18
     2d0:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     2d2:	6858      	ldr	r0, [r3, #4]
     2d4:	49a3      	ldr	r1, [pc, #652]	; (564 <USB_Handler+0x344>)
     2d6:	4001      	ands	r1, r0
     2d8:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     2da:	2a00      	cmp	r2, #0
     2dc:	d107      	bne.n	2ee <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     2de:	0163      	lsls	r3, r4, #5
     2e0:	4a9f      	ldr	r2, [pc, #636]	; (560 <USB_Handler+0x340>)
     2e2:	18d3      	adds	r3, r2, r3
     2e4:	685b      	ldr	r3, [r3, #4]
     2e6:	049b      	lsls	r3, r3, #18
     2e8:	0c9b      	lsrs	r3, r3, #18
     2ea:	4a9c      	ldr	r2, [pc, #624]	; (55c <USB_Handler+0x33c>)
     2ec:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     2ee:	4b98      	ldr	r3, [pc, #608]	; (550 <USB_Handler+0x330>)
     2f0:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     2f2:	1ca3      	adds	r3, r4, #2
     2f4:	011b      	lsls	r3, r3, #4
     2f6:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
     2f8:	685b      	ldr	r3, [r3, #4]
     2fa:	4998      	ldr	r1, [pc, #608]	; (55c <USB_Handler+0x33c>)
     2fc:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     2fe:	076b      	lsls	r3, r5, #29
     300:	d50e      	bpl.n	320 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     302:	4a95      	ldr	r2, [pc, #596]	; (558 <USB_Handler+0x338>)
     304:	2301      	movs	r3, #1
     306:	40a3      	lsls	r3, r4
     308:	6811      	ldr	r1, [r2, #0]
     30a:	4399      	bics	r1, r3
     30c:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     30e:	4b90      	ldr	r3, [pc, #576]	; (550 <USB_Handler+0x330>)
     310:	681b      	ldr	r3, [r3, #0]
     312:	681a      	ldr	r2, [r3, #0]
     314:	1c23      	adds	r3, r4, #0
     316:	3308      	adds	r3, #8
     318:	015b      	lsls	r3, r3, #5
     31a:	18d3      	adds	r3, r2, r3
     31c:	2204      	movs	r2, #4
     31e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
     320:	072b      	lsls	r3, r5, #28
     322:	d521      	bpl.n	368 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     324:	4a8c      	ldr	r2, [pc, #560]	; (558 <USB_Handler+0x338>)
     326:	2301      	movs	r3, #1
     328:	40a3      	lsls	r3, r4
     32a:	6811      	ldr	r1, [r2, #0]
     32c:	4399      	bics	r1, r3
     32e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     330:	4b87      	ldr	r3, [pc, #540]	; (550 <USB_Handler+0x330>)
     332:	6818      	ldr	r0, [r3, #0]
     334:	1c23      	adds	r3, r4, #0
     336:	3308      	adds	r3, #8
     338:	015b      	lsls	r3, r3, #5
     33a:	6802      	ldr	r2, [r0, #0]
     33c:	4694      	mov	ip, r2
     33e:	4463      	add	r3, ip
     340:	2208      	movs	r2, #8
     342:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     344:	1903      	adds	r3, r0, r4
     346:	33a8      	adds	r3, #168	; 0xa8
     348:	799b      	ldrb	r3, [r3, #6]
     34a:	079b      	lsls	r3, r3, #30
     34c:	d50c      	bpl.n	368 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
     34e:	4983      	ldr	r1, [pc, #524]	; (55c <USB_Handler+0x33c>)
     350:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     352:	0163      	lsls	r3, r4, #5
     354:	4a82      	ldr	r2, [pc, #520]	; (560 <USB_Handler+0x340>)
     356:	18d3      	adds	r3, r2, r3
     358:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
     35a:	231f      	movs	r3, #31
     35c:	4013      	ands	r3, r2
     35e:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     360:	0123      	lsls	r3, r4, #4
     362:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
     364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     366:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     368:	06eb      	lsls	r3, r5, #27
     36a:	d522      	bpl.n	3b2 <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     36c:	4a7a      	ldr	r2, [pc, #488]	; (558 <USB_Handler+0x338>)
     36e:	2301      	movs	r3, #1
     370:	40a3      	lsls	r3, r4
     372:	6811      	ldr	r1, [r2, #0]
     374:	4399      	bics	r1, r3
     376:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     378:	4b75      	ldr	r3, [pc, #468]	; (550 <USB_Handler+0x330>)
     37a:	6818      	ldr	r0, [r3, #0]
     37c:	1c23      	adds	r3, r4, #0
     37e:	3308      	adds	r3, #8
     380:	015b      	lsls	r3, r3, #5
     382:	6802      	ldr	r2, [r0, #0]
     384:	4694      	mov	ip, r2
     386:	4463      	add	r3, ip
     388:	2210      	movs	r2, #16
     38a:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     38c:	1903      	adds	r3, r0, r4
     38e:	33a8      	adds	r3, #168	; 0xa8
     390:	799b      	ldrb	r3, [r3, #6]
     392:	075b      	lsls	r3, r3, #29
     394:	d50d      	bpl.n	3b2 <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
     396:	4a71      	ldr	r2, [pc, #452]	; (55c <USB_Handler+0x33c>)
     398:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     39a:	0163      	lsls	r3, r4, #5
     39c:	4970      	ldr	r1, [pc, #448]	; (560 <USB_Handler+0x340>)
     39e:	18cb      	adds	r3, r1, r3
     3a0:	685b      	ldr	r3, [r3, #4]
     3a2:	011b      	lsls	r3, r3, #4
     3a4:	0c9b      	lsrs	r3, r3, #18
     3a6:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     3a8:	0123      	lsls	r3, r4, #4
     3aa:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
     3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     3ae:	2100      	movs	r1, #0
     3b0:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
     3b2:	06ab      	lsls	r3, r5, #26
     3b4:	d400      	bmi.n	3b8 <USB_Handler+0x198>
     3b6:	e1f8      	b.n	7aa <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     3b8:	4a67      	ldr	r2, [pc, #412]	; (558 <USB_Handler+0x338>)
     3ba:	2301      	movs	r3, #1
     3bc:	40a3      	lsls	r3, r4
     3be:	6811      	ldr	r1, [r2, #0]
     3c0:	4399      	bics	r1, r3
     3c2:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     3c4:	4b62      	ldr	r3, [pc, #392]	; (550 <USB_Handler+0x330>)
     3c6:	6818      	ldr	r0, [r3, #0]
     3c8:	1c23      	adds	r3, r4, #0
     3ca:	3308      	adds	r3, #8
     3cc:	015b      	lsls	r3, r3, #5
     3ce:	6802      	ldr	r2, [r0, #0]
     3d0:	4694      	mov	ip, r2
     3d2:	4463      	add	r3, ip
     3d4:	2220      	movs	r2, #32
     3d6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     3d8:	1903      	adds	r3, r0, r4
     3da:	33a8      	adds	r3, #168	; 0xa8
     3dc:	799b      	ldrb	r3, [r3, #6]
     3de:	071b      	lsls	r3, r3, #28
     3e0:	d400      	bmi.n	3e4 <USB_Handler+0x1c4>
     3e2:	e1e2      	b.n	7aa <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
     3e4:	495d      	ldr	r1, [pc, #372]	; (55c <USB_Handler+0x33c>)
     3e6:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     3e8:	0124      	lsls	r4, r4, #4
     3ea:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
     3ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
     3ee:	4798      	blx	r3
     3f0:	e1db      	b.n	7aa <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     3f2:	8bac      	ldrh	r4, [r5, #28]
     3f4:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
     3f6:	0763      	lsls	r3, r4, #29
     3f8:	d508      	bpl.n	40c <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     3fa:	2304      	movs	r3, #4
     3fc:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     3fe:	33a1      	adds	r3, #161	; 0xa1
     400:	5cfb      	ldrb	r3, [r7, r3]
     402:	07db      	lsls	r3, r3, #31
     404:	d502      	bpl.n	40c <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     406:	687b      	ldr	r3, [r7, #4]
     408:	1c38      	adds	r0, r7, #0
     40a:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
     40c:	0723      	lsls	r3, r4, #28
     40e:	d50d      	bpl.n	42c <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     410:	2200      	movs	r2, #0
     412:	4b51      	ldr	r3, [pc, #324]	; (558 <USB_Handler+0x338>)
     414:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     416:	4b4e      	ldr	r3, [pc, #312]	; (550 <USB_Handler+0x330>)
     418:	6818      	ldr	r0, [r3, #0]
     41a:	2308      	movs	r3, #8
     41c:	6802      	ldr	r2, [r0, #0]
     41e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     420:	339d      	adds	r3, #157	; 0x9d
     422:	5cc3      	ldrb	r3, [r0, r3]
     424:	079b      	lsls	r3, r3, #30
     426:	d501      	bpl.n	42c <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     428:	6883      	ldr	r3, [r0, #8]
     42a:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     42c:	0663      	lsls	r3, r4, #25
     42e:	d50a      	bpl.n	446 <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     430:	4b47      	ldr	r3, [pc, #284]	; (550 <USB_Handler+0x330>)
     432:	6818      	ldr	r0, [r3, #0]
     434:	2340      	movs	r3, #64	; 0x40
     436:	6802      	ldr	r2, [r0, #0]
     438:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     43a:	3365      	adds	r3, #101	; 0x65
     43c:	5cc3      	ldrb	r3, [r0, r3]
     43e:	06db      	lsls	r3, r3, #27
     440:	d501      	bpl.n	446 <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     442:	6943      	ldr	r3, [r0, #20]
     444:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     446:	06a3      	lsls	r3, r4, #26
     448:	d50a      	bpl.n	460 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     44a:	4b41      	ldr	r3, [pc, #260]	; (550 <USB_Handler+0x330>)
     44c:	6818      	ldr	r0, [r3, #0]
     44e:	2320      	movs	r3, #32
     450:	6802      	ldr	r2, [r0, #0]
     452:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     454:	3385      	adds	r3, #133	; 0x85
     456:	5cc3      	ldrb	r3, [r0, r3]
     458:	071b      	lsls	r3, r3, #28
     45a:	d501      	bpl.n	460 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     45c:	6903      	ldr	r3, [r0, #16]
     45e:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     460:	06e3      	lsls	r3, r4, #27
     462:	d50a      	bpl.n	47a <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     464:	4b3a      	ldr	r3, [pc, #232]	; (550 <USB_Handler+0x330>)
     466:	6818      	ldr	r0, [r3, #0]
     468:	2310      	movs	r3, #16
     46a:	6802      	ldr	r2, [r0, #0]
     46c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     46e:	3395      	adds	r3, #149	; 0x95
     470:	5cc3      	ldrb	r3, [r0, r3]
     472:	075b      	lsls	r3, r3, #29
     474:	d501      	bpl.n	47a <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     476:	68c3      	ldr	r3, [r0, #12]
     478:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     47a:	0623      	lsls	r3, r4, #24
     47c:	d50d      	bpl.n	49a <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     47e:	2200      	movs	r2, #0
     480:	4b35      	ldr	r3, [pc, #212]	; (558 <USB_Handler+0x338>)
     482:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     484:	4b32      	ldr	r3, [pc, #200]	; (550 <USB_Handler+0x330>)
     486:	6818      	ldr	r0, [r3, #0]
     488:	2380      	movs	r3, #128	; 0x80
     48a:	6802      	ldr	r2, [r0, #0]
     48c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     48e:	3325      	adds	r3, #37	; 0x25
     490:	5cc3      	ldrb	r3, [r0, r3]
     492:	069b      	lsls	r3, r3, #26
     494:	d501      	bpl.n	49a <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     496:	6983      	ldr	r3, [r0, #24]
     498:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
     49a:	05e3      	lsls	r3, r4, #23
     49c:	d50e      	bpl.n	4bc <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     49e:	2200      	movs	r2, #0
     4a0:	4b2d      	ldr	r3, [pc, #180]	; (558 <USB_Handler+0x338>)
     4a2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     4a4:	4b2a      	ldr	r3, [pc, #168]	; (550 <USB_Handler+0x330>)
     4a6:	6818      	ldr	r0, [r3, #0]
     4a8:	2380      	movs	r3, #128	; 0x80
     4aa:	005b      	lsls	r3, r3, #1
     4ac:	6802      	ldr	r2, [r0, #0]
     4ae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     4b0:	3b5b      	subs	r3, #91	; 0x5b
     4b2:	5cc3      	ldrb	r3, [r0, r3]
     4b4:	065b      	lsls	r3, r3, #25
     4b6:	d501      	bpl.n	4bc <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     4b8:	69c3      	ldr	r3, [r0, #28]
     4ba:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
     4bc:	05a3      	lsls	r3, r4, #22
     4be:	d400      	bmi.n	4c2 <USB_Handler+0x2a2>
     4c0:	e173      	b.n	7aa <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
     4c2:	2200      	movs	r2, #0
     4c4:	4b24      	ldr	r3, [pc, #144]	; (558 <USB_Handler+0x338>)
     4c6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     4c8:	4b21      	ldr	r3, [pc, #132]	; (550 <USB_Handler+0x330>)
     4ca:	6818      	ldr	r0, [r3, #0]
     4cc:	2380      	movs	r3, #128	; 0x80
     4ce:	009b      	lsls	r3, r3, #2
     4d0:	6802      	ldr	r2, [r0, #0]
     4d2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     4d4:	3b5c      	subs	r3, #92	; 0x5c
     4d6:	3bff      	subs	r3, #255	; 0xff
     4d8:	5cc3      	ldrb	r3, [r0, r3]
     4da:	2b7f      	cmp	r3, #127	; 0x7f
     4dc:	d800      	bhi.n	4e0 <USB_Handler+0x2c0>
     4de:	e164      	b.n	7aa <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     4e0:	6a03      	ldr	r3, [r0, #32]
     4e2:	4798      	blx	r3
     4e4:	e161      	b.n	7aa <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     4e6:	8c2e      	ldrh	r6, [r5, #32]
     4e8:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
     4ea:	2e00      	cmp	r6, #0
     4ec:	d140      	bne.n	570 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     4ee:	8bae      	ldrh	r6, [r5, #28]
     4f0:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
     4f2:	23ab      	movs	r3, #171	; 0xab
     4f4:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
     4f6:	5afd      	ldrh	r5, [r7, r3]
     4f8:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
     4fa:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
     4fc:	5afb      	ldrh	r3, [r7, r3]
     4fe:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     500:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
     502:	4f19      	ldr	r7, [pc, #100]	; (568 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     504:	4b12      	ldr	r3, [pc, #72]	; (550 <USB_Handler+0x330>)
     506:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     508:	4698      	mov	r8, r3
     50a:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
     50c:	5bdb      	ldrh	r3, [r3, r7]
     50e:	421e      	tst	r6, r3
     510:	d003      	beq.n	51a <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     512:	464a      	mov	r2, r9
     514:	6812      	ldr	r2, [r2, #0]
     516:	6812      	ldr	r2, [r2, #0]
     518:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
     51a:	421d      	tst	r5, r3
     51c:	d013      	beq.n	546 <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     51e:	2c06      	cmp	r4, #6
     520:	d107      	bne.n	532 <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     522:	4b0f      	ldr	r3, [pc, #60]	; (560 <USB_Handler+0x340>)
     524:	891b      	ldrh	r3, [r3, #8]
     526:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
     528:	2380      	movs	r3, #128	; 0x80
     52a:	005b      	lsls	r3, r3, #1
     52c:	4013      	ands	r3, r2
     52e:	4a0f      	ldr	r2, [pc, #60]	; (56c <USB_Handler+0x34c>)
     530:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     532:	1c23      	adds	r3, r4, #0
     534:	332e      	adds	r3, #46	; 0x2e
     536:	009b      	lsls	r3, r3, #2
     538:	4642      	mov	r2, r8
     53a:	6812      	ldr	r2, [r2, #0]
     53c:	589b      	ldr	r3, [r3, r2]
     53e:	4642      	mov	r2, r8
     540:	6810      	ldr	r0, [r2, #0]
     542:	490a      	ldr	r1, [pc, #40]	; (56c <USB_Handler+0x34c>)
     544:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     546:	3401      	adds	r4, #1
     548:	2c07      	cmp	r4, #7
     54a:	d1de      	bne.n	50a <USB_Handler+0x2ea>
     54c:	e12d      	b.n	7aa <USB_Handler+0x58a>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	2000009c 	.word	0x2000009c
     554:	00001f25 	.word	0x00001f25
     558:	20000090 	.word	0x20000090
     55c:	20000088 	.word	0x20000088
     560:	20000118 	.word	0x20000118
     564:	f0003fff 	.word	0xf0003fff
     568:	00002818 	.word	0x00002818
     56c:	20000084 	.word	0x20000084
     570:	1c3c      	adds	r4, r7, #0
     572:	3459      	adds	r4, #89	; 0x59
     574:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
     576:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
     578:	2201      	movs	r2, #1
     57a:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     57c:	325f      	adds	r2, #95	; 0x5f
     57e:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     580:	3a50      	subs	r2, #80	; 0x50
     582:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     584:	3a04      	subs	r2, #4
     586:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     588:	46b8      	mov	r8, r7
     58a:	1c2f      	adds	r7, r5, #0
     58c:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
     58e:	9301      	str	r3, [sp, #4]
     590:	1c32      	adds	r2, r6, #0
     592:	411a      	asrs	r2, r3
     594:	4661      	mov	r1, ip
     596:	4211      	tst	r1, r2
     598:	d100      	bne.n	59c <USB_Handler+0x37c>
     59a:	e101      	b.n	7a0 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     59c:	1c1a      	adds	r2, r3, #0
     59e:	3208      	adds	r2, #8
     5a0:	0152      	lsls	r2, r2, #5
     5a2:	18ba      	adds	r2, r7, r2
     5a4:	79d2      	ldrb	r2, [r2, #7]
     5a6:	b2d2      	uxtb	r2, r2
     5a8:	7a21      	ldrb	r1, [r4, #8]
     5aa:	7825      	ldrb	r5, [r4, #0]
     5ac:	4029      	ands	r1, r5
				flags_run = flags &
     5ae:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     5b0:	464d      	mov	r5, r9
     5b2:	4215      	tst	r5, r2
     5b4:	d02a      	beq.n	60c <USB_Handler+0x3ec>
     5b6:	1c3d      	adds	r5, r7, #0
     5b8:	4647      	mov	r7, r8
     5ba:	015b      	lsls	r3, r3, #5
     5bc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     5be:	2308      	movs	r3, #8
     5c0:	33ff      	adds	r3, #255	; 0xff
     5c2:	5ceb      	ldrb	r3, [r5, r3]
     5c4:	065b      	lsls	r3, r3, #25
     5c6:	d509      	bpl.n	5dc <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     5c8:	2240      	movs	r2, #64	; 0x40
     5ca:	2308      	movs	r3, #8
     5cc:	33ff      	adds	r3, #255	; 0xff
     5ce:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     5d0:	3b88      	subs	r3, #136	; 0x88
     5d2:	3bff      	subs	r3, #255	; 0xff
     5d4:	4303      	orrs	r3, r0
     5d6:	4a78      	ldr	r2, [pc, #480]	; (7b8 <USB_Handler+0x598>)
     5d8:	7193      	strb	r3, [r2, #6]
     5da:	e00a      	b.n	5f2 <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     5dc:	2308      	movs	r3, #8
     5de:	33ff      	adds	r3, #255	; 0xff
     5e0:	5ceb      	ldrb	r3, [r5, r3]
     5e2:	069b      	lsls	r3, r3, #26
     5e4:	d505      	bpl.n	5f2 <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     5e6:	2220      	movs	r2, #32
     5e8:	2308      	movs	r3, #8
     5ea:	33ff      	adds	r3, #255	; 0xff
     5ec:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     5ee:	4b72      	ldr	r3, [pc, #456]	; (7b8 <USB_Handler+0x598>)
     5f0:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     5f2:	2360      	movs	r3, #96	; 0x60
     5f4:	420b      	tst	r3, r1
     5f6:	d100      	bne.n	5fa <USB_Handler+0x3da>
     5f8:	e0d7      	b.n	7aa <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     5fa:	9b01      	ldr	r3, [sp, #4]
     5fc:	011b      	lsls	r3, r3, #4
     5fe:	18fb      	adds	r3, r7, r3
     600:	33dc      	adds	r3, #220	; 0xdc
     602:	685b      	ldr	r3, [r3, #4]
     604:	1c38      	adds	r0, r7, #0
     606:	496c      	ldr	r1, [pc, #432]	; (7b8 <USB_Handler+0x598>)
     608:	4798      	blx	r3
     60a:	e0ce      	b.n	7aa <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     60c:	4655      	mov	r5, sl
     60e:	4215      	tst	r5, r2
     610:	d01f      	beq.n	652 <USB_Handler+0x432>
     612:	1c3d      	adds	r5, r7, #0
     614:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     616:	9a01      	ldr	r2, [sp, #4]
     618:	1c13      	adds	r3, r2, #0
     61a:	3308      	adds	r3, #8
     61c:	015b      	lsls	r3, r3, #5
     61e:	18ed      	adds	r5, r5, r3
     620:	2310      	movs	r3, #16
     622:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     624:	18bb      	adds	r3, r7, r2
     626:	3361      	adds	r3, #97	; 0x61
     628:	33ff      	adds	r3, #255	; 0xff
     62a:	781b      	ldrb	r3, [r3, #0]
     62c:	06db      	lsls	r3, r3, #27
     62e:	d400      	bmi.n	632 <USB_Handler+0x412>
     630:	e0bb      	b.n	7aa <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     632:	1c10      	adds	r0, r2, #0
     634:	0153      	lsls	r3, r2, #5
     636:	4a61      	ldr	r2, [pc, #388]	; (7bc <USB_Handler+0x59c>)
     638:	18d3      	adds	r3, r2, r3
     63a:	685b      	ldr	r3, [r3, #4]
     63c:	049b      	lsls	r3, r3, #18
     63e:	0c9b      	lsrs	r3, r3, #18
     640:	495d      	ldr	r1, [pc, #372]	; (7b8 <USB_Handler+0x598>)
     642:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     644:	0103      	lsls	r3, r0, #4
     646:	18fb      	adds	r3, r7, r3
     648:	33d8      	adds	r3, #216	; 0xd8
     64a:	685b      	ldr	r3, [r3, #4]
     64c:	4640      	mov	r0, r8
     64e:	4798      	blx	r3
     650:	e0ab      	b.n	7aa <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     652:	465d      	mov	r5, fp
     654:	4215      	tst	r5, r2
     656:	d05f      	beq.n	718 <USB_Handler+0x4f8>
     658:	1c3d      	adds	r5, r7, #0
     65a:	4647      	mov	r7, r8
     65c:	4680      	mov	r8, r0
     65e:	9b01      	ldr	r3, [sp, #4]
     660:	015b      	lsls	r3, r3, #5
     662:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     664:	2308      	movs	r3, #8
     666:	33ff      	adds	r3, #255	; 0xff
     668:	5ceb      	ldrb	r3, [r5, r3]
     66a:	071b      	lsls	r3, r3, #28
     66c:	d523      	bpl.n	6b6 <USB_Handler+0x496>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     66e:	2208      	movs	r2, #8
     670:	2308      	movs	r3, #8
     672:	33ff      	adds	r3, #255	; 0xff
     674:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     676:	9b01      	ldr	r3, [sp, #4]
     678:	015b      	lsls	r3, r3, #5
     67a:	4a50      	ldr	r2, [pc, #320]	; (7bc <USB_Handler+0x59c>)
     67c:	18d3      	adds	r3, r2, r3
     67e:	3318      	adds	r3, #24
     680:	789b      	ldrb	r3, [r3, #2]
     682:	079b      	lsls	r3, r3, #30
     684:	d507      	bpl.n	696 <USB_Handler+0x476>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     686:	9b01      	ldr	r3, [sp, #4]
     688:	015a      	lsls	r2, r3, #5
     68a:	4b4c      	ldr	r3, [pc, #304]	; (7bc <USB_Handler+0x59c>)
     68c:	189b      	adds	r3, r3, r2
     68e:	7e9a      	ldrb	r2, [r3, #26]
     690:	2002      	movs	r0, #2
     692:	4382      	bics	r2, r0
     694:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     696:	2380      	movs	r3, #128	; 0x80
     698:	425b      	negs	r3, r3
     69a:	4642      	mov	r2, r8
     69c:	4313      	orrs	r3, r2
     69e:	4a46      	ldr	r2, [pc, #280]	; (7b8 <USB_Handler+0x598>)
     6a0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     6a2:	9b01      	ldr	r3, [sp, #4]
     6a4:	3308      	adds	r3, #8
     6a6:	015b      	lsls	r3, r3, #5
     6a8:	683a      	ldr	r2, [r7, #0]
     6aa:	4694      	mov	ip, r2
     6ac:	4463      	add	r3, ip
     6ae:	79db      	ldrb	r3, [r3, #7]
     6b0:	079b      	lsls	r3, r3, #30
     6b2:	d525      	bpl.n	700 <USB_Handler+0x4e0>
     6b4:	e079      	b.n	7aa <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     6b6:	2308      	movs	r3, #8
     6b8:	33ff      	adds	r3, #255	; 0xff
     6ba:	5ceb      	ldrb	r3, [r5, r3]
     6bc:	075b      	lsls	r3, r3, #29
     6be:	d51f      	bpl.n	700 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     6c0:	2204      	movs	r2, #4
     6c2:	2308      	movs	r3, #8
     6c4:	33ff      	adds	r3, #255	; 0xff
     6c6:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     6c8:	9b01      	ldr	r3, [sp, #4]
     6ca:	015b      	lsls	r3, r3, #5
     6cc:	4a3b      	ldr	r2, [pc, #236]	; (7bc <USB_Handler+0x59c>)
     6ce:	18d3      	adds	r3, r2, r3
     6d0:	3308      	adds	r3, #8
     6d2:	789b      	ldrb	r3, [r3, #2]
     6d4:	079b      	lsls	r3, r3, #30
     6d6:	d507      	bpl.n	6e8 <USB_Handler+0x4c8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     6d8:	9b01      	ldr	r3, [sp, #4]
     6da:	015a      	lsls	r2, r3, #5
     6dc:	4b37      	ldr	r3, [pc, #220]	; (7bc <USB_Handler+0x59c>)
     6de:	189b      	adds	r3, r3, r2
     6e0:	7a9a      	ldrb	r2, [r3, #10]
     6e2:	2002      	movs	r0, #2
     6e4:	4382      	bics	r2, r0
     6e6:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     6e8:	4b33      	ldr	r3, [pc, #204]	; (7b8 <USB_Handler+0x598>)
     6ea:	4642      	mov	r2, r8
     6ec:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     6ee:	9b01      	ldr	r3, [sp, #4]
     6f0:	3308      	adds	r3, #8
     6f2:	015b      	lsls	r3, r3, #5
     6f4:	683a      	ldr	r2, [r7, #0]
     6f6:	4694      	mov	ip, r2
     6f8:	4463      	add	r3, ip
     6fa:	79db      	ldrb	r3, [r3, #7]
     6fc:	07db      	lsls	r3, r3, #31
     6fe:	d454      	bmi.n	7aa <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     700:	230c      	movs	r3, #12
     702:	420b      	tst	r3, r1
     704:	d051      	beq.n	7aa <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     706:	9b01      	ldr	r3, [sp, #4]
     708:	011b      	lsls	r3, r3, #4
     70a:	18fb      	adds	r3, r7, r3
     70c:	33d4      	adds	r3, #212	; 0xd4
     70e:	685b      	ldr	r3, [r3, #4]
     710:	1c38      	adds	r0, r7, #0
     712:	4929      	ldr	r1, [pc, #164]	; (7b8 <USB_Handler+0x598>)
     714:	4798      	blx	r3
     716:	e048      	b.n	7aa <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     718:	2503      	movs	r5, #3
     71a:	4215      	tst	r5, r2
     71c:	d040      	beq.n	7a0 <USB_Handler+0x580>
     71e:	1c3d      	adds	r5, r7, #0
     720:	4647      	mov	r7, r8
     722:	4680      	mov	r8, r0
     724:	9b01      	ldr	r3, [sp, #4]
     726:	015b      	lsls	r3, r3, #5
     728:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     72a:	2308      	movs	r3, #8
     72c:	33ff      	adds	r3, #255	; 0xff
     72e:	5ceb      	ldrb	r3, [r5, r3]
     730:	079b      	lsls	r3, r3, #30
     732:	d512      	bpl.n	75a <USB_Handler+0x53a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     734:	2202      	movs	r2, #2
     736:	2308      	movs	r3, #8
     738:	33ff      	adds	r3, #255	; 0xff
     73a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     73c:	4a1e      	ldr	r2, [pc, #120]	; (7b8 <USB_Handler+0x598>)
     73e:	3b88      	subs	r3, #136	; 0x88
     740:	3bff      	subs	r3, #255	; 0xff
     742:	4303      	orrs	r3, r0
     744:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     746:	9b01      	ldr	r3, [sp, #4]
     748:	015b      	lsls	r3, r3, #5
     74a:	481c      	ldr	r0, [pc, #112]	; (7bc <USB_Handler+0x59c>)
     74c:	18c3      	adds	r3, r0, r3
     74e:	3310      	adds	r3, #16
     750:	685b      	ldr	r3, [r3, #4]
     752:	049b      	lsls	r3, r3, #18
     754:	0c9b      	lsrs	r3, r3, #18
     756:	8053      	strh	r3, [r2, #2]
     758:	e017      	b.n	78a <USB_Handler+0x56a>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     75a:	2308      	movs	r3, #8
     75c:	33ff      	adds	r3, #255	; 0xff
     75e:	5ceb      	ldrb	r3, [r5, r3]
     760:	07db      	lsls	r3, r3, #31
     762:	d512      	bpl.n	78a <USB_Handler+0x56a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     764:	2201      	movs	r2, #1
     766:	2308      	movs	r3, #8
     768:	33ff      	adds	r3, #255	; 0xff
     76a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     76c:	4812      	ldr	r0, [pc, #72]	; (7b8 <USB_Handler+0x598>)
     76e:	4643      	mov	r3, r8
     770:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     772:	9b01      	ldr	r3, [sp, #4]
     774:	015a      	lsls	r2, r3, #5
     776:	4b11      	ldr	r3, [pc, #68]	; (7bc <USB_Handler+0x59c>)
     778:	189b      	adds	r3, r3, r2
     77a:	685a      	ldr	r2, [r3, #4]
     77c:	0492      	lsls	r2, r2, #18
     77e:	0c92      	lsrs	r2, r2, #18
     780:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     782:	685b      	ldr	r3, [r3, #4]
     784:	011b      	lsls	r3, r3, #4
     786:	0c9b      	lsrs	r3, r3, #18
     788:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     78a:	078b      	lsls	r3, r1, #30
     78c:	d00d      	beq.n	7aa <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     78e:	9b01      	ldr	r3, [sp, #4]
     790:	330d      	adds	r3, #13
     792:	011b      	lsls	r3, r3, #4
     794:	18fb      	adds	r3, r7, r3
     796:	685b      	ldr	r3, [r3, #4]
     798:	1c38      	adds	r0, r7, #0
     79a:	4907      	ldr	r1, [pc, #28]	; (7b8 <USB_Handler+0x598>)
     79c:	4798      	blx	r3
     79e:	e004      	b.n	7aa <USB_Handler+0x58a>
     7a0:	3301      	adds	r3, #1
     7a2:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     7a4:	2b08      	cmp	r3, #8
     7a6:	d000      	beq.n	7aa <USB_Handler+0x58a>
     7a8:	e6f0      	b.n	58c <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     7aa:	b003      	add	sp, #12
     7ac:	bc3c      	pop	{r2, r3, r4, r5}
     7ae:	4690      	mov	r8, r2
     7b0:	4699      	mov	r9, r3
     7b2:	46a2      	mov	sl, r4
     7b4:	46ab      	mov	fp, r5
     7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7b8:	20000094 	.word	0x20000094
     7bc:	20000118 	.word	0x20000118

000007c0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     7c0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     7c2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7c4:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     7c6:	4281      	cmp	r1, r0
     7c8:	d30c      	bcc.n	7e4 <_sercom_get_sync_baud_val+0x24>
     7ca:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     7cc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     7ce:	3301      	adds	r3, #1
     7d0:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     7d2:	4288      	cmp	r0, r1
     7d4:	d9fa      	bls.n	7cc <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     7d6:	3b01      	subs	r3, #1
     7d8:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7da:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     7dc:	2bff      	cmp	r3, #255	; 0xff
     7de:	d801      	bhi.n	7e4 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     7e0:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     7e2:	2400      	movs	r4, #0
	}
}
     7e4:	1c20      	adds	r0, r4, #0
     7e6:	bd10      	pop	{r4, pc}

000007e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ea:	465f      	mov	r7, fp
     7ec:	4656      	mov	r6, sl
     7ee:	464d      	mov	r5, r9
     7f0:	4644      	mov	r4, r8
     7f2:	b4f0      	push	{r4, r5, r6, r7}
     7f4:	b089      	sub	sp, #36	; 0x24
     7f6:	1c1c      	adds	r4, r3, #0
     7f8:	ab12      	add	r3, sp, #72	; 0x48
     7fa:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7fc:	1c06      	adds	r6, r0, #0
     7fe:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     800:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     802:	428e      	cmp	r6, r1
     804:	d900      	bls.n	808 <_sercom_get_async_baud_val+0x20>
     806:	e0c7      	b.n	998 <_sercom_get_async_baud_val+0x1b0>
     808:	1c25      	adds	r5, r4, #0
     80a:	9207      	str	r2, [sp, #28]
     80c:	1c0c      	adds	r4, r1, #0
     80e:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     810:	2d00      	cmp	r5, #0
     812:	d151      	bne.n	8b8 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     814:	1c18      	adds	r0, r3, #0
     816:	2100      	movs	r1, #0
     818:	2300      	movs	r3, #0
     81a:	4d63      	ldr	r5, [pc, #396]	; (9a8 <_sercom_get_async_baud_val+0x1c0>)
     81c:	47a8      	blx	r5
     81e:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     820:	1c26      	adds	r6, r4, #0
     822:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     824:	2300      	movs	r3, #0
     826:	2400      	movs	r4, #0
     828:	9302      	str	r3, [sp, #8]
     82a:	9403      	str	r4, [sp, #12]
     82c:	2200      	movs	r2, #0
     82e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     830:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     832:	2120      	movs	r1, #32
     834:	468c      	mov	ip, r1
     836:	391f      	subs	r1, #31
     838:	9600      	str	r6, [sp, #0]
     83a:	9701      	str	r7, [sp, #4]
     83c:	2420      	movs	r4, #32
     83e:	4264      	negs	r4, r4
     840:	1904      	adds	r4, r0, r4
     842:	d403      	bmi.n	84c <_sercom_get_async_baud_val+0x64>
     844:	1c0d      	adds	r5, r1, #0
     846:	40a5      	lsls	r5, r4
     848:	46a8      	mov	r8, r5
     84a:	e004      	b.n	856 <_sercom_get_async_baud_val+0x6e>
     84c:	4664      	mov	r4, ip
     84e:	1a24      	subs	r4, r4, r0
     850:	1c0d      	adds	r5, r1, #0
     852:	40e5      	lsrs	r5, r4
     854:	46a8      	mov	r8, r5
     856:	1c0c      	adds	r4, r1, #0
     858:	4084      	lsls	r4, r0
     85a:	46a1      	mov	r9, r4

		r = r << 1;
     85c:	1c14      	adds	r4, r2, #0
     85e:	1c1d      	adds	r5, r3, #0
     860:	18a4      	adds	r4, r4, r2
     862:	415d      	adcs	r5, r3
     864:	1c22      	adds	r2, r4, #0
     866:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     868:	465e      	mov	r6, fp
     86a:	4647      	mov	r7, r8
     86c:	423e      	tst	r6, r7
     86e:	d003      	beq.n	878 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     870:	1c0e      	adds	r6, r1, #0
     872:	4326      	orrs	r6, r4
     874:	1c32      	adds	r2, r6, #0
     876:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     878:	9c01      	ldr	r4, [sp, #4]
     87a:	429c      	cmp	r4, r3
     87c:	d810      	bhi.n	8a0 <_sercom_get_async_baud_val+0xb8>
     87e:	d102      	bne.n	886 <_sercom_get_async_baud_val+0x9e>
     880:	9c00      	ldr	r4, [sp, #0]
     882:	4294      	cmp	r4, r2
     884:	d80c      	bhi.n	8a0 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     886:	9c00      	ldr	r4, [sp, #0]
     888:	9d01      	ldr	r5, [sp, #4]
     88a:	1b12      	subs	r2, r2, r4
     88c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     88e:	464d      	mov	r5, r9
     890:	9e02      	ldr	r6, [sp, #8]
     892:	9f03      	ldr	r7, [sp, #12]
     894:	4335      	orrs	r5, r6
     896:	1c3c      	adds	r4, r7, #0
     898:	4646      	mov	r6, r8
     89a:	4334      	orrs	r4, r6
     89c:	9502      	str	r5, [sp, #8]
     89e:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     8a0:	3801      	subs	r0, #1
     8a2:	d2cb      	bcs.n	83c <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     8a4:	2200      	movs	r2, #0
     8a6:	2301      	movs	r3, #1
     8a8:	9802      	ldr	r0, [sp, #8]
     8aa:	9903      	ldr	r1, [sp, #12]
     8ac:	1a12      	subs	r2, r2, r0
     8ae:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     8b0:	0c11      	lsrs	r1, r2, #16
     8b2:	041b      	lsls	r3, r3, #16
     8b4:	4319      	orrs	r1, r3
     8b6:	e06c      	b.n	992 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     8b8:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8ba:	2d01      	cmp	r5, #1
     8bc:	d169      	bne.n	992 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     8be:	0f61      	lsrs	r1, r4, #29
     8c0:	1c0f      	adds	r7, r1, #0
     8c2:	00e1      	lsls	r1, r4, #3
     8c4:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     8c6:	1c18      	adds	r0, r3, #0
     8c8:	2100      	movs	r1, #0
     8ca:	2300      	movs	r3, #0
     8cc:	4c36      	ldr	r4, [pc, #216]	; (9a8 <_sercom_get_async_baud_val+0x1c0>)
     8ce:	47a0      	blx	r4
     8d0:	1c04      	adds	r4, r0, #0
     8d2:	1c0d      	adds	r5, r1, #0
     8d4:	2300      	movs	r3, #0
     8d6:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     8d8:	3320      	adds	r3, #32
     8da:	469b      	mov	fp, r3
     8dc:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     8de:	4663      	mov	r3, ip
     8e0:	9305      	str	r3, [sp, #20]
     8e2:	46b9      	mov	r9, r7
     8e4:	466b      	mov	r3, sp
     8e6:	7d1b      	ldrb	r3, [r3, #20]
     8e8:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     8ea:	2300      	movs	r3, #0
     8ec:	469c      	mov	ip, r3
     8ee:	2000      	movs	r0, #0
     8f0:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     8f2:	223f      	movs	r2, #63	; 0x3f
     8f4:	9400      	str	r4, [sp, #0]
     8f6:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     8f8:	2320      	movs	r3, #32
     8fa:	425b      	negs	r3, r3
     8fc:	18d3      	adds	r3, r2, r3
     8fe:	d403      	bmi.n	908 <_sercom_get_async_baud_val+0x120>
     900:	1c34      	adds	r4, r6, #0
     902:	409c      	lsls	r4, r3
     904:	1c23      	adds	r3, r4, #0
     906:	e004      	b.n	912 <_sercom_get_async_baud_val+0x12a>
     908:	465b      	mov	r3, fp
     90a:	1a9b      	subs	r3, r3, r2
     90c:	1c34      	adds	r4, r6, #0
     90e:	40dc      	lsrs	r4, r3
     910:	1c23      	adds	r3, r4, #0
     912:	1c37      	adds	r7, r6, #0
     914:	4097      	lsls	r7, r2

		r = r << 1;
     916:	1c04      	adds	r4, r0, #0
     918:	1c0d      	adds	r5, r1, #0
     91a:	1824      	adds	r4, r4, r0
     91c:	414d      	adcs	r5, r1
     91e:	1c20      	adds	r0, r4, #0
     920:	1c29      	adds	r1, r5, #0
     922:	9002      	str	r0, [sp, #8]
     924:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     926:	4644      	mov	r4, r8
     928:	403c      	ands	r4, r7
     92a:	46a2      	mov	sl, r4
     92c:	464c      	mov	r4, r9
     92e:	4023      	ands	r3, r4
     930:	4654      	mov	r4, sl
     932:	4323      	orrs	r3, r4
     934:	d005      	beq.n	942 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     936:	9b02      	ldr	r3, [sp, #8]
     938:	9c03      	ldr	r4, [sp, #12]
     93a:	1c1d      	adds	r5, r3, #0
     93c:	4335      	orrs	r5, r6
     93e:	1c28      	adds	r0, r5, #0
     940:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     942:	9b01      	ldr	r3, [sp, #4]
     944:	428b      	cmp	r3, r1
     946:	d80a      	bhi.n	95e <_sercom_get_async_baud_val+0x176>
     948:	d102      	bne.n	950 <_sercom_get_async_baud_val+0x168>
     94a:	9b00      	ldr	r3, [sp, #0]
     94c:	4283      	cmp	r3, r0
     94e:	d806      	bhi.n	95e <_sercom_get_async_baud_val+0x176>
			r = r - d;
     950:	9b00      	ldr	r3, [sp, #0]
     952:	9c01      	ldr	r4, [sp, #4]
     954:	1ac0      	subs	r0, r0, r3
     956:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     958:	4663      	mov	r3, ip
     95a:	433b      	orrs	r3, r7
     95c:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     95e:	3a01      	subs	r2, #1
     960:	d2ca      	bcs.n	8f8 <_sercom_get_async_baud_val+0x110>
     962:	9c00      	ldr	r4, [sp, #0]
     964:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     966:	4662      	mov	r2, ip
     968:	9905      	ldr	r1, [sp, #20]
     96a:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     96c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     96e:	4a0f      	ldr	r2, [pc, #60]	; (9ac <_sercom_get_async_baud_val+0x1c4>)
     970:	4293      	cmp	r3, r2
     972:	d908      	bls.n	986 <_sercom_get_async_baud_val+0x19e>
     974:	9a06      	ldr	r2, [sp, #24]
     976:	3201      	adds	r2, #1
     978:	b2d2      	uxtb	r2, r2
     97a:	9206      	str	r2, [sp, #24]
     97c:	1c0a      	adds	r2, r1, #0
     97e:	3201      	adds	r2, #1
     980:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     982:	2a08      	cmp	r2, #8
     984:	d1ae      	bne.n	8e4 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     986:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     988:	9a06      	ldr	r2, [sp, #24]
     98a:	2a08      	cmp	r2, #8
     98c:	d004      	beq.n	998 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     98e:	0351      	lsls	r1, r2, #13
     990:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     992:	9b07      	ldr	r3, [sp, #28]
     994:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     996:	2500      	movs	r5, #0
}
     998:	1c28      	adds	r0, r5, #0
     99a:	b009      	add	sp, #36	; 0x24
     99c:	bc3c      	pop	{r2, r3, r4, r5}
     99e:	4690      	mov	r8, r2
     9a0:	4699      	mov	r9, r3
     9a2:	46a2      	mov	sl, r4
     9a4:	46ab      	mov	fp, r5
     9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9a8:	00001f65 	.word	0x00001f65
     9ac:	00001fff 	.word	0x00001fff

000009b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     9b0:	b510      	push	{r4, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     9b6:	4b0e      	ldr	r3, [pc, #56]	; (9f0 <sercom_set_gclk_generator+0x40>)
     9b8:	781b      	ldrb	r3, [r3, #0]
     9ba:	2b00      	cmp	r3, #0
     9bc:	d001      	beq.n	9c2 <sercom_set_gclk_generator+0x12>
     9be:	2900      	cmp	r1, #0
     9c0:	d00d      	beq.n	9de <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     9c2:	a901      	add	r1, sp, #4
     9c4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     9c6:	2011      	movs	r0, #17
     9c8:	4b0a      	ldr	r3, [pc, #40]	; (9f4 <sercom_set_gclk_generator+0x44>)
     9ca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9cc:	2011      	movs	r0, #17
     9ce:	4b0a      	ldr	r3, [pc, #40]	; (9f8 <sercom_set_gclk_generator+0x48>)
     9d0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     9d2:	4b07      	ldr	r3, [pc, #28]	; (9f0 <sercom_set_gclk_generator+0x40>)
     9d4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9d6:	2201      	movs	r2, #1
     9d8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     9da:	2000      	movs	r0, #0
     9dc:	e006      	b.n	9ec <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     9de:	4b04      	ldr	r3, [pc, #16]	; (9f0 <sercom_set_gclk_generator+0x40>)
     9e0:	785b      	ldrb	r3, [r3, #1]
     9e2:	4283      	cmp	r3, r0
     9e4:	d001      	beq.n	9ea <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     9e6:	201d      	movs	r0, #29
     9e8:	e000      	b.n	9ec <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     9ea:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     9ec:	b002      	add	sp, #8
     9ee:	bd10      	pop	{r4, pc}
     9f0:	200000a0 	.word	0x200000a0
     9f4:	00001b75 	.word	0x00001b75
     9f8:	00001b0d 	.word	0x00001b0d

000009fc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9fc:	4b40      	ldr	r3, [pc, #256]	; (b00 <_sercom_get_default_pad+0x104>)
     9fe:	4298      	cmp	r0, r3
     a00:	d034      	beq.n	a6c <_sercom_get_default_pad+0x70>
     a02:	d807      	bhi.n	a14 <_sercom_get_default_pad+0x18>
     a04:	2384      	movs	r3, #132	; 0x84
     a06:	05db      	lsls	r3, r3, #23
     a08:	4298      	cmp	r0, r3
     a0a:	d00d      	beq.n	a28 <_sercom_get_default_pad+0x2c>
     a0c:	4b3d      	ldr	r3, [pc, #244]	; (b04 <_sercom_get_default_pad+0x108>)
     a0e:	4298      	cmp	r0, r3
     a10:	d01b      	beq.n	a4a <_sercom_get_default_pad+0x4e>
     a12:	e067      	b.n	ae4 <_sercom_get_default_pad+0xe8>
     a14:	4b3c      	ldr	r3, [pc, #240]	; (b08 <_sercom_get_default_pad+0x10c>)
     a16:	4298      	cmp	r0, r3
     a18:	d04a      	beq.n	ab0 <_sercom_get_default_pad+0xb4>
     a1a:	4b3c      	ldr	r3, [pc, #240]	; (b0c <_sercom_get_default_pad+0x110>)
     a1c:	4298      	cmp	r0, r3
     a1e:	d050      	beq.n	ac2 <_sercom_get_default_pad+0xc6>
     a20:	4b3b      	ldr	r3, [pc, #236]	; (b10 <_sercom_get_default_pad+0x114>)
     a22:	4298      	cmp	r0, r3
     a24:	d15e      	bne.n	ae4 <_sercom_get_default_pad+0xe8>
     a26:	e032      	b.n	a8e <_sercom_get_default_pad+0x92>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a28:	2901      	cmp	r1, #1
     a2a:	d006      	beq.n	a3a <_sercom_get_default_pad+0x3e>
     a2c:	2900      	cmp	r1, #0
     a2e:	d05b      	beq.n	ae8 <_sercom_get_default_pad+0xec>
     a30:	2902      	cmp	r1, #2
     a32:	d006      	beq.n	a42 <_sercom_get_default_pad+0x46>
     a34:	2903      	cmp	r1, #3
     a36:	d006      	beq.n	a46 <_sercom_get_default_pad+0x4a>
     a38:	e001      	b.n	a3e <_sercom_get_default_pad+0x42>
     a3a:	4836      	ldr	r0, [pc, #216]	; (b14 <_sercom_get_default_pad+0x118>)
     a3c:	e05f      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     a3e:	2000      	movs	r0, #0
     a40:	e05d      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a42:	4835      	ldr	r0, [pc, #212]	; (b18 <_sercom_get_default_pad+0x11c>)
     a44:	e05b      	b.n	afe <_sercom_get_default_pad+0x102>
     a46:	4835      	ldr	r0, [pc, #212]	; (b1c <_sercom_get_default_pad+0x120>)
     a48:	e059      	b.n	afe <_sercom_get_default_pad+0x102>
     a4a:	2901      	cmp	r1, #1
     a4c:	d006      	beq.n	a5c <_sercom_get_default_pad+0x60>
     a4e:	2900      	cmp	r1, #0
     a50:	d04c      	beq.n	aec <_sercom_get_default_pad+0xf0>
     a52:	2902      	cmp	r1, #2
     a54:	d006      	beq.n	a64 <_sercom_get_default_pad+0x68>
     a56:	2903      	cmp	r1, #3
     a58:	d006      	beq.n	a68 <_sercom_get_default_pad+0x6c>
     a5a:	e001      	b.n	a60 <_sercom_get_default_pad+0x64>
     a5c:	4830      	ldr	r0, [pc, #192]	; (b20 <_sercom_get_default_pad+0x124>)
     a5e:	e04e      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     a60:	2000      	movs	r0, #0
     a62:	e04c      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a64:	482f      	ldr	r0, [pc, #188]	; (b24 <_sercom_get_default_pad+0x128>)
     a66:	e04a      	b.n	afe <_sercom_get_default_pad+0x102>
     a68:	482f      	ldr	r0, [pc, #188]	; (b28 <_sercom_get_default_pad+0x12c>)
     a6a:	e048      	b.n	afe <_sercom_get_default_pad+0x102>
     a6c:	2901      	cmp	r1, #1
     a6e:	d006      	beq.n	a7e <_sercom_get_default_pad+0x82>
     a70:	2900      	cmp	r1, #0
     a72:	d03d      	beq.n	af0 <_sercom_get_default_pad+0xf4>
     a74:	2902      	cmp	r1, #2
     a76:	d006      	beq.n	a86 <_sercom_get_default_pad+0x8a>
     a78:	2903      	cmp	r1, #3
     a7a:	d006      	beq.n	a8a <_sercom_get_default_pad+0x8e>
     a7c:	e001      	b.n	a82 <_sercom_get_default_pad+0x86>
     a7e:	482b      	ldr	r0, [pc, #172]	; (b2c <_sercom_get_default_pad+0x130>)
     a80:	e03d      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     a82:	2000      	movs	r0, #0
     a84:	e03b      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a86:	482a      	ldr	r0, [pc, #168]	; (b30 <_sercom_get_default_pad+0x134>)
     a88:	e039      	b.n	afe <_sercom_get_default_pad+0x102>
     a8a:	482a      	ldr	r0, [pc, #168]	; (b34 <_sercom_get_default_pad+0x138>)
     a8c:	e037      	b.n	afe <_sercom_get_default_pad+0x102>
     a8e:	2901      	cmp	r1, #1
     a90:	d006      	beq.n	aa0 <_sercom_get_default_pad+0xa4>
     a92:	2900      	cmp	r1, #0
     a94:	d02e      	beq.n	af4 <_sercom_get_default_pad+0xf8>
     a96:	2902      	cmp	r1, #2
     a98:	d006      	beq.n	aa8 <_sercom_get_default_pad+0xac>
     a9a:	2903      	cmp	r1, #3
     a9c:	d006      	beq.n	aac <_sercom_get_default_pad+0xb0>
     a9e:	e001      	b.n	aa4 <_sercom_get_default_pad+0xa8>
     aa0:	4825      	ldr	r0, [pc, #148]	; (b38 <_sercom_get_default_pad+0x13c>)
     aa2:	e02c      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     aa4:	2000      	movs	r0, #0
     aa6:	e02a      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aa8:	4824      	ldr	r0, [pc, #144]	; (b3c <_sercom_get_default_pad+0x140>)
     aaa:	e028      	b.n	afe <_sercom_get_default_pad+0x102>
     aac:	4824      	ldr	r0, [pc, #144]	; (b40 <_sercom_get_default_pad+0x144>)
     aae:	e026      	b.n	afe <_sercom_get_default_pad+0x102>
     ab0:	2902      	cmp	r1, #2
     ab2:	d002      	beq.n	aba <_sercom_get_default_pad+0xbe>
     ab4:	2903      	cmp	r1, #3
     ab6:	d002      	beq.n	abe <_sercom_get_default_pad+0xc2>
     ab8:	e01e      	b.n	af8 <_sercom_get_default_pad+0xfc>
     aba:	4822      	ldr	r0, [pc, #136]	; (b44 <_sercom_get_default_pad+0x148>)
     abc:	e01f      	b.n	afe <_sercom_get_default_pad+0x102>
     abe:	4822      	ldr	r0, [pc, #136]	; (b48 <_sercom_get_default_pad+0x14c>)
     ac0:	e01d      	b.n	afe <_sercom_get_default_pad+0x102>
     ac2:	2901      	cmp	r1, #1
     ac4:	d006      	beq.n	ad4 <_sercom_get_default_pad+0xd8>
     ac6:	2900      	cmp	r1, #0
     ac8:	d018      	beq.n	afc <_sercom_get_default_pad+0x100>
     aca:	2902      	cmp	r1, #2
     acc:	d006      	beq.n	adc <_sercom_get_default_pad+0xe0>
     ace:	2903      	cmp	r1, #3
     ad0:	d006      	beq.n	ae0 <_sercom_get_default_pad+0xe4>
     ad2:	e001      	b.n	ad8 <_sercom_get_default_pad+0xdc>
     ad4:	481d      	ldr	r0, [pc, #116]	; (b4c <_sercom_get_default_pad+0x150>)
     ad6:	e012      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     ad8:	2000      	movs	r0, #0
     ada:	e010      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     adc:	481c      	ldr	r0, [pc, #112]	; (b50 <_sercom_get_default_pad+0x154>)
     ade:	e00e      	b.n	afe <_sercom_get_default_pad+0x102>
     ae0:	481c      	ldr	r0, [pc, #112]	; (b54 <_sercom_get_default_pad+0x158>)
     ae2:	e00c      	b.n	afe <_sercom_get_default_pad+0x102>
	}

	Assert(false);
	return 0;
     ae4:	2000      	movs	r0, #0
     ae6:	e00a      	b.n	afe <_sercom_get_default_pad+0x102>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ae8:	481b      	ldr	r0, [pc, #108]	; (b58 <_sercom_get_default_pad+0x15c>)
     aea:	e008      	b.n	afe <_sercom_get_default_pad+0x102>
     aec:	2003      	movs	r0, #3
     aee:	e006      	b.n	afe <_sercom_get_default_pad+0x102>
     af0:	481a      	ldr	r0, [pc, #104]	; (b5c <_sercom_get_default_pad+0x160>)
     af2:	e004      	b.n	afe <_sercom_get_default_pad+0x102>
     af4:	481a      	ldr	r0, [pc, #104]	; (b60 <_sercom_get_default_pad+0x164>)
     af6:	e002      	b.n	afe <_sercom_get_default_pad+0x102>
     af8:	2000      	movs	r0, #0
     afa:	e000      	b.n	afe <_sercom_get_default_pad+0x102>
     afc:	4819      	ldr	r0, [pc, #100]	; (b64 <_sercom_get_default_pad+0x168>)
	}

	Assert(false);
	return 0;
}
     afe:	4770      	bx	lr
     b00:	42000800 	.word	0x42000800
     b04:	42000400 	.word	0x42000400
     b08:	42001000 	.word	0x42001000
     b0c:	43000400 	.word	0x43000400
     b10:	42000c00 	.word	0x42000c00
     b14:	00050003 	.word	0x00050003
     b18:	00060003 	.word	0x00060003
     b1c:	00070003 	.word	0x00070003
     b20:	00010003 	.word	0x00010003
     b24:	001e0003 	.word	0x001e0003
     b28:	001f0003 	.word	0x001f0003
     b2c:	00090003 	.word	0x00090003
     b30:	000a0003 	.word	0x000a0003
     b34:	000b0003 	.word	0x000b0003
     b38:	00110003 	.word	0x00110003
     b3c:	00120003 	.word	0x00120003
     b40:	00130003 	.word	0x00130003
     b44:	000e0003 	.word	0x000e0003
     b48:	000f0003 	.word	0x000f0003
     b4c:	00170003 	.word	0x00170003
     b50:	00180003 	.word	0x00180003
     b54:	00190003 	.word	0x00190003
     b58:	00040003 	.word	0x00040003
     b5c:	00080003 	.word	0x00080003
     b60:	00100003 	.word	0x00100003
     b64:	00160003 	.word	0x00160003

00000b68 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b68:	b530      	push	{r4, r5, lr}
     b6a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b6c:	4b0c      	ldr	r3, [pc, #48]	; (ba0 <_sercom_get_sercom_inst_index+0x38>)
     b6e:	466a      	mov	r2, sp
     b70:	cb32      	ldmia	r3!, {r1, r4, r5}
     b72:	c232      	stmia	r2!, {r1, r4, r5}
     b74:	cb32      	ldmia	r3!, {r1, r4, r5}
     b76:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b78:	9b00      	ldr	r3, [sp, #0]
     b7a:	4283      	cmp	r3, r0
     b7c:	d006      	beq.n	b8c <_sercom_get_sercom_inst_index+0x24>
     b7e:	2301      	movs	r3, #1
     b80:	009a      	lsls	r2, r3, #2
     b82:	4669      	mov	r1, sp
     b84:	5852      	ldr	r2, [r2, r1]
     b86:	4282      	cmp	r2, r0
     b88:	d103      	bne.n	b92 <_sercom_get_sercom_inst_index+0x2a>
     b8a:	e000      	b.n	b8e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b8c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     b8e:	b2d8      	uxtb	r0, r3
     b90:	e003      	b.n	b9a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b92:	3301      	adds	r3, #1
     b94:	2b06      	cmp	r3, #6
     b96:	d1f3      	bne.n	b80 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b98:	2000      	movs	r0, #0
}
     b9a:	b007      	add	sp, #28
     b9c:	bd30      	pop	{r4, r5, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	00002828 	.word	0x00002828

00000ba4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ba6:	465f      	mov	r7, fp
     ba8:	4656      	mov	r6, sl
     baa:	464d      	mov	r5, r9
     bac:	4644      	mov	r4, r8
     bae:	b4f0      	push	{r4, r5, r6, r7}
     bb0:	b091      	sub	sp, #68	; 0x44
     bb2:	1c06      	adds	r6, r0, #0
     bb4:	1c0c      	adds	r4, r1, #0
     bb6:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     bb8:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bba:	1c08      	adds	r0, r1, #0
     bbc:	4bb3      	ldr	r3, [pc, #716]	; (e8c <usart_init+0x2e8>)
     bbe:	4798      	blx	r3
     bc0:	1e02      	subs	r2, r0, #0
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
     bc2:	2a05      	cmp	r2, #5
     bc4:	d003      	beq.n	bce <usart_init+0x2a>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bc6:	1c07      	adds	r7, r0, #0
     bc8:	3712      	adds	r7, #18
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     bca:	1c03      	adds	r3, r0, #0
     bcc:	e001      	b.n	bd2 <usart_init+0x2e>
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     bce:	2718      	movs	r7, #24
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index, gclk_index; 
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
#if (SAML21)
	if (sercom_index == 5) {
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     bd0:	2301      	movs	r3, #1
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     bd2:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     bd4:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     bd6:	07c9      	lsls	r1, r1, #31
     bd8:	d500      	bpl.n	bdc <usart_init+0x38>
     bda:	e150      	b.n	e7e <usart_init+0x2da>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bdc:	6821      	ldr	r1, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     bde:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     be0:	0789      	lsls	r1, r1, #30
     be2:	d500      	bpl.n	be6 <usart_init+0x42>
     be4:	e14b      	b.n	e7e <usart_init+0x2da>
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
#if (SAML21)
	if (sercom_index == 5) {
     be6:	2a05      	cmp	r2, #5
     be8:	d106      	bne.n	bf8 <usart_init+0x54>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     bea:	49a9      	ldr	r1, [pc, #676]	; (e90 <usart_init+0x2ec>)
     bec:	6a0a      	ldr	r2, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     bee:	381b      	subs	r0, #27
     bf0:	4098      	lsls	r0, r3
     bf2:	4310      	orrs	r0, r2
     bf4:	6208      	str	r0, [r1, #32]
     bf6:	e005      	b.n	c04 <usart_init+0x60>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     bf8:	49a5      	ldr	r1, [pc, #660]	; (e90 <usart_init+0x2ec>)
     bfa:	69ca      	ldr	r2, [r1, #28]
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     bfc:	2001      	movs	r0, #1
     bfe:	4098      	lsls	r0, r3
     c00:	4310      	orrs	r0, r2
     c02:	61c8      	str	r0, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     c04:	a90f      	add	r1, sp, #60	; 0x3c
     c06:	232d      	movs	r3, #45	; 0x2d
     c08:	4698      	mov	r8, r3
     c0a:	5ceb      	ldrb	r3, [r5, r3]
     c0c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c0e:	b2ff      	uxtb	r7, r7
     c10:	1c38      	adds	r0, r7, #0
     c12:	4ba0      	ldr	r3, [pc, #640]	; (e94 <usart_init+0x2f0>)
     c14:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c16:	1c38      	adds	r0, r7, #0
     c18:	4b9f      	ldr	r3, [pc, #636]	; (e98 <usart_init+0x2f4>)
     c1a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c1c:	4643      	mov	r3, r8
     c1e:	5ce8      	ldrb	r0, [r5, r3]
     c20:	2100      	movs	r1, #0
     c22:	4b9e      	ldr	r3, [pc, #632]	; (e9c <usart_init+0x2f8>)
     c24:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     c26:	7aeb      	ldrb	r3, [r5, #11]
     c28:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     c2a:	2324      	movs	r3, #36	; 0x24
     c2c:	5ceb      	ldrb	r3, [r5, r3]
     c2e:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     c30:	2325      	movs	r3, #37	; 0x25
     c32:	5ceb      	ldrb	r3, [r5, r3]
     c34:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     c36:	7eeb      	ldrb	r3, [r5, #27]
     c38:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     c3a:	7f2b      	ldrb	r3, [r5, #28]
     c3c:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c3e:	6833      	ldr	r3, [r6, #0]
     c40:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c42:	1c18      	adds	r0, r3, #0
     c44:	4b91      	ldr	r3, [pc, #580]	; (e8c <usart_init+0x2e8>)
     c46:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c48:	3012      	adds	r0, #18
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     c4a:	2200      	movs	r2, #0
     c4c:	230e      	movs	r3, #14
     c4e:	a906      	add	r1, sp, #24
     c50:	468c      	mov	ip, r1
     c52:	4463      	add	r3, ip
     c54:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     c56:	8a2b      	ldrh	r3, [r5, #16]
     c58:	4699      	mov	r9, r3
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	01db      	lsls	r3, r3, #7
     c5e:	4599      	cmp	r9, r3
     c60:	d019      	beq.n	c96 <usart_init+0xf2>
     c62:	d804      	bhi.n	c6e <usart_init+0xca>
     c64:	2380      	movs	r3, #128	; 0x80
     c66:	019b      	lsls	r3, r3, #6
     c68:	4599      	cmp	r9, r3
     c6a:	d00a      	beq.n	c82 <usart_init+0xde>
     c6c:	e0e8      	b.n	e40 <usart_init+0x29c>
     c6e:	23c0      	movs	r3, #192	; 0xc0
     c70:	01db      	lsls	r3, r3, #7
     c72:	4599      	cmp	r9, r3
     c74:	d00a      	beq.n	c8c <usart_init+0xe8>
     c76:	2380      	movs	r3, #128	; 0x80
     c78:	021b      	lsls	r3, r3, #8
     c7a:	4599      	cmp	r9, r3
     c7c:	d100      	bne.n	c80 <usart_init+0xdc>
     c7e:	e0e4      	b.n	e4a <usart_init+0x2a6>
     c80:	e0de      	b.n	e40 <usart_init+0x29c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c82:	2310      	movs	r3, #16
     c84:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c86:	3b0f      	subs	r3, #15
     c88:	9307      	str	r3, [sp, #28]
     c8a:	e0e2      	b.n	e52 <usart_init+0x2ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c8c:	2308      	movs	r3, #8
     c8e:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c90:	3b07      	subs	r3, #7
     c92:	9307      	str	r3, [sp, #28]
     c94:	e0dd      	b.n	e52 <usart_init+0x2ae>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c96:	682b      	ldr	r3, [r5, #0]
     c98:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     c9a:	68eb      	ldr	r3, [r5, #12]
     c9c:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c9e:	696b      	ldr	r3, [r5, #20]
     ca0:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ca2:	7e2b      	ldrb	r3, [r5, #24]
     ca4:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ca6:	2326      	movs	r3, #38	; 0x26
     ca8:	5ceb      	ldrb	r3, [r5, r3]
     caa:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     cac:	686a      	ldr	r2, [r5, #4]
     cae:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     cb0:	2a00      	cmp	r2, #0
     cb2:	d016      	beq.n	ce2 <usart_init+0x13e>
     cb4:	2380      	movs	r3, #128	; 0x80
     cb6:	055b      	lsls	r3, r3, #21
     cb8:	429a      	cmp	r2, r3
     cba:	d139      	bne.n	d30 <usart_init+0x18c>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     cbc:	2327      	movs	r3, #39	; 0x27
     cbe:	5ceb      	ldrb	r3, [r5, r3]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d139      	bne.n	d38 <usart_init+0x194>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     cc4:	6a2b      	ldr	r3, [r5, #32]
     cc6:	4698      	mov	r8, r3
     cc8:	b2c0      	uxtb	r0, r0
     cca:	4b75      	ldr	r3, [pc, #468]	; (ea0 <usart_init+0x2fc>)
     ccc:	4798      	blx	r3
     cce:	1c01      	adds	r1, r0, #0
     cd0:	4640      	mov	r0, r8
     cd2:	220e      	movs	r2, #14
     cd4:	ab06      	add	r3, sp, #24
     cd6:	469c      	mov	ip, r3
     cd8:	4462      	add	r2, ip
     cda:	4b72      	ldr	r3, [pc, #456]	; (ea4 <usart_init+0x300>)
     cdc:	4798      	blx	r3
     cde:	1c03      	adds	r3, r0, #0
     ce0:	e027      	b.n	d32 <usart_init+0x18e>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ce2:	2308      	movs	r3, #8
     ce4:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ce6:	2300      	movs	r3, #0
     ce8:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     cea:	2327      	movs	r3, #39	; 0x27
     cec:	5ceb      	ldrb	r3, [r5, r3]
     cee:	2b00      	cmp	r3, #0
     cf0:	d00c      	beq.n	d0c <usart_init+0x168>
				status_code =
     cf2:	4643      	mov	r3, r8
     cf4:	9300      	str	r3, [sp, #0]
     cf6:	6a28      	ldr	r0, [r5, #32]
     cf8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     cfa:	220e      	movs	r2, #14
     cfc:	ab06      	add	r3, sp, #24
     cfe:	469c      	mov	ip, r3
     d00:	4462      	add	r2, ip
     d02:	9b07      	ldr	r3, [sp, #28]
     d04:	4f68      	ldr	r7, [pc, #416]	; (ea8 <usart_init+0x304>)
     d06:	47b8      	blx	r7
     d08:	1c03      	adds	r3, r0, #0
     d0a:	e012      	b.n	d32 <usart_init+0x18e>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     d0c:	6a2b      	ldr	r3, [r5, #32]
     d0e:	1c1f      	adds	r7, r3, #0
     d10:	b2c0      	uxtb	r0, r0
     d12:	4b63      	ldr	r3, [pc, #396]	; (ea0 <usart_init+0x2fc>)
     d14:	4798      	blx	r3
     d16:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     d18:	4643      	mov	r3, r8
     d1a:	9300      	str	r3, [sp, #0]
     d1c:	1c38      	adds	r0, r7, #0
     d1e:	220e      	movs	r2, #14
     d20:	ab06      	add	r3, sp, #24
     d22:	469c      	mov	ip, r3
     d24:	4462      	add	r2, ip
     d26:	9b07      	ldr	r3, [sp, #28]
     d28:	4f5f      	ldr	r7, [pc, #380]	; (ea8 <usart_init+0x304>)
     d2a:	47b8      	blx	r7
     d2c:	1c03      	adds	r3, r0, #0
     d2e:	e000      	b.n	d32 <usart_init+0x18e>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     d30:	2300      	movs	r3, #0
     d32:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     d34:	d000      	beq.n	d38 <usart_init+0x194>
     d36:	e0a2      	b.n	e7e <usart_init+0x2da>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     d38:	7e6b      	ldrb	r3, [r5, #25]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d002      	beq.n	d44 <usart_init+0x1a0>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     d3e:	7eab      	ldrb	r3, [r5, #26]
     d40:	4652      	mov	r2, sl
     d42:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d44:	6832      	ldr	r2, [r6, #0]
     d46:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d48:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d4a:	2b00      	cmp	r3, #0
     d4c:	d1fc      	bne.n	d48 <usart_init+0x1a4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     d4e:	330e      	adds	r3, #14
     d50:	aa06      	add	r2, sp, #24
     d52:	4694      	mov	ip, r2
     d54:	4463      	add	r3, ip
     d56:	881b      	ldrh	r3, [r3, #0]
     d58:	4652      	mov	r2, sl
     d5a:	8193      	strh	r3, [r2, #12]
     d5c:	9b02      	ldr	r3, [sp, #8]
     d5e:	465a      	mov	r2, fp
     d60:	4313      	orrs	r3, r2
     d62:	9a03      	ldr	r2, [sp, #12]
     d64:	4313      	orrs	r3, r2
     d66:	433b      	orrs	r3, r7
     d68:	464a      	mov	r2, r9
     d6a:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d6c:	9a04      	ldr	r2, [sp, #16]
     d6e:	0212      	lsls	r2, r2, #8
     d70:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d72:	9a05      	ldr	r2, [sp, #20]
     d74:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     d76:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     d78:	2327      	movs	r3, #39	; 0x27
     d7a:	5ceb      	ldrb	r3, [r5, r3]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d101      	bne.n	d84 <usart_init+0x1e0>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d80:	3304      	adds	r3, #4
     d82:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d84:	7f2b      	ldrb	r3, [r5, #28]
     d86:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d88:	7e6a      	ldrb	r2, [r5, #25]
     d8a:	0293      	lsls	r3, r2, #10
     d8c:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d8e:	7f6a      	ldrb	r2, [r5, #29]
     d90:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d92:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d94:	2224      	movs	r2, #36	; 0x24
     d96:	5caa      	ldrb	r2, [r5, r2]
     d98:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d9a:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d9c:	2225      	movs	r2, #37	; 0x25
     d9e:	5caa      	ldrb	r2, [r5, r2]
     da0:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     da2:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     da4:	7ae9      	ldrb	r1, [r5, #11]
     da6:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     da8:	892b      	ldrh	r3, [r5, #8]
     daa:	2bff      	cmp	r3, #255	; 0xff
     dac:	d004      	beq.n	db8 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     dae:	2280      	movs	r2, #128	; 0x80
     db0:	0452      	lsls	r2, r2, #17
     db2:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     db4:	4319      	orrs	r1, r3
     db6:	e005      	b.n	dc4 <usart_init+0x220>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     db8:	7eeb      	ldrb	r3, [r5, #27]
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <usart_init+0x220>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     dbe:	2380      	movs	r3, #128	; 0x80
     dc0:	04db      	lsls	r3, r3, #19
     dc2:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     dc4:	232c      	movs	r3, #44	; 0x2c
     dc6:	5ceb      	ldrb	r3, [r5, r3]
     dc8:	2b00      	cmp	r3, #0
     dca:	d103      	bne.n	dd4 <usart_init+0x230>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     dcc:	4b37      	ldr	r3, [pc, #220]	; (eac <usart_init+0x308>)
     dce:	789b      	ldrb	r3, [r3, #2]
     dd0:	079b      	lsls	r3, r3, #30
     dd2:	d501      	bpl.n	dd8 <usart_init+0x234>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     dd4:	2380      	movs	r3, #128	; 0x80
     dd6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     dd8:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dda:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ddc:	2b00      	cmp	r3, #0
     dde:	d1fc      	bne.n	dda <usart_init+0x236>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     de0:	4653      	mov	r3, sl
     de2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     de4:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     de6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     de8:	2b00      	cmp	r3, #0
     dea:	d1fc      	bne.n	de6 <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     dec:	4653      	mov	r3, sl
     dee:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     df0:	ab0e      	add	r3, sp, #56	; 0x38
     df2:	2280      	movs	r2, #128	; 0x80
     df4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     df6:	2200      	movs	r2, #0
     df8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dfa:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     dfc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     dfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     e00:	930a      	str	r3, [sp, #40]	; 0x28
     e02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     e04:	930b      	str	r3, [sp, #44]	; 0x2c
     e06:	6bab      	ldr	r3, [r5, #56]	; 0x38
     e08:	930c      	str	r3, [sp, #48]	; 0x30
     e0a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
     e0c:	9302      	str	r3, [sp, #8]
     e0e:	930d      	str	r3, [sp, #52]	; 0x34
     e10:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e12:	ad0e      	add	r5, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e14:	4e26      	ldr	r6, [pc, #152]	; (eb0 <usart_init+0x30c>)
     e16:	b2f9      	uxtb	r1, r7
     e18:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e1a:	aa0a      	add	r2, sp, #40	; 0x28
     e1c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     e1e:	2800      	cmp	r0, #0
     e20:	d102      	bne.n	e28 <usart_init+0x284>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e22:	1c20      	adds	r0, r4, #0
     e24:	4b23      	ldr	r3, [pc, #140]	; (eb4 <usart_init+0x310>)
     e26:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     e28:	1c43      	adds	r3, r0, #1
     e2a:	d004      	beq.n	e36 <usart_init+0x292>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e2c:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e2e:	0c00      	lsrs	r0, r0, #16
     e30:	b2c0      	uxtb	r0, r0
     e32:	1c29      	adds	r1, r5, #0
     e34:	47b0      	blx	r6
     e36:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e38:	2f04      	cmp	r7, #4
     e3a:	d1ec      	bne.n	e16 <usart_init+0x272>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     e3c:	2000      	movs	r0, #0
     e3e:	e01e      	b.n	e7e <usart_init+0x2da>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e40:	2310      	movs	r3, #16
     e42:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e44:	2300      	movs	r3, #0
     e46:	9307      	str	r3, [sp, #28]
     e48:	e003      	b.n	e52 <usart_init+0x2ae>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e4a:	2303      	movs	r3, #3
     e4c:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e4e:	2300      	movs	r3, #0
     e50:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e52:	682b      	ldr	r3, [r5, #0]
     e54:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     e56:	68eb      	ldr	r3, [r5, #12]
     e58:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e5a:	696b      	ldr	r3, [r5, #20]
     e5c:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e5e:	7e2b      	ldrb	r3, [r5, #24]
     e60:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e62:	2326      	movs	r3, #38	; 0x26
     e64:	5ceb      	ldrb	r3, [r5, r3]
     e66:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     e68:	686a      	ldr	r2, [r5, #4]
     e6a:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     e6c:	2a00      	cmp	r2, #0
     e6e:	d100      	bne.n	e72 <usart_init+0x2ce>
     e70:	e73b      	b.n	cea <usart_init+0x146>
     e72:	2380      	movs	r3, #128	; 0x80
     e74:	055b      	lsls	r3, r3, #21
     e76:	429a      	cmp	r2, r3
     e78:	d100      	bne.n	e7c <usart_init+0x2d8>
     e7a:	e71f      	b.n	cbc <usart_init+0x118>
     e7c:	e75c      	b.n	d38 <usart_init+0x194>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e7e:	b011      	add	sp, #68	; 0x44
     e80:	bc3c      	pop	{r2, r3, r4, r5}
     e82:	4690      	mov	r8, r2
     e84:	4699      	mov	r9, r3
     e86:	46a2      	mov	sl, r4
     e88:	46ab      	mov	fp, r5
     e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e8c:	00000b69 	.word	0x00000b69
     e90:	40000400 	.word	0x40000400
     e94:	00001b75 	.word	0x00001b75
     e98:	00001b0d 	.word	0x00001b0d
     e9c:	000009b1 	.word	0x000009b1
     ea0:	00001b99 	.word	0x00001b99
     ea4:	000007c1 	.word	0x000007c1
     ea8:	000007e9 	.word	0x000007e9
     eac:	41002000 	.word	0x41002000
     eb0:	00001c71 	.word	0x00001c71
     eb4:	000009fd 	.word	0x000009fd

00000eb8 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eb8:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     eba:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     ebc:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ebe:	2a00      	cmp	r2, #0
     ec0:	d00c      	beq.n	edc <usart_write_wait+0x24>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     ec2:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     ec4:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     ec6:	07d2      	lsls	r2, r2, #31
     ec8:	d508      	bpl.n	edc <usart_write_wait+0x24>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eca:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ecc:	2a00      	cmp	r2, #0
     ece:	d1fc      	bne.n	eca <usart_write_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     ed0:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ed2:	2102      	movs	r1, #2
     ed4:	7e1a      	ldrb	r2, [r3, #24]
     ed6:	420a      	tst	r2, r1
     ed8:	d0fc      	beq.n	ed4 <usart_write_wait+0x1c>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     eda:	2000      	movs	r0, #0
}
     edc:	4770      	bx	lr
     ede:	46c0      	nop			; (mov r8, r8)

00000ee0 <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ee0:	6803      	ldr	r3, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ee2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     ee4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ee6:	2a00      	cmp	r2, #0
     ee8:	d02f      	beq.n	f4a <usart_read_wait+0x6a>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     eea:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     eec:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     eee:	0752      	lsls	r2, r2, #29
     ef0:	d52b      	bpl.n	f4a <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ef2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ef4:	2a00      	cmp	r2, #0
     ef6:	d1fc      	bne.n	ef2 <usart_read_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ef8:	8b5a      	ldrh	r2, [r3, #26]
     efa:	b2d2      	uxtb	r2, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     efc:	0690      	lsls	r0, r2, #26
     efe:	d021      	beq.n	f44 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f00:	0790      	lsls	r0, r2, #30
     f02:	d503      	bpl.n	f0c <usart_read_wait+0x2c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f04:	2202      	movs	r2, #2
     f06:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
     f08:	201a      	movs	r0, #26
     f0a:	e01e      	b.n	f4a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f0c:	0750      	lsls	r0, r2, #29
     f0e:	d503      	bpl.n	f18 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f10:	2204      	movs	r2, #4
     f12:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
     f14:	201e      	movs	r0, #30
     f16:	e018      	b.n	f4a <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f18:	07d0      	lsls	r0, r2, #31
     f1a:	d503      	bpl.n	f24 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f1c:	2201      	movs	r2, #1
     f1e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
     f20:	2013      	movs	r0, #19
     f22:	e012      	b.n	f4a <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     f24:	06d0      	lsls	r0, r2, #27
     f26:	d505      	bpl.n	f34 <usart_read_wait+0x54>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     f28:	8b59      	ldrh	r1, [r3, #26]
     f2a:	2210      	movs	r2, #16
     f2c:	430a      	orrs	r2, r1
     f2e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
     f30:	2042      	movs	r0, #66	; 0x42
     f32:	e00a      	b.n	f4a <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     f34:	0692      	lsls	r2, r2, #26
     f36:	d505      	bpl.n	f44 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     f38:	8b59      	ldrh	r1, [r3, #26]
     f3a:	2220      	movs	r2, #32
     f3c:	430a      	orrs	r2, r1
     f3e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
     f40:	2041      	movs	r0, #65	; 0x41
     f42:	e002      	b.n	f4a <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     f46:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     f48:	2000      	movs	r0, #0
}
     f4a:	4770      	bx	lr

00000f4c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f4e:	4657      	mov	r7, sl
     f50:	464e      	mov	r6, r9
     f52:	b4c0      	push	{r6, r7}
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f54:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     f56:	2a00      	cmp	r2, #0
     f58:	d049      	beq.n	fee <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f5a:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     f5c:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f5e:	2c00      	cmp	r4, #0
     f60:	d045      	beq.n	fee <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f62:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f64:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f66:	2b00      	cmp	r3, #0
     f68:	d1fc      	bne.n	f64 <usart_write_buffer_wait+0x18>
     f6a:	468a      	mov	sl, r1
     f6c:	4681      	mov	r9, r0
     f6e:	1c17      	adds	r7, r2, #0
     f70:	2600      	movs	r6, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     f72:	2501      	movs	r5, #1
     f74:	e01f      	b.n	fb6 <usart_write_buffer_wait+0x6a>
     f76:	7e22      	ldrb	r2, [r4, #24]
     f78:	422a      	tst	r2, r5
     f7a:	d104      	bne.n	f86 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
     f7c:	2b01      	cmp	r3, #1
     f7e:	d028      	beq.n	fd2 <usart_write_buffer_wait+0x86>
     f80:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     f82:	2b00      	cmp	r3, #0
     f84:	d1f7      	bne.n	f76 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     f86:	1c72      	adds	r2, r6, #1
     f88:	b292      	uxth	r2, r2
     f8a:	4653      	mov	r3, sl
     f8c:	5d9b      	ldrb	r3, [r3, r6]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f8e:	4649      	mov	r1, r9
     f90:	7949      	ldrb	r1, [r1, #5]
     f92:	2901      	cmp	r1, #1
     f94:	d002      	beq.n	f9c <usart_write_buffer_wait+0x50>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     f96:	b299      	uxth	r1, r3
     f98:	1c16      	adds	r6, r2, #0
     f9a:	e005      	b.n	fa8 <usart_write_buffer_wait+0x5c>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     f9c:	1cb1      	adds	r1, r6, #2
     f9e:	b28e      	uxth	r6, r1
     fa0:	4651      	mov	r1, sl
     fa2:	5c89      	ldrb	r1, [r1, r2]
     fa4:	0209      	lsls	r1, r1, #8
     fa6:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     fa8:	4648      	mov	r0, r9
     faa:	4b13      	ldr	r3, [pc, #76]	; (ff8 <usart_write_buffer_wait+0xac>)
     fac:	4798      	blx	r3
     fae:	1e7a      	subs	r2, r7, #1
     fb0:	b297      	uxth	r7, r2
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     fb2:	2f00      	cmp	r7, #0
     fb4:	d015      	beq.n	fe2 <usart_write_buffer_wait+0x96>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     fb6:	7e23      	ldrb	r3, [r4, #24]
     fb8:	422b      	tst	r3, r5
     fba:	d1e4      	bne.n	f86 <usart_write_buffer_wait+0x3a>
     fbc:	4b0f      	ldr	r3, [pc, #60]	; (ffc <usart_write_buffer_wait+0xb0>)
     fbe:	e7da      	b.n	f76 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     fc0:	7e22      	ldrb	r2, [r4, #24]
     fc2:	420a      	tst	r2, r1
     fc4:	d107      	bne.n	fd6 <usart_write_buffer_wait+0x8a>
			break;
		} else if (i == USART_TIMEOUT) {
     fc6:	2b01      	cmp	r3, #1
     fc8:	d007      	beq.n	fda <usart_write_buffer_wait+0x8e>
     fca:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     fcc:	2b00      	cmp	r3, #0
     fce:	d1f7      	bne.n	fc0 <usart_write_buffer_wait+0x74>
     fd0:	e00d      	b.n	fee <usart_write_buffer_wait+0xa2>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     fd2:	2312      	movs	r3, #18
     fd4:	e00b      	b.n	fee <usart_write_buffer_wait+0xa2>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     fd6:	2300      	movs	r3, #0
     fd8:	e009      	b.n	fee <usart_write_buffer_wait+0xa2>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     fda:	2312      	movs	r3, #18
     fdc:	e007      	b.n	fee <usart_write_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     fde:	2300      	movs	r3, #0
     fe0:	e005      	b.n	fee <usart_write_buffer_wait+0xa2>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     fe2:	7e23      	ldrb	r3, [r4, #24]
     fe4:	079b      	lsls	r3, r3, #30
     fe6:	d4fa      	bmi.n	fde <usart_write_buffer_wait+0x92>
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <usart_write_buffer_wait+0xb0>)
     fea:	2102      	movs	r1, #2
     fec:	e7e8      	b.n	fc0 <usart_write_buffer_wait+0x74>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     fee:	1c18      	adds	r0, r3, #0
     ff0:	bc0c      	pop	{r2, r3}
     ff2:	4691      	mov	r9, r2
     ff4:	469a      	mov	sl, r3
     ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ff8:	00000eb9 	.word	0x00000eb9
     ffc:	0000ffff 	.word	0x0000ffff

00001000 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	4657      	mov	r7, sl
    1004:	464e      	mov	r6, r9
    1006:	b4c0      	push	{r6, r7}
    1008:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    100a:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    100c:	2a00      	cmp	r2, #0
    100e:	d03c      	beq.n	108a <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1010:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1012:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1014:	2c00      	cmp	r4, #0
    1016:	d038      	beq.n	108a <usart_read_buffer_wait+0x8a>
    1018:	468a      	mov	sl, r1
    101a:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    101c:	6805      	ldr	r5, [r0, #0]
    101e:	1c17      	adds	r7, r2, #0
    1020:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1022:	2404      	movs	r4, #4
    1024:	e02c      	b.n	1080 <usart_read_buffer_wait+0x80>
    1026:	7e2a      	ldrb	r2, [r5, #24]
    1028:	4222      	tst	r2, r4
    102a:	d104      	bne.n	1036 <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
    102c:	2b01      	cmp	r3, #1
    102e:	d023      	beq.n	1078 <usart_read_buffer_wait+0x78>
    1030:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1032:	2b00      	cmp	r3, #0
    1034:	d1f7      	bne.n	1026 <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1036:	466b      	mov	r3, sp
    1038:	1d99      	adds	r1, r3, #6
    103a:	2300      	movs	r3, #0
    103c:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
    103e:	4648      	mov	r0, r9
    1040:	4b15      	ldr	r3, [pc, #84]	; (1098 <usart_read_buffer_wait+0x98>)
    1042:	4798      	blx	r3

		if (retval != STATUS_OK) {
    1044:	2800      	cmp	r0, #0
    1046:	d119      	bne.n	107c <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1048:	1c73      	adds	r3, r6, #1
    104a:	b299      	uxth	r1, r3
    104c:	466b      	mov	r3, sp
    104e:	3306      	adds	r3, #6
    1050:	881b      	ldrh	r3, [r3, #0]
    1052:	4652      	mov	r2, sl
    1054:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1056:	464a      	mov	r2, r9
    1058:	7952      	ldrb	r2, [r2, #5]
    105a:	2a01      	cmp	r2, #1
    105c:	d105      	bne.n	106a <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
    105e:	1cb2      	adds	r2, r6, #2
    1060:	b296      	uxth	r6, r2
    1062:	0a1b      	lsrs	r3, r3, #8
    1064:	4652      	mov	r2, sl
    1066:	5453      	strb	r3, [r2, r1]
    1068:	e000      	b.n	106c <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    106a:	1c0e      	adds	r6, r1, #0
    106c:	1e7a      	subs	r2, r7, #1
    106e:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
    1070:	2f00      	cmp	r7, #0
    1072:	d105      	bne.n	1080 <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    1074:	2300      	movs	r3, #0
    1076:	e008      	b.n	108a <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1078:	2312      	movs	r3, #18
    107a:	e006      	b.n	108a <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
    107c:	1c03      	adds	r3, r0, #0
    107e:	e004      	b.n	108a <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1080:	7e2b      	ldrb	r3, [r5, #24]
    1082:	4223      	tst	r3, r4
    1084:	d1d7      	bne.n	1036 <usart_read_buffer_wait+0x36>
    1086:	4b05      	ldr	r3, [pc, #20]	; (109c <usart_read_buffer_wait+0x9c>)
    1088:	e7cd      	b.n	1026 <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    108a:	1c18      	adds	r0, r3, #0
    108c:	b003      	add	sp, #12
    108e:	bc0c      	pop	{r2, r3}
    1090:	4691      	mov	r9, r2
    1092:	469a      	mov	sl, r3
    1094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	00000ee1 	.word	0x00000ee1
    109c:	0000ffff 	.word	0x0000ffff

000010a0 <configure_SP1ML>:
#include "SP1ML.h"
#include "USB_VCP.h"
#include <asf.h>

void configure_SP1ML(void)
{
    10a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10a4:	ac01      	add	r4, sp, #4
    10a6:	2380      	movs	r3, #128	; 0x80
    10a8:	7023      	strb	r3, [r4, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    10aa:	2300      	movs	r3, #0
    10ac:	70e3      	strb	r3, [r4, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	config_pinmux.mux_position = SYSTEM_PINMUX_GPIO;
	config_pinmux.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    10ae:	3301      	adds	r3, #1
    10b0:	7063      	strb	r3, [r4, #1]
	config_pinmux.input_pull = SYSTEM_PINMUX_PIN_PULL_DOWN;
    10b2:	2702      	movs	r7, #2
    10b4:	70a7      	strb	r7, [r4, #2]
	//
	// Enable
	system_pinmux_pin_set_config(SP1ML_EN_PIN, &config_pinmux);
    10b6:	201b      	movs	r0, #27
    10b8:	1c21      	adds	r1, r4, #0
    10ba:	4e33      	ldr	r6, [pc, #204]	; (1188 <configure_SP1ML+0xe8>)
    10bc:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10be:	4d33      	ldr	r5, [pc, #204]	; (118c <configure_SP1ML+0xec>)
    10c0:	2380      	movs	r3, #128	; 0x80
    10c2:	051b      	lsls	r3, r3, #20
    10c4:	616b      	str	r3, [r5, #20]
	port_pin_set_output_level(SP1ML_EN_PIN, false);
	
	// Mode 0
	system_pinmux_pin_set_config(SP1ML_MODE_PIN, &config_pinmux);
    10c6:	2001      	movs	r0, #1
    10c8:	1c21      	adds	r1, r4, #0
    10ca:	47b0      	blx	r6
    10cc:	616f      	str	r7, [r5, #20]
	port_pin_set_output_level(SP1ML_MODE_PIN, false);

	// SHDN
	system_pinmux_pin_set_config(SP1ML_SHDN_PIN, &config_pinmux);
    10ce:	2002      	movs	r0, #2
    10d0:	1c21      	adds	r1, r4, #0
    10d2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10d4:	2304      	movs	r3, #4
    10d6:	61ab      	str	r3, [r5, #24]
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	// reset
	system_pinmux_pin_set_config(SP1ML_RESET_PIN, &config_pinmux);
    10d8:	2003      	movs	r0, #3
    10da:	1c21      	adds	r1, r4, #0
    10dc:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    10de:	2308      	movs	r3, #8
    10e0:	616b      	str	r3, [r5, #20]
    10e2:	4b2b      	ldr	r3, [pc, #172]	; (1190 <configure_SP1ML+0xf0>)
    10e4:	3b01      	subs	r3, #1
	port_pin_set_output_level(SP1ML_RESET_PIN, false);
	
	for(int i = 0; i < 65535; i++);
    10e6:	2b00      	cmp	r3, #0
    10e8:	d1fc      	bne.n	10e4 <configure_SP1ML+0x44>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10ea:	2208      	movs	r2, #8
    10ec:	4b27      	ldr	r3, [pc, #156]	; (118c <configure_SP1ML+0xec>)
    10ee:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    10f0:	4b28      	ldr	r3, [pc, #160]	; (1194 <configure_SP1ML+0xf4>)
    10f2:	2280      	movs	r2, #128	; 0x80
    10f4:	05d2      	lsls	r2, r2, #23
    10f6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    10f8:	2200      	movs	r2, #0
    10fa:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    10fc:	21ff      	movs	r1, #255	; 0xff
    10fe:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1100:	2100      	movs	r1, #0
    1102:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1104:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1106:	2001      	movs	r0, #1
    1108:	2424      	movs	r4, #36	; 0x24
    110a:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    110c:	3401      	adds	r4, #1
    110e:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    1110:	3025      	adds	r0, #37	; 0x25
    1112:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    1114:	3001      	adds	r0, #1
    1116:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    1118:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    111a:	3005      	adds	r0, #5
    111c:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    111e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1120:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1122:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1124:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1126:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1128:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    112a:	2213      	movs	r2, #19
    112c:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    112e:	7759      	strb	r1, [r3, #29]
	
	port_pin_set_output_level(SP1ML_RESET_PIN, true);

	usart_get_config_defaults(&config_usart);
	config_usart.generator_source = GCLK_GENERATOR_2;
    1130:	2102      	movs	r1, #2
    1132:	321a      	adds	r2, #26
    1134:	5499      	strb	r1, [r3, r2]
	config_usart.run_in_standby = false;
	config_usart.baudrate = 115200;
    1136:	22e1      	movs	r2, #225	; 0xe1
    1138:	0252      	lsls	r2, r2, #9
    113a:	621a      	str	r2, [r3, #32]
	config_usart.parity = USART_PARITY_NONE;
	config_usart.stopbits = USART_STOPBITS_1;
	config_usart.data_order = USART_DATAORDER_LSB;
	config_usart.character_size = USART_CHARACTER_SIZE_8BIT;
	// RXPO PAD03 TXPO PAD02
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    113c:	22c4      	movs	r2, #196	; 0xc4
    113e:	0392      	lsls	r2, r2, #14
    1140:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1142:	2201      	movs	r2, #1
    1144:	4252      	negs	r2, r2
    1146:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    1148:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PA06D_SERCOM0_PAD2;
    114a:	4a13      	ldr	r2, [pc, #76]	; (1198 <configure_SP1ML+0xf8>)
    114c:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PA07D_SERCOM0_PAD3;
    114e:	4a13      	ldr	r2, [pc, #76]	; (119c <configure_SP1ML+0xfc>)
    1150:	63da      	str	r2, [r3, #60]	; 0x3c
	//REG_SERCOM0_USART_DBGCTRL |= 0x01;
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    1152:	4d13      	ldr	r5, [pc, #76]	; (11a0 <configure_SP1ML+0x100>)
    1154:	1c1c      	adds	r4, r3, #0
    1156:	4e13      	ldr	r6, [pc, #76]	; (11a4 <configure_SP1ML+0x104>)
    1158:	1c28      	adds	r0, r5, #0
    115a:	2184      	movs	r1, #132	; 0x84
    115c:	05c9      	lsls	r1, r1, #23
    115e:	1c22      	adds	r2, r4, #0
    1160:	47b0      	blx	r6
    1162:	4b11      	ldr	r3, [pc, #68]	; (11a8 <configure_SP1ML+0x108>)
    1164:	7018      	strb	r0, [r3, #0]
    1166:	2800      	cmp	r0, #0
    1168:	d1f6      	bne.n	1158 <configure_SP1ML+0xb8>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    116a:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <configure_SP1ML+0x100>)
    116c:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    116e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1170:	2b00      	cmp	r3, #0
    1172:	d1fc      	bne.n	116e <configure_SP1ML+0xce>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1174:	6811      	ldr	r1, [r2, #0]
    1176:	3302      	adds	r3, #2
    1178:	430b      	orrs	r3, r1
    117a:	6013      	str	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    117c:	2204      	movs	r2, #4
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <configure_SP1ML+0xec>)
    1180:	615a      	str	r2, [r3, #20]
	usart_enable(&usart_instance);
	// Set the shutdown pin low so we save power (even though the module is off)
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
}
    1182:	b003      	add	sp, #12
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00001c71 	.word	0x00001c71
    118c:	40002800 	.word	0x40002800
    1190:	0000ffff 	.word	0x0000ffff
    1194:	20000224 	.word	0x20000224
    1198:	00060003 	.word	0x00060003
    119c:	00070003 	.word	0x00070003
    11a0:	20000218 	.word	0x20000218
    11a4:	00000ba5 	.word	0x00000ba5
    11a8:	20000264 	.word	0x20000264

000011ac <SP1ML_enter_cmd_mode>:
		for(int i = 0; i < 10000; i++);
	}
}

void SP1ML_enter_cmd_mode(void)
{
    11ac:	b508      	push	{r3, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    11ae:	2204      	movs	r2, #4
    11b0:	4b04      	ldr	r3, [pc, #16]	; (11c4 <SP1ML_enter_cmd_mode+0x18>)
    11b2:	619a      	str	r2, [r3, #24]
	// We don't fiddle with the enable or shutdown after mode switch, we assume that is done in the calling functions
	
	// Wake up the radio
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	status = usart_write_buffer_wait(&usart_instance, "+++", 3);
    11b4:	4804      	ldr	r0, [pc, #16]	; (11c8 <SP1ML_enter_cmd_mode+0x1c>)
    11b6:	4905      	ldr	r1, [pc, #20]	; (11cc <SP1ML_enter_cmd_mode+0x20>)
    11b8:	3a01      	subs	r2, #1
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <SP1ML_enter_cmd_mode+0x24>)
    11bc:	4798      	blx	r3
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <SP1ML_enter_cmd_mode+0x28>)
    11c0:	7018      	strb	r0, [r3, #0]
	
	
}
    11c2:	bd08      	pop	{r3, pc}
    11c4:	40002800 	.word	0x40002800
    11c8:	20000218 	.word	0x20000218
    11cc:	00002858 	.word	0x00002858
    11d0:	00000f4d 	.word	0x00000f4d
    11d4:	20000264 	.word	0x20000264

000011d8 <SP1ML_set_baud>:
	port_pin_set_output_level(SP1ML_SHDN_PIN, false);
	
}

uint8_t SP1ML_set_baud(uint32_t rate)
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11da:	b08f      	sub	sp, #60	; 0x3c
	
	// Check for valid rates
	if(rate < 9600 || rate > 921600) return 0;
    11dc:	4b3d      	ldr	r3, [pc, #244]	; (12d4 <SP1ML_set_baud+0xfc>)
    11de:	18c1      	adds	r1, r0, r3
    11e0:	2300      	movs	r3, #0
    11e2:	4a3d      	ldr	r2, [pc, #244]	; (12d8 <SP1ML_set_baud+0x100>)
    11e4:	4291      	cmp	r1, r2
    11e6:	d871      	bhi.n	12cc <SP1ML_set_baud+0xf4>
    11e8:	9001      	str	r0, [sp, #4]
	uint8_t recv_buff[24];
	uint8_t ucRateStr[13];
	uint8_t ucRadioBaudQuery[7] = {0x41, 0x54, 0x53, 0x30, 0x30, 0x3F, 0x0D};
    11ea:	a802      	add	r0, sp, #8
    11ec:	493b      	ldr	r1, [pc, #236]	; (12dc <SP1ML_set_baud+0x104>)
    11ee:	2207      	movs	r2, #7
    11f0:	4b3b      	ldr	r3, [pc, #236]	; (12e0 <SP1ML_set_baud+0x108>)
    11f2:	4798      	blx	r3
    11f4:	2280      	movs	r2, #128	; 0x80
    11f6:	0512      	lsls	r2, r2, #20
    11f8:	4b3a      	ldr	r3, [pc, #232]	; (12e4 <SP1ML_set_baud+0x10c>)
    11fa:	619a      	str	r2, [r3, #24]
    11fc:	4b3a      	ldr	r3, [pc, #232]	; (12e8 <SP1ML_set_baud+0x110>)
    11fe:	3b01      	subs	r3, #1
	
	// Turn the radio on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	for(int i = 0; i < 65535; i++);
    1200:	2b00      	cmp	r3, #0
    1202:	d1fc      	bne.n	11fe <SP1ML_set_baud+0x26>
    1204:	ad08      	add	r5, sp, #32
    1206:	ae0e      	add	r6, sp, #56	; 0x38
    1208:	1c2b      	adds	r3, r5, #0
	for(int i = 0; i < 24; i++)
	{
		recv_buff[i] = 0;
    120a:	2200      	movs	r2, #0
    120c:	701a      	strb	r2, [r3, #0]
    120e:	3301      	adds	r3, #1
	
	// Turn the radio on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	for(int i = 0; i < 65535; i++);
	for(int i = 0; i < 24; i++)
    1210:	42b3      	cmp	r3, r6
    1212:	d1fb      	bne.n	120c <SP1ML_set_baud+0x34>
	{
		recv_buff[i] = 0;
	}
	
	// 	Put the SP1ML into command mode -- handles waking up
	SP1ML_enter_cmd_mode();
    1214:	4b35      	ldr	r3, [pc, #212]	; (12ec <SP1ML_set_baud+0x114>)
    1216:	4798      	blx	r3
	
	status = usart_write_buffer_wait(&usart_instance, "AT/V\r", 5);
    1218:	4f35      	ldr	r7, [pc, #212]	; (12f0 <SP1ML_set_baud+0x118>)
    121a:	1c38      	adds	r0, r7, #0
    121c:	4935      	ldr	r1, [pc, #212]	; (12f4 <SP1ML_set_baud+0x11c>)
    121e:	2205      	movs	r2, #5
    1220:	4b35      	ldr	r3, [pc, #212]	; (12f8 <SP1ML_set_baud+0x120>)
    1222:	4798      	blx	r3
    1224:	4c35      	ldr	r4, [pc, #212]	; (12fc <SP1ML_set_baud+0x124>)
    1226:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    1228:	1c38      	adds	r0, r7, #0
    122a:	a908      	add	r1, sp, #32
    122c:	2218      	movs	r2, #24
    122e:	4b34      	ldr	r3, [pc, #208]	; (1300 <SP1ML_set_baud+0x128>)
    1230:	4798      	blx	r3
    1232:	7020      	strb	r0, [r4, #0]
	
	sprintf(ucRateStr, "ATS00=%+06d\r", rate);
    1234:	a804      	add	r0, sp, #16
    1236:	4933      	ldr	r1, [pc, #204]	; (1304 <SP1ML_set_baud+0x12c>)
    1238:	9a01      	ldr	r2, [sp, #4]
    123a:	4b33      	ldr	r3, [pc, #204]	; (1308 <SP1ML_set_baud+0x130>)
    123c:	4798      	blx	r3
    123e:	4b2a      	ldr	r3, [pc, #168]	; (12e8 <SP1ML_set_baud+0x110>)
    1240:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1242:	2b00      	cmp	r3, #0
    1244:	d1fc      	bne.n	1240 <SP1ML_set_baud+0x68>
	
	status = usart_write_buffer_wait(&usart_instance, ucRateStr, 13);
    1246:	482a      	ldr	r0, [pc, #168]	; (12f0 <SP1ML_set_baud+0x118>)
    1248:	a904      	add	r1, sp, #16
    124a:	220d      	movs	r2, #13
    124c:	4b2a      	ldr	r3, [pc, #168]	; (12f8 <SP1ML_set_baud+0x120>)
    124e:	4798      	blx	r3
    1250:	4b2a      	ldr	r3, [pc, #168]	; (12fc <SP1ML_set_baud+0x124>)
    1252:	7018      	strb	r0, [r3, #0]
    1254:	4b24      	ldr	r3, [pc, #144]	; (12e8 <SP1ML_set_baud+0x110>)
    1256:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1258:	2b00      	cmp	r3, #0
    125a:	d1fc      	bne.n	1256 <SP1ML_set_baud+0x7e>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    125c:	4b24      	ldr	r3, [pc, #144]	; (12f0 <SP1ML_set_baud+0x118>)
    125e:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1260:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1262:	2b00      	cmp	r3, #0
    1264:	d1fc      	bne.n	1260 <SP1ML_set_baud+0x88>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1266:	6813      	ldr	r3, [r2, #0]
    1268:	2102      	movs	r1, #2
    126a:	438b      	bics	r3, r1
    126c:	6013      	str	r3, [r2, #0]
    126e:	4b1e      	ldr	r3, [pc, #120]	; (12e8 <SP1ML_set_baud+0x110>)
    1270:	3b01      	subs	r3, #1
	usart_disable(&usart_instance);
	for(int i = 0; i < 65535; i++);
    1272:	2b00      	cmp	r3, #0
    1274:	d1fc      	bne.n	1270 <SP1ML_set_baud+0x98>
	config_usart.baudrate = rate;
    1276:	4b25      	ldr	r3, [pc, #148]	; (130c <SP1ML_set_baud+0x134>)
    1278:	9a01      	ldr	r2, [sp, #4]
    127a:	621a      	str	r2, [r3, #32]
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
    127c:	4f1c      	ldr	r7, [pc, #112]	; (12f0 <SP1ML_set_baud+0x118>)
    127e:	4c24      	ldr	r4, [pc, #144]	; (1310 <SP1ML_set_baud+0x138>)
    1280:	1c38      	adds	r0, r7, #0
    1282:	2184      	movs	r1, #132	; 0x84
    1284:	05c9      	lsls	r1, r1, #23
    1286:	4a21      	ldr	r2, [pc, #132]	; (130c <SP1ML_set_baud+0x134>)
    1288:	47a0      	blx	r4
    128a:	4b1c      	ldr	r3, [pc, #112]	; (12fc <SP1ML_set_baud+0x124>)
    128c:	7018      	strb	r0, [r3, #0]
    128e:	2800      	cmp	r0, #0
    1290:	d1f6      	bne.n	1280 <SP1ML_set_baud+0xa8>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1292:	4b17      	ldr	r3, [pc, #92]	; (12f0 <SP1ML_set_baud+0x118>)
    1294:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1296:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1298:	2b00      	cmp	r3, #0
    129a:	d1fc      	bne.n	1296 <SP1ML_set_baud+0xbe>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    129c:	6811      	ldr	r1, [r2, #0]
    129e:	3302      	adds	r3, #2
    12a0:	430b      	orrs	r3, r1
    12a2:	6013      	str	r3, [r2, #0]
	usart_enable(&usart_instance);
	for(int i = 0; i < sizeof(recv_buff)/sizeof(recv_buff[0]); i++){
		recv_buff[i] = 0;
    12a4:	2300      	movs	r3, #0
    12a6:	702b      	strb	r3, [r5, #0]
    12a8:	3501      	adds	r5, #1
	usart_disable(&usart_instance);
	for(int i = 0; i < 65535; i++);
	config_usart.baudrate = rate;
	while ((status = usart_init(&usart_instance, SERCOM0, &config_usart)) != STATUS_OK);
	usart_enable(&usart_instance);
	for(int i = 0; i < sizeof(recv_buff)/sizeof(recv_buff[0]); i++){
    12aa:	42b5      	cmp	r5, r6
    12ac:	d1fb      	bne.n	12a6 <SP1ML_set_baud+0xce>
		recv_buff[i] = 0;
	}
	
	status = usart_write_buffer_wait(&usart_instance, ucRadioBaudQuery, 7);
    12ae:	4d10      	ldr	r5, [pc, #64]	; (12f0 <SP1ML_set_baud+0x118>)
    12b0:	1c28      	adds	r0, r5, #0
    12b2:	a902      	add	r1, sp, #8
    12b4:	2207      	movs	r2, #7
    12b6:	4b10      	ldr	r3, [pc, #64]	; (12f8 <SP1ML_set_baud+0x120>)
    12b8:	4798      	blx	r3
    12ba:	4c10      	ldr	r4, [pc, #64]	; (12fc <SP1ML_set_baud+0x124>)
    12bc:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    12be:	1c28      	adds	r0, r5, #0
    12c0:	a908      	add	r1, sp, #32
    12c2:	2218      	movs	r2, #24
    12c4:	4b0e      	ldr	r3, [pc, #56]	; (1300 <SP1ML_set_baud+0x128>)
    12c6:	4798      	blx	r3
    12c8:	7020      	strb	r0, [r4, #0]
	
	// Don't shut down or disable, because we will lose the new setting.
	
	return 1;
    12ca:	2301      	movs	r3, #1
}
    12cc:	1c18      	adds	r0, r3, #0
    12ce:	b00f      	add	sp, #60	; 0x3c
    12d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	ffffda80 	.word	0xffffda80
    12d8:	000dea80 	.word	0x000dea80
    12dc:	00002840 	.word	0x00002840
    12e0:	00002005 	.word	0x00002005
    12e4:	40002800 	.word	0x40002800
    12e8:	0000ffff 	.word	0x0000ffff
    12ec:	000011ad 	.word	0x000011ad
    12f0:	20000218 	.word	0x20000218
    12f4:	0000285c 	.word	0x0000285c
    12f8:	00000f4d 	.word	0x00000f4d
    12fc:	20000264 	.word	0x20000264
    1300:	00001001 	.word	0x00001001
    1304:	00002864 	.word	0x00002864
    1308:	00002019 	.word	0x00002019
    130c:	20000224 	.word	0x20000224
    1310:	00000ba5 	.word	0x00000ba5

00001314 <SP1ML_set_output_power>:

uint8_t SP1ML_set_output_power(int8_t power)
{
    1314:	b530      	push	{r4, r5, lr}
    1316:	b08d      	sub	sp, #52	; 0x34
    1318:	1c04      	adds	r4, r0, #0
	uint8_t recv_buff[24];
	uint8_t ucPwrStr[10];
	uint8_t ucTransmitPowerQuery[7] = {0x41, 0x54, 0x53, 0x30, 0x34, 0x3F, 0x0D};
    131a:	a801      	add	r0, sp, #4
    131c:	491f      	ldr	r1, [pc, #124]	; (139c <SP1ML_set_output_power+0x88>)
    131e:	3108      	adds	r1, #8
    1320:	2207      	movs	r2, #7
    1322:	4b1f      	ldr	r3, [pc, #124]	; (13a0 <SP1ML_set_output_power+0x8c>)
    1324:	4798      	blx	r3
    1326:	2280      	movs	r2, #128	; 0x80
    1328:	0512      	lsls	r2, r2, #20
    132a:	4b1e      	ldr	r3, [pc, #120]	; (13a4 <SP1ML_set_output_power+0x90>)
    132c:	619a      	str	r2, [r3, #24]
		
	// Make sure its turned on
	port_pin_set_output_level(SP1ML_EN_PIN, true);
	
	// Also handles waking up and correct mode.
	SP1ML_set_baud(9600);
    132e:	2096      	movs	r0, #150	; 0x96
    1330:	0180      	lsls	r0, r0, #6
    1332:	4b1d      	ldr	r3, [pc, #116]	; (13a8 <SP1ML_set_output_power+0x94>)
    1334:	4798      	blx	r3
    1336:	4b1d      	ldr	r3, [pc, #116]	; (13ac <SP1ML_set_output_power+0x98>)
    1338:	3b01      	subs	r3, #1
	for(int i = 0; i < 65535; i++);
    133a:	2b00      	cmp	r3, #0
    133c:	d1fc      	bne.n	1338 <SP1ML_set_output_power+0x24>
    133e:	ab06      	add	r3, sp, #24
    1340:	a90c      	add	r1, sp, #48	; 0x30
	
	for(int i = 0; i < 24; i++){
		recv_buff[i] = 0;
    1342:	2200      	movs	r2, #0
    1344:	701a      	strb	r2, [r3, #0]
    1346:	3301      	adds	r3, #1
	
	// Also handles waking up and correct mode.
	SP1ML_set_baud(9600);
	for(int i = 0; i < 65535; i++);
	
	for(int i = 0; i < 24; i++){
    1348:	428b      	cmp	r3, r1
    134a:	d1fb      	bne.n	1344 <SP1ML_set_output_power+0x30>
		recv_buff[i] = 0;
	}
	
	sprintf(ucPwrStr, "ATS04=%+03d\r", power);
    134c:	a803      	add	r0, sp, #12
    134e:	4918      	ldr	r1, [pc, #96]	; (13b0 <SP1ML_set_output_power+0x9c>)
    1350:	1c22      	adds	r2, r4, #0
    1352:	4b18      	ldr	r3, [pc, #96]	; (13b4 <SP1ML_set_output_power+0xa0>)
    1354:	4798      	blx	r3
	
	status = usart_write_buffer_wait(&usart_instance, ucPwrStr, 10);
    1356:	4d18      	ldr	r5, [pc, #96]	; (13b8 <SP1ML_set_output_power+0xa4>)
    1358:	1c28      	adds	r0, r5, #0
    135a:	a903      	add	r1, sp, #12
    135c:	220a      	movs	r2, #10
    135e:	4b17      	ldr	r3, [pc, #92]	; (13bc <SP1ML_set_output_power+0xa8>)
    1360:	4798      	blx	r3
    1362:	4c17      	ldr	r4, [pc, #92]	; (13c0 <SP1ML_set_output_power+0xac>)
    1364:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    1366:	1c28      	adds	r0, r5, #0
    1368:	a906      	add	r1, sp, #24
    136a:	2218      	movs	r2, #24
    136c:	4b15      	ldr	r3, [pc, #84]	; (13c4 <SP1ML_set_output_power+0xb0>)
    136e:	4798      	blx	r3
    1370:	7020      	strb	r0, [r4, #0]
    1372:	4b0e      	ldr	r3, [pc, #56]	; (13ac <SP1ML_set_output_power+0x98>)
    1374:	3b01      	subs	r3, #1
	
	for(int i = 0; i < 65535; i++);
    1376:	2b00      	cmp	r3, #0
    1378:	d1fc      	bne.n	1374 <SP1ML_set_output_power+0x60>
	
	status = usart_write_buffer_wait(&usart_instance, ucTransmitPowerQuery, 7);
    137a:	4d0f      	ldr	r5, [pc, #60]	; (13b8 <SP1ML_set_output_power+0xa4>)
    137c:	1c28      	adds	r0, r5, #0
    137e:	a901      	add	r1, sp, #4
    1380:	2207      	movs	r2, #7
    1382:	4b0e      	ldr	r3, [pc, #56]	; (13bc <SP1ML_set_output_power+0xa8>)
    1384:	4798      	blx	r3
    1386:	4c0e      	ldr	r4, [pc, #56]	; (13c0 <SP1ML_set_output_power+0xac>)
    1388:	7020      	strb	r0, [r4, #0]
	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    138a:	1c28      	adds	r0, r5, #0
    138c:	a906      	add	r1, sp, #24
    138e:	2218      	movs	r2, #24
    1390:	4b0c      	ldr	r3, [pc, #48]	; (13c4 <SP1ML_set_output_power+0xb0>)
    1392:	4798      	blx	r3
    1394:	7020      	strb	r0, [r4, #0]
	
	// Don't shut down or disable, because we will lose the new setting.
	
	return 1;
}
    1396:	2001      	movs	r0, #1
    1398:	b00d      	add	sp, #52	; 0x34
    139a:	bd30      	pop	{r4, r5, pc}
    139c:	00002840 	.word	0x00002840
    13a0:	00002005 	.word	0x00002005
    13a4:	40002800 	.word	0x40002800
    13a8:	000011d9 	.word	0x000011d9
    13ac:	0000ffff 	.word	0x0000ffff
    13b0:	00002874 	.word	0x00002874
    13b4:	00002019 	.word	0x00002019
    13b8:	20000218 	.word	0x20000218
    13bc:	00000f4d 	.word	0x00000f4d
    13c0:	20000264 	.word	0x20000264
    13c4:	00001001 	.word	0x00001001

000013c8 <SP1ML_enter_op_mode>:
	
	
}

void SP1ML_enter_op_mode(void)
{
    13c8:	b508      	push	{r3, lr}
    13ca:	2204      	movs	r2, #4
    13cc:	4b04      	ldr	r3, [pc, #16]	; (13e0 <SP1ML_enter_op_mode+0x18>)
    13ce:	619a      	str	r2, [r3, #24]
	// We don't fiddle with the enable or shutdown after mode switch, we assume that is done in the calling functions
	
	// Wake up the radio
	port_pin_set_output_level(SP1ML_SHDN_PIN, true);
	
	status = usart_write_buffer_wait(&usart_instance, "ATO\r", 4);
    13d0:	4804      	ldr	r0, [pc, #16]	; (13e4 <SP1ML_enter_op_mode+0x1c>)
    13d2:	4905      	ldr	r1, [pc, #20]	; (13e8 <SP1ML_enter_op_mode+0x20>)
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <SP1ML_enter_op_mode+0x24>)
    13d6:	4798      	blx	r3
    13d8:	4b05      	ldr	r3, [pc, #20]	; (13f0 <SP1ML_enter_op_mode+0x28>)
    13da:	7018      	strb	r0, [r3, #0]
	
	
}
    13dc:	bd08      	pop	{r3, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	40002800 	.word	0x40002800
    13e4:	20000218 	.word	0x20000218
    13e8:	00002884 	.word	0x00002884
    13ec:	00000f4d 	.word	0x00000f4d
    13f0:	20000264 	.word	0x20000264

000013f4 <SP1ML_receive_byte>:

void SP1ML_receive_byte(void)
{
    13f4:	b530      	push	{r4, r5, lr}
    13f6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t ucModCMD[8] = {0x41, 0x54, 0x53, 0x30, 0x33, 0x3D, 0x34, 0x0D};
    13f8:	a808      	add	r0, sp, #32
    13fa:	4919      	ldr	r1, [pc, #100]	; (1460 <SP1ML_receive_byte+0x6c>)
    13fc:	3110      	adds	r1, #16
    13fe:	2208      	movs	r2, #8
    1400:	4b18      	ldr	r3, [pc, #96]	; (1464 <SP1ML_receive_byte+0x70>)
    1402:	4798      	blx	r3
	uint8_t ucTemperature;
	uint8_t recv_buff[24];
	SP1ML_set_output_power(7);
    1404:	2007      	movs	r0, #7
    1406:	4b18      	ldr	r3, [pc, #96]	; (1468 <SP1ML_receive_byte+0x74>)
    1408:	4798      	blx	r3
    140a:	4b18      	ldr	r3, [pc, #96]	; (146c <SP1ML_receive_byte+0x78>)
    140c:	3b01      	subs	r3, #1
	for(int i = 0; i < 65535; i++);
    140e:	2b00      	cmp	r3, #0
    1410:	d1fc      	bne.n	140c <SP1ML_receive_byte+0x18>
    1412:	ab01      	add	r3, sp, #4
    1414:	a907      	add	r1, sp, #28
	
	for(int i = 0; i < 24; i++){
		recv_buff[i] = 0;
    1416:	2200      	movs	r2, #0
    1418:	701a      	strb	r2, [r3, #0]
    141a:	3301      	adds	r3, #1
	uint8_t ucTemperature;
	uint8_t recv_buff[24];
	SP1ML_set_output_power(7);
	for(int i = 0; i < 65535; i++);
	
	for(int i = 0; i < 24; i++){
    141c:	428b      	cmp	r3, r1
    141e:	d1fb      	bne.n	1418 <SP1ML_receive_byte+0x24>
		recv_buff[i] = 0;
	}
	
	// Enter OOK MOD mode
 	status = usart_write_buffer_wait(&usart_instance, ucModCMD, 8);
    1420:	4d13      	ldr	r5, [pc, #76]	; (1470 <SP1ML_receive_byte+0x7c>)
    1422:	1c28      	adds	r0, r5, #0
    1424:	a908      	add	r1, sp, #32
    1426:	2208      	movs	r2, #8
    1428:	4b12      	ldr	r3, [pc, #72]	; (1474 <SP1ML_receive_byte+0x80>)
    142a:	4798      	blx	r3
    142c:	4c12      	ldr	r4, [pc, #72]	; (1478 <SP1ML_receive_byte+0x84>)
    142e:	7020      	strb	r0, [r4, #0]
 	status = usart_read_buffer_wait(&usart_instance, recv_buff, 24);
    1430:	1c28      	adds	r0, r5, #0
    1432:	a901      	add	r1, sp, #4
    1434:	2218      	movs	r2, #24
    1436:	4b11      	ldr	r3, [pc, #68]	; (147c <SP1ML_receive_byte+0x88>)
    1438:	4798      	blx	r3
    143a:	7020      	strb	r0, [r4, #0]
	
	SP1ML_enter_op_mode();
    143c:	4b10      	ldr	r3, [pc, #64]	; (1480 <SP1ML_receive_byte+0x8c>)
    143e:	4798      	blx	r3
	while (true)
	{
		if(usart_read_buffer_wait(&usart_instance, &ucTemperature, 24) == STATUS_OK){
    1440:	4d0b      	ldr	r5, [pc, #44]	; (1470 <SP1ML_receive_byte+0x7c>)
    1442:	4c0e      	ldr	r4, [pc, #56]	; (147c <SP1ML_receive_byte+0x88>)
    1444:	1c28      	adds	r0, r5, #0
    1446:	231f      	movs	r3, #31
    1448:	446b      	add	r3, sp
    144a:	1c19      	adds	r1, r3, #0
    144c:	2218      	movs	r2, #24
    144e:	47a0      	blx	r4
    1450:	2800      	cmp	r0, #0
    1452:	d1f7      	bne.n	1444 <SP1ML_receive_byte+0x50>
    1454:	2364      	movs	r3, #100	; 0x64
    1456:	3b01      	subs	r3, #1
			for(int i = 0; i < 100; i++);
    1458:	2b00      	cmp	r3, #0
    145a:	d1fc      	bne.n	1456 <SP1ML_receive_byte+0x62>
    145c:	e7f2      	b.n	1444 <SP1ML_receive_byte+0x50>
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00002840 	.word	0x00002840
    1464:	00002005 	.word	0x00002005
    1468:	00001315 	.word	0x00001315
    146c:	0000ffff 	.word	0x0000ffff
    1470:	20000218 	.word	0x20000218
    1474:	00000f4d 	.word	0x00000f4d
    1478:	20000264 	.word	0x20000264
    147c:	00001001 	.word	0x00001001
    1480:	000013c9 	.word	0x000013c9

00001484 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1484:	4770      	bx	lr
    1486:	46c0      	nop			; (mov r8, r8)

00001488 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1488:	4b0c      	ldr	r3, [pc, #48]	; (14bc <cpu_irq_enter_critical+0x34>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	2b00      	cmp	r3, #0
    148e:	d110      	bne.n	14b2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1490:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1494:	2b00      	cmp	r3, #0
    1496:	d109      	bne.n	14ac <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1498:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    149a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    149e:	2200      	movs	r2, #0
    14a0:	4b07      	ldr	r3, [pc, #28]	; (14c0 <cpu_irq_enter_critical+0x38>)
    14a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    14a4:	3201      	adds	r2, #1
    14a6:	4b07      	ldr	r3, [pc, #28]	; (14c4 <cpu_irq_enter_critical+0x3c>)
    14a8:	701a      	strb	r2, [r3, #0]
    14aa:	e002      	b.n	14b2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    14ac:	2200      	movs	r2, #0
    14ae:	4b05      	ldr	r3, [pc, #20]	; (14c4 <cpu_irq_enter_critical+0x3c>)
    14b0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    14b2:	4a02      	ldr	r2, [pc, #8]	; (14bc <cpu_irq_enter_critical+0x34>)
    14b4:	6813      	ldr	r3, [r2, #0]
    14b6:	3301      	adds	r3, #1
    14b8:	6013      	str	r3, [r2, #0]
}
    14ba:	4770      	bx	lr
    14bc:	200000a4 	.word	0x200000a4
    14c0:	20000000 	.word	0x20000000
    14c4:	200000a8 	.word	0x200000a8

000014c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    14c8:	4b08      	ldr	r3, [pc, #32]	; (14ec <cpu_irq_leave_critical+0x24>)
    14ca:	681a      	ldr	r2, [r3, #0]
    14cc:	3a01      	subs	r2, #1
    14ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d109      	bne.n	14ea <cpu_irq_leave_critical+0x22>
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <cpu_irq_leave_critical+0x28>)
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	2b00      	cmp	r3, #0
    14dc:	d005      	beq.n	14ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    14de:	2201      	movs	r2, #1
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <cpu_irq_leave_critical+0x2c>)
    14e2:	701a      	strb	r2, [r3, #0]
    14e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    14e8:	b662      	cpsie	i
	}
}
    14ea:	4770      	bx	lr
    14ec:	200000a4 	.word	0x200000a4
    14f0:	200000a8 	.word	0x200000a8
    14f4:	20000000 	.word	0x20000000

000014f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    14f8:	b508      	push	{r3, lr}
	switch (clock_source) {
    14fa:	2808      	cmp	r0, #8
    14fc:	d803      	bhi.n	1506 <system_clock_source_get_hz+0xe>
    14fe:	0080      	lsls	r0, r0, #2
    1500:	4b1c      	ldr	r3, [pc, #112]	; (1574 <system_clock_source_get_hz+0x7c>)
    1502:	581b      	ldr	r3, [r3, r0]
    1504:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1506:	2000      	movs	r0, #0
    1508:	e032      	b.n	1570 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    150a:	4b1b      	ldr	r3, [pc, #108]	; (1578 <system_clock_source_get_hz+0x80>)
    150c:	6918      	ldr	r0, [r3, #16]
    150e:	e02f      	b.n	1570 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1510:	4b1a      	ldr	r3, [pc, #104]	; (157c <system_clock_source_get_hz+0x84>)
    1512:	7d18      	ldrb	r0, [r3, #20]
    1514:	0700      	lsls	r0, r0, #28
    1516:	0f80      	lsrs	r0, r0, #30
    1518:	3001      	adds	r0, #1
    151a:	4b19      	ldr	r3, [pc, #100]	; (1580 <system_clock_source_get_hz+0x88>)
    151c:	4358      	muls	r0, r3
    151e:	e027      	b.n	1570 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1520:	4b15      	ldr	r3, [pc, #84]	; (1578 <system_clock_source_get_hz+0x80>)
    1522:	6958      	ldr	r0, [r3, #20]
    1524:	e024      	b.n	1570 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1526:	4b14      	ldr	r3, [pc, #80]	; (1578 <system_clock_source_get_hz+0x80>)
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	2002      	movs	r0, #2
    152c:	4018      	ands	r0, r3
    152e:	d01f      	beq.n	1570 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1530:	4912      	ldr	r1, [pc, #72]	; (157c <system_clock_source_get_hz+0x84>)
    1532:	2280      	movs	r2, #128	; 0x80
    1534:	0052      	lsls	r2, r2, #1
    1536:	68cb      	ldr	r3, [r1, #12]
    1538:	4213      	tst	r3, r2
    153a:	d0fc      	beq.n	1536 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    153c:	4b0e      	ldr	r3, [pc, #56]	; (1578 <system_clock_source_get_hz+0x80>)
    153e:	681b      	ldr	r3, [r3, #0]
    1540:	075b      	lsls	r3, r3, #29
    1542:	d514      	bpl.n	156e <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1544:	2000      	movs	r0, #0
    1546:	4b0f      	ldr	r3, [pc, #60]	; (1584 <system_clock_source_get_hz+0x8c>)
    1548:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    154a:	4b0b      	ldr	r3, [pc, #44]	; (1578 <system_clock_source_get_hz+0x80>)
    154c:	689b      	ldr	r3, [r3, #8]
    154e:	041b      	lsls	r3, r3, #16
    1550:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1552:	4358      	muls	r0, r3
    1554:	e00c      	b.n	1570 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1556:	2328      	movs	r3, #40	; 0x28
    1558:	4a08      	ldr	r2, [pc, #32]	; (157c <system_clock_source_get_hz+0x84>)
    155a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    155c:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    155e:	079b      	lsls	r3, r3, #30
    1560:	d506      	bpl.n	1570 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1562:	4b05      	ldr	r3, [pc, #20]	; (1578 <system_clock_source_get_hz+0x80>)
    1564:	68d8      	ldr	r0, [r3, #12]
    1566:	e003      	b.n	1570 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1568:	2080      	movs	r0, #128	; 0x80
    156a:	0200      	lsls	r0, r0, #8
    156c:	e000      	b.n	1570 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    156e:	4806      	ldr	r0, [pc, #24]	; (1588 <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1570:	bd08      	pop	{r3, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	0000288c 	.word	0x0000288c
    1578:	200000ac 	.word	0x200000ac
    157c:	40000c00 	.word	0x40000c00
    1580:	003d0900 	.word	0x003d0900
    1584:	00001b99 	.word	0x00001b99
    1588:	02dc6c00 	.word	0x02dc6c00

0000158c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    158c:	b5f0      	push	{r4, r5, r6, r7, lr}
    158e:	465f      	mov	r7, fp
    1590:	4656      	mov	r6, sl
    1592:	464d      	mov	r5, r9
    1594:	4644      	mov	r4, r8
    1596:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1598:	4e25      	ldr	r6, [pc, #148]	; (1630 <system_clock_source_xosc32k_set_config+0xa4>)
    159a:	6973      	ldr	r3, [r6, #20]
    159c:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    159e:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    15a0:	7803      	ldrb	r3, [r0, #0]
    15a2:	425a      	negs	r2, r3
    15a4:	415a      	adcs	r2, r3
    15a6:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    15a8:	7883      	ldrb	r3, [r0, #2]
    15aa:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    15ac:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    15ae:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    15b0:	7a02      	ldrb	r2, [r0, #8]
    15b2:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    15b4:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    15b6:	6842      	ldr	r2, [r0, #4]
    15b8:	481e      	ldr	r0, [pc, #120]	; (1634 <system_clock_source_xosc32k_set_config+0xa8>)
    15ba:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    15bc:	2001      	movs	r0, #1
    15be:	4642      	mov	r2, r8
    15c0:	0092      	lsls	r2, r2, #2
    15c2:	4690      	mov	r8, r2
    15c4:	2204      	movs	r2, #4
    15c6:	4691      	mov	r9, r2
    15c8:	4662      	mov	r2, ip
    15ca:	4649      	mov	r1, r9
    15cc:	438a      	bics	r2, r1
    15ce:	4694      	mov	ip, r2
    15d0:	4642      	mov	r2, r8
    15d2:	4661      	mov	r1, ip
    15d4:	430a      	orrs	r2, r1
    15d6:	4694      	mov	ip, r2
    15d8:	4003      	ands	r3, r0
    15da:	00db      	lsls	r3, r3, #3
    15dc:	2208      	movs	r2, #8
    15de:	4690      	mov	r8, r2
    15e0:	4662      	mov	r2, ip
    15e2:	4641      	mov	r1, r8
    15e4:	438a      	bics	r2, r1
    15e6:	4313      	orrs	r3, r2
    15e8:	4651      	mov	r1, sl
    15ea:	4001      	ands	r1, r0
    15ec:	0109      	lsls	r1, r1, #4
    15ee:	2210      	movs	r2, #16
    15f0:	4393      	bics	r3, r2
    15f2:	430b      	orrs	r3, r1
    15f4:	465a      	mov	r2, fp
    15f6:	4002      	ands	r2, r0
    15f8:	0192      	lsls	r2, r2, #6
    15fa:	2140      	movs	r1, #64	; 0x40
    15fc:	438b      	bics	r3, r1
    15fe:	4313      	orrs	r3, r2
    1600:	4007      	ands	r7, r0
    1602:	01ff      	lsls	r7, r7, #7
    1604:	2280      	movs	r2, #128	; 0x80
    1606:	4393      	bics	r3, r2
    1608:	433b      	orrs	r3, r7
    160a:	3a79      	subs	r2, #121	; 0x79
    160c:	4015      	ands	r5, r2
    160e:	022d      	lsls	r5, r5, #8
    1610:	4f09      	ldr	r7, [pc, #36]	; (1638 <system_clock_source_xosc32k_set_config+0xac>)
    1612:	403b      	ands	r3, r7
    1614:	432b      	orrs	r3, r5
    1616:	4004      	ands	r4, r0
    1618:	0320      	lsls	r0, r4, #12
    161a:	4c08      	ldr	r4, [pc, #32]	; (163c <system_clock_source_xosc32k_set_config+0xb0>)
    161c:	401c      	ands	r4, r3
    161e:	4304      	orrs	r4, r0
    1620:	6174      	str	r4, [r6, #20]
}
    1622:	bc3c      	pop	{r2, r3, r4, r5}
    1624:	4690      	mov	r8, r2
    1626:	4699      	mov	r9, r3
    1628:	46a2      	mov	sl, r4
    162a:	46ab      	mov	fp, r5
    162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	40001000 	.word	0x40001000
    1634:	200000ac 	.word	0x200000ac
    1638:	fffff8ff 	.word	0xfffff8ff
    163c:	ffffefff 	.word	0xffffefff

00001640 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1640:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1642:	7a83      	ldrb	r3, [r0, #10]
    1644:	069b      	lsls	r3, r3, #26
    1646:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    1648:	8983      	ldrh	r3, [r0, #12]
    164a:	059b      	lsls	r3, r3, #22
    164c:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    164e:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1650:	4c1a      	ldr	r4, [pc, #104]	; (16bc <system_clock_source_dfll_set_config+0x7c>)
    1652:	6063      	str	r3, [r4, #4]
    1654:	88c1      	ldrh	r1, [r0, #6]
    1656:	8883      	ldrh	r3, [r0, #4]
    1658:	4319      	orrs	r1, r3
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    165a:	7a43      	ldrb	r3, [r0, #9]
    165c:	7a02      	ldrb	r2, [r0, #8]
    165e:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1660:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    1662:	7842      	ldrb	r2, [r0, #1]
    1664:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1666:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    1668:	7882      	ldrb	r2, [r0, #2]
    166a:	0192      	lsls	r2, r2, #6
	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    166c:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    166e:	6023      	str	r3, [r4, #0]
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1670:	7803      	ldrb	r3, [r0, #0]
    1672:	2b04      	cmp	r3, #4
    1674:	d10f      	bne.n	1696 <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1676:	7b83      	ldrb	r3, [r0, #14]
    1678:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    167a:	8a42      	ldrh	r2, [r0, #18]
    167c:	4313      	orrs	r3, r2
    167e:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1680:	8a03      	ldrh	r3, [r0, #16]
    1682:	041b      	lsls	r3, r3, #16
    1684:	4a0e      	ldr	r2, [pc, #56]	; (16c0 <system_clock_source_dfll_set_config+0x80>)
    1686:	4013      	ands	r3, r2
    1688:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    168a:	60a3      	str	r3, [r4, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    168c:	6821      	ldr	r1, [r4, #0]
    168e:	2304      	movs	r3, #4
    1690:	430b      	orrs	r3, r1
    1692:	6023      	str	r3, [r4, #0]
    1694:	e011      	b.n	16ba <system_clock_source_dfll_set_config+0x7a>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1696:	2b20      	cmp	r3, #32
    1698:	d10f      	bne.n	16ba <system_clock_source_dfll_set_config+0x7a>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    169a:	7b83      	ldrb	r3, [r0, #14]
    169c:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    169e:	8a42      	ldrh	r2, [r0, #18]
    16a0:	4313      	orrs	r3, r2
    16a2:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    16a4:	8a03      	ldrh	r3, [r0, #16]
    16a6:	041b      	lsls	r3, r3, #16
    16a8:	4a05      	ldr	r2, [pc, #20]	; (16c0 <system_clock_source_dfll_set_config+0x80>)
    16aa:	4013      	ands	r3, r2
    16ac:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    16ae:	4a03      	ldr	r2, [pc, #12]	; (16bc <system_clock_source_dfll_set_config+0x7c>)
    16b0:	6093      	str	r3, [r2, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    16b2:	6813      	ldr	r3, [r2, #0]
    16b4:	4903      	ldr	r1, [pc, #12]	; (16c4 <system_clock_source_dfll_set_config+0x84>)
    16b6:	430b      	orrs	r3, r1
    16b8:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    16ba:	bd10      	pop	{r4, pc}
    16bc:	200000ac 	.word	0x200000ac
    16c0:	03ff0000 	.word	0x03ff0000
    16c4:	00000424 	.word	0x00000424

000016c8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    16c8:	2808      	cmp	r0, #8
    16ca:	d803      	bhi.n	16d4 <system_clock_source_enable+0xc>
    16cc:	0080      	lsls	r0, r0, #2
    16ce:	4b29      	ldr	r3, [pc, #164]	; (1774 <system_clock_source_enable+0xac>)
    16d0:	581b      	ldr	r3, [r3, r0]
    16d2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16d4:	2017      	movs	r0, #23
    16d6:	e04b      	b.n	1770 <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    16d8:	4a27      	ldr	r2, [pc, #156]	; (1778 <system_clock_source_enable+0xb0>)
    16da:	7d11      	ldrb	r1, [r2, #20]
    16dc:	2302      	movs	r3, #2
    16de:	430b      	orrs	r3, r1
    16e0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    16e2:	2000      	movs	r0, #0
    16e4:	e044      	b.n	1770 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    16e6:	4a25      	ldr	r2, [pc, #148]	; (177c <system_clock_source_enable+0xb4>)
    16e8:	6991      	ldr	r1, [r2, #24]
    16ea:	2302      	movs	r3, #2
    16ec:	430b      	orrs	r3, r1
    16ee:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16f0:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    16f2:	e03d      	b.n	1770 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    16f4:	4a20      	ldr	r2, [pc, #128]	; (1778 <system_clock_source_enable+0xb0>)
    16f6:	8a11      	ldrh	r1, [r2, #16]
    16f8:	2302      	movs	r3, #2
    16fa:	430b      	orrs	r3, r1
    16fc:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16fe:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    1700:	e036      	b.n	1770 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    1702:	4a1e      	ldr	r2, [pc, #120]	; (177c <system_clock_source_enable+0xb4>)
    1704:	6951      	ldr	r1, [r2, #20]
    1706:	2302      	movs	r3, #2
    1708:	430b      	orrs	r3, r1
    170a:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    170c:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    170e:	e02f      	b.n	1770 <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    1710:	491b      	ldr	r1, [pc, #108]	; (1780 <system_clock_source_enable+0xb8>)
    1712:	680b      	ldr	r3, [r1, #0]
    1714:	2202      	movs	r2, #2
    1716:	4313      	orrs	r3, r2
    1718:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    171a:	4b17      	ldr	r3, [pc, #92]	; (1778 <system_clock_source_enable+0xb0>)
    171c:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    171e:	1c19      	adds	r1, r3, #0
    1720:	32fe      	adds	r2, #254	; 0xfe
    1722:	68cb      	ldr	r3, [r1, #12]
    1724:	4213      	tst	r3, r2
    1726:	d0fc      	beq.n	1722 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1728:	4a15      	ldr	r2, [pc, #84]	; (1780 <system_clock_source_enable+0xb8>)
    172a:	6891      	ldr	r1, [r2, #8]
    172c:	4b12      	ldr	r3, [pc, #72]	; (1778 <system_clock_source_enable+0xb0>)
    172e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1730:	6852      	ldr	r2, [r2, #4]
    1732:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    1734:	2200      	movs	r2, #0
    1736:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1738:	1c19      	adds	r1, r3, #0
    173a:	3201      	adds	r2, #1
    173c:	32ff      	adds	r2, #255	; 0xff
    173e:	68cb      	ldr	r3, [r1, #12]
    1740:	4213      	tst	r3, r2
    1742:	d0fc      	beq.n	173e <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1744:	4b0e      	ldr	r3, [pc, #56]	; (1780 <system_clock_source_enable+0xb8>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	b29b      	uxth	r3, r3
    174a:	4a0b      	ldr	r2, [pc, #44]	; (1778 <system_clock_source_enable+0xb0>)
    174c:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    174e:	2000      	movs	r0, #0
    1750:	e00e      	b.n	1770 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    1752:	4909      	ldr	r1, [pc, #36]	; (1778 <system_clock_source_enable+0xb0>)
    1754:	2228      	movs	r2, #40	; 0x28
    1756:	5c88      	ldrb	r0, [r1, r2]
    1758:	2302      	movs	r3, #2
    175a:	4303      	orrs	r3, r0
    175c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    175e:	1c08      	adds	r0, r1, #0
    1760:	2138      	movs	r1, #56	; 0x38
    1762:	3a26      	subs	r2, #38	; 0x26
    1764:	5c43      	ldrb	r3, [r0, r1]
    1766:	4213      	tst	r3, r2
    1768:	d1fc      	bne.n	1764 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    176a:	2000      	movs	r0, #0
    176c:	e000      	b.n	1770 <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    176e:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1770:	4770      	bx	lr
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	000028b0 	.word	0x000028b0
    1778:	40000c00 	.word	0x40000c00
    177c:	40001000 	.word	0x40001000
    1780:	200000ac 	.word	0x200000ac

00001784 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1784:	b5f0      	push	{r4, r5, r6, r7, lr}
    1786:	464f      	mov	r7, r9
    1788:	4646      	mov	r6, r8
    178a:	b4c0      	push	{r6, r7}
    178c:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    178e:	2280      	movs	r2, #128	; 0x80
    1790:	0052      	lsls	r2, r2, #1
    1792:	4b6f      	ldr	r3, [pc, #444]	; (1950 <system_clock_init+0x1cc>)
    1794:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1796:	3afd      	subs	r2, #253	; 0xfd
    1798:	4b6e      	ldr	r3, [pc, #440]	; (1954 <system_clock_init+0x1d0>)
    179a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    179c:	496e      	ldr	r1, [pc, #440]	; (1958 <system_clock_init+0x1d4>)
    179e:	684b      	ldr	r3, [r1, #4]
    17a0:	321b      	adds	r2, #27
    17a2:	4393      	bics	r3, r2
    17a4:	3a1c      	subs	r2, #28
    17a6:	4313      	orrs	r3, r2
    17a8:	604b      	str	r3, [r1, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    17aa:	2380      	movs	r3, #128	; 0x80
    17ac:	05db      	lsls	r3, r3, #23
    17ae:	789b      	ldrb	r3, [r3, #2]
    17b0:	2b02      	cmp	r3, #2
    17b2:	d009      	beq.n	17c8 <system_clock_init+0x44>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    17b4:	2380      	movs	r3, #128	; 0x80
    17b6:	05db      	lsls	r3, r3, #23
    17b8:	3a01      	subs	r2, #1
    17ba:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    17bc:	3201      	adds	r2, #1
    17be:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    17c0:	1c1a      	adds	r2, r3, #0
    17c2:	7993      	ldrb	r3, [r2, #6]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d0fc      	beq.n	17c2 <system_clock_init+0x3e>
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    17c8:	a809      	add	r0, sp, #36	; 0x24
    17ca:	2380      	movs	r3, #128	; 0x80
    17cc:	021b      	lsls	r3, r3, #8
    17ce:	6043      	str	r3, [r0, #4]
	config->enable_1khz_output  = false;
	config->enable_32khz_output = true;
    17d0:	2301      	movs	r3, #1
    17d2:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    17d4:	2200      	movs	r2, #0
    17d6:	7282      	strb	r2, [r0, #10]
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    17d8:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    17da:	2104      	movs	r1, #4
    17dc:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    17de:	7083      	strb	r3, [r0, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    17e0:	7242      	strb	r2, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    17e2:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    17e4:	4b5d      	ldr	r3, [pc, #372]	; (195c <system_clock_init+0x1d8>)
    17e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    17e8:	2005      	movs	r0, #5
    17ea:	4b5d      	ldr	r3, [pc, #372]	; (1960 <system_clock_init+0x1dc>)
    17ec:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    17ee:	495d      	ldr	r1, [pc, #372]	; (1964 <system_clock_init+0x1e0>)
    17f0:	2201      	movs	r2, #1
    17f2:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    17f4:	421a      	tst	r2, r3
    17f6:	d0fc      	beq.n	17f2 <system_clock_init+0x6e>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		OSC32KCTRL->XOSC32K.bit.ONDEMAND = 1;
    17f8:	4a5a      	ldr	r2, [pc, #360]	; (1964 <system_clock_init+0x1e0>)
    17fa:	6951      	ldr	r1, [r2, #20]
    17fc:	2380      	movs	r3, #128	; 0x80
    17fe:	430b      	orrs	r3, r1
    1800:	6153      	str	r3, [r2, #20]
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1802:	4b53      	ldr	r3, [pc, #332]	; (1950 <system_clock_init+0x1cc>)
    1804:	7d1a      	ldrb	r2, [r3, #20]
    1806:	2180      	movs	r1, #128	; 0x80
    1808:	4249      	negs	r1, r1
    180a:	430a      	orrs	r2, r1
    180c:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    180e:	7d19      	ldrb	r1, [r3, #20]
    1810:	2240      	movs	r2, #64	; 0x40
    1812:	430a      	orrs	r2, r1
    1814:	751a      	strb	r2, [r3, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1816:	ab04      	add	r3, sp, #16
    1818:	2100      	movs	r1, #0
    181a:	2200      	movs	r2, #0
    181c:	8099      	strh	r1, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    181e:	80d9      	strh	r1, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1820:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1822:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
	config->run_in_stanby   = false;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1824:	313f      	adds	r1, #63	; 0x3f
    1826:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1828:	393b      	subs	r1, #59	; 0x3b
    182a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    182c:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    182e:	2201      	movs	r2, #1
    1830:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    1832:	4b4d      	ldr	r3, [pc, #308]	; (1968 <system_clock_init+0x1e4>)
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    1838:	2b3f      	cmp	r3, #63	; 0x3f
    183a:	d100      	bne.n	183e <system_clock_init+0xba>
		coarse = 0x1f;
    183c:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    183e:	a804      	add	r0, sp, #16
    1840:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1842:	23b7      	movs	r3, #183	; 0xb7
    1844:	00db      	lsls	r3, r3, #3
    1846:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1848:	2303      	movs	r3, #3
    184a:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    184c:	331c      	adds	r3, #28
    184e:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1850:	4b46      	ldr	r3, [pc, #280]	; (196c <system_clock_init+0x1e8>)
    1852:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1854:	4b46      	ldr	r3, [pc, #280]	; (1970 <system_clock_init+0x1ec>)
    1856:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1858:	ac01      	add	r4, sp, #4
    185a:	2601      	movs	r6, #1
    185c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    185e:	2500      	movs	r5, #0
    1860:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1862:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1864:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1866:	2305      	movs	r3, #5
    1868:	7023      	strb	r3, [r4, #0]
    186a:	2001      	movs	r0, #1
    186c:	1c21      	adds	r1, r4, #0
    186e:	4b41      	ldr	r3, [pc, #260]	; (1974 <system_clock_init+0x1f0>)
    1870:	4698      	mov	r8, r3
    1872:	4798      	blx	r3
    1874:	2001      	movs	r0, #1
    1876:	4f40      	ldr	r7, [pc, #256]	; (1978 <system_clock_init+0x1f4>)
    1878:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    187a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    187c:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    187e:	2306      	movs	r3, #6
    1880:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1882:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1884:	7265      	strb	r5, [r4, #9]
    1886:	2002      	movs	r0, #2
    1888:	1c21      	adds	r1, r4, #0
    188a:	47c0      	blx	r8
    188c:	2002      	movs	r0, #2
    188e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1890:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1892:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1894:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1896:	7265      	strb	r5, [r4, #9]
    1898:	2307      	movs	r3, #7
    189a:	4699      	mov	r9, r3
    189c:	7023      	strb	r3, [r4, #0]
    189e:	2003      	movs	r0, #3
    18a0:	1c21      	adds	r1, r4, #0
    18a2:	47c0      	blx	r8
    18a4:	2003      	movs	r0, #3
    18a6:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    18a8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    18aa:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    18ac:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    18ae:	7265      	strb	r5, [r4, #9]
    18b0:	464b      	mov	r3, r9
    18b2:	7023      	strb	r3, [r4, #0]
    18b4:	2004      	movs	r0, #4
    18b6:	1c21      	adds	r1, r4, #0
    18b8:	47c0      	blx	r8
    18ba:	2004      	movs	r0, #4
    18bc:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    18be:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    18c0:	2000      	movs	r0, #0
    18c2:	1c21      	adds	r1, r4, #0
    18c4:	4b2d      	ldr	r3, [pc, #180]	; (197c <system_clock_init+0x1f8>)
    18c6:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    18c8:	2000      	movs	r0, #0
    18ca:	4b2d      	ldr	r3, [pc, #180]	; (1980 <system_clock_init+0x1fc>)
    18cc:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    18ce:	2007      	movs	r0, #7
    18d0:	4b23      	ldr	r3, [pc, #140]	; (1960 <system_clock_init+0x1dc>)
    18d2:	4798      	blx	r3
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    18d4:	491e      	ldr	r1, [pc, #120]	; (1950 <system_clock_init+0x1cc>)
    18d6:	22d0      	movs	r2, #208	; 0xd0
    18d8:	0112      	lsls	r2, r2, #4
    18da:	68cb      	ldr	r3, [r1, #12]
    18dc:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    18de:	4293      	cmp	r3, r2
    18e0:	d1fb      	bne.n	18da <system_clock_init+0x156>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		OSCCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    18e2:	4a1b      	ldr	r2, [pc, #108]	; (1950 <system_clock_init+0x1cc>)
    18e4:	8b11      	ldrh	r1, [r2, #24]
    18e6:	2380      	movs	r3, #128	; 0x80
    18e8:	430b      	orrs	r3, r1
    18ea:	8313      	strh	r3, [r2, #24]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_CPUDIV_CPUDIV_Msk) == divider);
	MCLK->CPUDIV.reg = (uint32_t)divider;
    18ec:	4c25      	ldr	r4, [pc, #148]	; (1984 <system_clock_init+0x200>)
    18ee:	2300      	movs	r3, #0
    18f0:	7123      	strb	r3, [r4, #4]
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_LPDIV_LPDIV_Msk) == divider);
	MCLK->LPDIV.reg = (uint32_t)divider;
    18f2:	7163      	strb	r3, [r4, #5]
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_BUPDIV_BUPDIV_Msk) == divider);
	MCLK->BUPDIV.reg = (uint32_t)divider;
    18f4:	2201      	movs	r2, #1
    18f6:	71a2      	strb	r2, [r4, #6]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    18f8:	a901      	add	r1, sp, #4
    18fa:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    18fc:	2006      	movs	r0, #6
    18fe:	7008      	strb	r0, [r1, #0]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1900:	724b      	strb	r3, [r1, #9]
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1902:	3304      	adds	r3, #4
    1904:	604b      	str	r3, [r1, #4]
    1906:	720a      	strb	r2, [r1, #8]
    1908:	2000      	movs	r0, #0
    190a:	4b1a      	ldr	r3, [pc, #104]	; (1974 <system_clock_init+0x1f0>)
    190c:	4798      	blx	r3
    190e:	2000      	movs	r0, #0
    1910:	4b19      	ldr	r3, [pc, #100]	; (1978 <system_clock_init+0x1f4>)
    1912:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
    1914:	2000      	movs	r0, #0
    1916:	4b1c      	ldr	r3, [pc, #112]	; (1988 <system_clock_init+0x204>)
    1918:	4798      	blx	r3
    191a:	7923      	ldrb	r3, [r4, #4]
    191c:	3b01      	subs	r3, #1
    191e:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    1920:	4b1a      	ldr	r3, [pc, #104]	; (198c <system_clock_init+0x208>)
    1922:	4298      	cmp	r0, r3
    1924:	d80e      	bhi.n	1944 <system_clock_init+0x1c0>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1926:	2380      	movs	r3, #128	; 0x80
    1928:	05db      	lsls	r3, r3, #23
    192a:	789b      	ldrb	r3, [r3, #2]
    192c:	2b00      	cmp	r3, #0
    192e:	d009      	beq.n	1944 <system_clock_init+0x1c0>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1930:	2380      	movs	r3, #128	; 0x80
    1932:	05db      	lsls	r3, r3, #23
    1934:	2201      	movs	r2, #1
    1936:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    1938:	2200      	movs	r2, #0
    193a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    193c:	1c1a      	adds	r2, r3, #0
    193e:	7993      	ldrb	r3, [r2, #6]
    1940:	2b00      	cmp	r3, #0
    1942:	d0fc      	beq.n	193e <system_clock_init+0x1ba>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    1944:	b00d      	add	sp, #52	; 0x34
    1946:	bc0c      	pop	{r2, r3}
    1948:	4690      	mov	r8, r2
    194a:	4699      	mov	r9, r3
    194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	40000c00 	.word	0x40000c00
    1954:	40001400 	.word	0x40001400
    1958:	41004000 	.word	0x41004000
    195c:	0000158d 	.word	0x0000158d
    1960:	000016c9 	.word	0x000016c9
    1964:	40001000 	.word	0x40001000
    1968:	00806020 	.word	0x00806020
    196c:	00001641 	.word	0x00001641
    1970:	00001991 	.word	0x00001991
    1974:	000019b5 	.word	0x000019b5
    1978:	00001a61 	.word	0x00001a61
    197c:	00001b75 	.word	0x00001b75
    1980:	00001b0d 	.word	0x00001b0d
    1984:	40000400 	.word	0x40000400
    1988:	00001aa1 	.word	0x00001aa1
    198c:	00b71b00 	.word	0x00b71b00

00001990 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    1990:	4a06      	ldr	r2, [pc, #24]	; (19ac <system_gclk_init+0x1c>)
    1992:	6951      	ldr	r1, [r2, #20]
    1994:	2340      	movs	r3, #64	; 0x40
    1996:	430b      	orrs	r3, r1
    1998:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    199a:	2201      	movs	r2, #1
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <system_gclk_init+0x20>)
    199e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    19a0:	1c19      	adds	r1, r3, #0
    19a2:	780b      	ldrb	r3, [r1, #0]
    19a4:	4213      	tst	r3, r2
    19a6:	d1fc      	bne.n	19a2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    19a8:	4770      	bx	lr
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	40000400 	.word	0x40000400
    19b0:	40001800 	.word	0x40001800

000019b4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    19b8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    19ba:	784b      	ldrb	r3, [r1, #1]
    19bc:	2b00      	cmp	r3, #0
    19be:	d002      	beq.n	19c6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	00db      	lsls	r3, r3, #3
    19c4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    19c6:	7a4b      	ldrb	r3, [r1, #9]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d002      	beq.n	19d2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    19cc:	2380      	movs	r3, #128	; 0x80
    19ce:	011b      	lsls	r3, r3, #4
    19d0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    19d2:	684a      	ldr	r2, [r1, #4]
    19d4:	2a01      	cmp	r2, #1
    19d6:	d917      	bls.n	1a08 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    19d8:	1e53      	subs	r3, r2, #1
    19da:	421a      	tst	r2, r3
    19dc:	d10f      	bne.n	19fe <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19de:	2a02      	cmp	r2, #2
    19e0:	d906      	bls.n	19f0 <system_gclk_gen_set_config+0x3c>
    19e2:	2302      	movs	r3, #2
    19e4:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    19e6:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    19e8:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19ea:	429a      	cmp	r2, r3
    19ec:	d8fb      	bhi.n	19e6 <system_gclk_gen_set_config+0x32>
    19ee:	e000      	b.n	19f2 <system_gclk_gen_set_config+0x3e>
    19f0:	2000      	movs	r0, #0
    19f2:	2380      	movs	r3, #128	; 0x80
    19f4:	015b      	lsls	r3, r3, #5
    19f6:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    19f8:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    19fa:	4305      	orrs	r5, r0
    19fc:	e004      	b.n	1a08 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    19fe:	0412      	lsls	r2, r2, #16
    1a00:	2380      	movs	r3, #128	; 0x80
    1a02:	009b      	lsls	r3, r3, #2
    1a04:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a06:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a08:	7a0b      	ldrb	r3, [r1, #8]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d002      	beq.n	1a14 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a0e:	2380      	movs	r3, #128	; 0x80
    1a10:	019b      	lsls	r3, r3, #6
    1a12:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1a14:	2604      	movs	r6, #4
    1a16:	40a6      	lsls	r6, r4
    1a18:	490d      	ldr	r1, [pc, #52]	; (1a50 <system_gclk_gen_set_config+0x9c>)
    1a1a:	4a0e      	ldr	r2, [pc, #56]	; (1a54 <system_gclk_gen_set_config+0xa0>)
    1a1c:	684b      	ldr	r3, [r1, #4]
    1a1e:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    1a20:	421e      	tst	r6, r3
    1a22:	d1fb      	bne.n	1a1c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a24:	4b0c      	ldr	r3, [pc, #48]	; (1a58 <system_gclk_gen_set_config+0xa4>)
    1a26:	4798      	blx	r3
    1a28:	00a4      	lsls	r4, r4, #2
    1a2a:	4b09      	ldr	r3, [pc, #36]	; (1a50 <system_gclk_gen_set_config+0x9c>)
    1a2c:	469c      	mov	ip, r3
    1a2e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    1a30:	6a20      	ldr	r0, [r4, #32]
    1a32:	2380      	movs	r3, #128	; 0x80
    1a34:	005b      	lsls	r3, r3, #1
    1a36:	4018      	ands	r0, r3
    1a38:	4328      	orrs	r0, r5
    1a3a:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1a3c:	4661      	mov	r1, ip
    1a3e:	4a05      	ldr	r2, [pc, #20]	; (1a54 <system_gclk_gen_set_config+0xa0>)
    1a40:	684b      	ldr	r3, [r1, #4]
    1a42:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    1a44:	421e      	tst	r6, r3
    1a46:	d1fb      	bne.n	1a40 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a48:	4b04      	ldr	r3, [pc, #16]	; (1a5c <system_gclk_gen_set_config+0xa8>)
    1a4a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1a4c:	bd70      	pop	{r4, r5, r6, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	40001800 	.word	0x40001800
    1a54:	000007fc 	.word	0x000007fc
    1a58:	00001489 	.word	0x00001489
    1a5c:	000014c9 	.word	0x000014c9

00001a60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a60:	b510      	push	{r4, lr}
    1a62:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1a64:	2204      	movs	r2, #4
    1a66:	4082      	lsls	r2, r0
    1a68:	4809      	ldr	r0, [pc, #36]	; (1a90 <system_gclk_gen_enable+0x30>)
    1a6a:	490a      	ldr	r1, [pc, #40]	; (1a94 <system_gclk_gen_enable+0x34>)
    1a6c:	6843      	ldr	r3, [r0, #4]
    1a6e:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1a70:	421a      	tst	r2, r3
    1a72:	d1fb      	bne.n	1a6c <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a74:	4b08      	ldr	r3, [pc, #32]	; (1a98 <system_gclk_gen_enable+0x38>)
    1a76:	4798      	blx	r3
    1a78:	00a4      	lsls	r4, r4, #2
    1a7a:	4b05      	ldr	r3, [pc, #20]	; (1a90 <system_gclk_gen_enable+0x30>)
    1a7c:	469c      	mov	ip, r3
    1a7e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1a80:	6a23      	ldr	r3, [r4, #32]
    1a82:	2280      	movs	r2, #128	; 0x80
    1a84:	0052      	lsls	r2, r2, #1
    1a86:	4313      	orrs	r3, r2
    1a88:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <system_gclk_gen_enable+0x3c>)
    1a8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	40001800 	.word	0x40001800
    1a94:	000007fc 	.word	0x000007fc
    1a98:	00001489 	.word	0x00001489
    1a9c:	000014c9 	.word	0x000014c9

00001aa0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aa2:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1aa4:	2204      	movs	r2, #4
    1aa6:	4082      	lsls	r2, r0
    1aa8:	4812      	ldr	r0, [pc, #72]	; (1af4 <system_gclk_gen_get_hz+0x54>)
    1aaa:	4913      	ldr	r1, [pc, #76]	; (1af8 <system_gclk_gen_get_hz+0x58>)
    1aac:	6843      	ldr	r3, [r0, #4]
    1aae:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    1ab0:	421a      	tst	r2, r3
    1ab2:	d1fb      	bne.n	1aac <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ab4:	4b11      	ldr	r3, [pc, #68]	; (1afc <system_gclk_gen_get_hz+0x5c>)
    1ab6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1ab8:	4f0e      	ldr	r7, [pc, #56]	; (1af4 <system_gclk_gen_get_hz+0x54>)
    1aba:	3408      	adds	r4, #8
    1abc:	00a4      	lsls	r4, r4, #2
    1abe:	59e3      	ldr	r3, [r4, r7]
    1ac0:	200f      	movs	r0, #15
    1ac2:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1ac4:	4b0e      	ldr	r3, [pc, #56]	; (1b00 <system_gclk_gen_get_hz+0x60>)
    1ac6:	4798      	blx	r3
    1ac8:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1aca:	59e5      	ldr	r5, [r4, r7]
    1acc:	04ed      	lsls	r5, r5, #19
    1ace:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1ad0:	59e4      	ldr	r4, [r4, r7]
    1ad2:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ad4:	4b0b      	ldr	r3, [pc, #44]	; (1b04 <system_gclk_gen_get_hz+0x64>)
    1ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1ad8:	2d00      	cmp	r5, #0
    1ada:	d107      	bne.n	1aec <system_gclk_gen_get_hz+0x4c>
    1adc:	2c01      	cmp	r4, #1
    1ade:	d907      	bls.n	1af0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1ae0:	1c30      	adds	r0, r6, #0
    1ae2:	1c21      	adds	r1, r4, #0
    1ae4:	4b08      	ldr	r3, [pc, #32]	; (1b08 <system_gclk_gen_get_hz+0x68>)
    1ae6:	4798      	blx	r3
    1ae8:	1c06      	adds	r6, r0, #0
    1aea:	e001      	b.n	1af0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1aec:	3401      	adds	r4, #1
    1aee:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1af0:	1c30      	adds	r0, r6, #0
    1af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1af4:	40001800 	.word	0x40001800
    1af8:	000007fc 	.word	0x000007fc
    1afc:	00001489 	.word	0x00001489
    1b00:	000014f9 	.word	0x000014f9
    1b04:	000014c9 	.word	0x000014c9
    1b08:	00001e01 	.word	0x00001e01

00001b0c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b0c:	b510      	push	{r4, lr}
    1b0e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b10:	4b08      	ldr	r3, [pc, #32]	; (1b34 <system_gclk_chan_enable+0x28>)
    1b12:	4798      	blx	r3
    1b14:	00a4      	lsls	r4, r4, #2
    1b16:	4b08      	ldr	r3, [pc, #32]	; (1b38 <system_gclk_chan_enable+0x2c>)
    1b18:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1b1a:	2280      	movs	r2, #128	; 0x80
    1b1c:	5881      	ldr	r1, [r0, r2]
    1b1e:	2340      	movs	r3, #64	; 0x40
    1b20:	430b      	orrs	r3, r1
    1b22:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    1b24:	2180      	movs	r1, #128	; 0x80
    1b26:	3a40      	subs	r2, #64	; 0x40
    1b28:	5843      	ldr	r3, [r0, r1]
    1b2a:	421a      	tst	r2, r3
    1b2c:	d0fc      	beq.n	1b28 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b2e:	4b03      	ldr	r3, [pc, #12]	; (1b3c <system_gclk_chan_enable+0x30>)
    1b30:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1b32:	bd10      	pop	{r4, pc}
    1b34:	00001489 	.word	0x00001489
    1b38:	40001800 	.word	0x40001800
    1b3c:	000014c9 	.word	0x000014c9

00001b40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1b40:	b510      	push	{r4, lr}
    1b42:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b44:	4b08      	ldr	r3, [pc, #32]	; (1b68 <system_gclk_chan_disable+0x28>)
    1b46:	4798      	blx	r3
    1b48:	00a4      	lsls	r4, r4, #2
    1b4a:	4b08      	ldr	r3, [pc, #32]	; (1b6c <system_gclk_chan_disable+0x2c>)
    1b4c:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	5883      	ldr	r3, [r0, r2]
    1b52:	2140      	movs	r1, #64	; 0x40
    1b54:	438b      	bics	r3, r1
    1b56:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    1b58:	3140      	adds	r1, #64	; 0x40
    1b5a:	3a40      	subs	r2, #64	; 0x40
    1b5c:	5843      	ldr	r3, [r0, r1]
    1b5e:	421a      	tst	r2, r3
    1b60:	d1fc      	bne.n	1b5c <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1b62:	4b03      	ldr	r3, [pc, #12]	; (1b70 <system_gclk_chan_disable+0x30>)
    1b64:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1b66:	bd10      	pop	{r4, pc}
    1b68:	00001489 	.word	0x00001489
    1b6c:	40001800 	.word	0x40001800
    1b70:	000014c9 	.word	0x000014c9

00001b74 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1b74:	b538      	push	{r3, r4, r5, lr}
    1b76:	1c04      	adds	r4, r0, #0
    1b78:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <system_gclk_chan_set_config+0x1c>)
    1b7c:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1b7e:	782b      	ldrb	r3, [r5, #0]
    1b80:	220f      	movs	r2, #15
    1b82:	4013      	ands	r3, r2
    1b84:	3420      	adds	r4, #32
    1b86:	00a4      	lsls	r4, r4, #2
    1b88:	4a02      	ldr	r2, [pc, #8]	; (1b94 <system_gclk_chan_set_config+0x20>)
    1b8a:	50a3      	str	r3, [r4, r2]


}
    1b8c:	bd38      	pop	{r3, r4, r5, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00001b41 	.word	0x00001b41
    1b94:	40001800 	.word	0x40001800

00001b98 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1b98:	b510      	push	{r4, lr}
    1b9a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1b9c:	4b06      	ldr	r3, [pc, #24]	; (1bb8 <system_gclk_chan_get_hz+0x20>)
    1b9e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1ba0:	3420      	adds	r4, #32
    1ba2:	00a4      	lsls	r4, r4, #2
    1ba4:	4b05      	ldr	r3, [pc, #20]	; (1bbc <system_gclk_chan_get_hz+0x24>)
    1ba6:	58e3      	ldr	r3, [r4, r3]
    1ba8:	240f      	movs	r4, #15
    1baa:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1bac:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <system_gclk_chan_get_hz+0x28>)
    1bae:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1bb0:	1c20      	adds	r0, r4, #0
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <system_gclk_chan_get_hz+0x2c>)
    1bb4:	4798      	blx	r3
}
    1bb6:	bd10      	pop	{r4, pc}
    1bb8:	00001489 	.word	0x00001489
    1bbc:	40001800 	.word	0x40001800
    1bc0:	000014c9 	.word	0x000014c9
    1bc4:	00001aa1 	.word	0x00001aa1

00001bc8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1bc8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1bca:	78d3      	ldrb	r3, [r2, #3]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d11e      	bne.n	1c0e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1bd0:	7814      	ldrb	r4, [r2, #0]
    1bd2:	2c80      	cmp	r4, #128	; 0x80
    1bd4:	d004      	beq.n	1be0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1bd6:	0624      	lsls	r4, r4, #24
    1bd8:	2380      	movs	r3, #128	; 0x80
    1bda:	025b      	lsls	r3, r3, #9
    1bdc:	431c      	orrs	r4, r3
    1bde:	e000      	b.n	1be2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1be0:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1be2:	7853      	ldrb	r3, [r2, #1]
    1be4:	2502      	movs	r5, #2
    1be6:	43ab      	bics	r3, r5
    1be8:	d10a      	bne.n	1c00 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1bea:	7893      	ldrb	r3, [r2, #2]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d103      	bne.n	1bf8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	029b      	lsls	r3, r3, #10
    1bf4:	431c      	orrs	r4, r3
    1bf6:	e002      	b.n	1bfe <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1bf8:	23c0      	movs	r3, #192	; 0xc0
    1bfa:	02db      	lsls	r3, r3, #11
    1bfc:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1bfe:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c00:	7853      	ldrb	r3, [r2, #1]
    1c02:	3b01      	subs	r3, #1
    1c04:	2b01      	cmp	r3, #1
    1c06:	d812      	bhi.n	1c2e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1c08:	4b18      	ldr	r3, [pc, #96]	; (1c6c <_system_pinmux_config+0xa4>)
    1c0a:	401c      	ands	r4, r3
    1c0c:	e00f      	b.n	1c2e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1c0e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c10:	040b      	lsls	r3, r1, #16
    1c12:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c14:	24a0      	movs	r4, #160	; 0xa0
    1c16:	05e4      	lsls	r4, r4, #23
    1c18:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c1a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c1c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c1e:	24d0      	movs	r4, #208	; 0xd0
    1c20:	0624      	lsls	r4, r4, #24
    1c22:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c24:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c26:	78d3      	ldrb	r3, [r2, #3]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d018      	beq.n	1c5e <_system_pinmux_config+0x96>
    1c2c:	e01c      	b.n	1c68 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c2e:	040b      	lsls	r3, r1, #16
    1c30:	0c1b      	lsrs	r3, r3, #16
    1c32:	25a0      	movs	r5, #160	; 0xa0
    1c34:	05ed      	lsls	r5, r5, #23
    1c36:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c38:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c3a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c3c:	0c0b      	lsrs	r3, r1, #16
    1c3e:	25d0      	movs	r5, #208	; 0xd0
    1c40:	062d      	lsls	r5, r5, #24
    1c42:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c44:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c46:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c48:	78d3      	ldrb	r3, [r2, #3]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d10c      	bne.n	1c68 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1c4e:	0363      	lsls	r3, r4, #13
    1c50:	d505      	bpl.n	1c5e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1c52:	7893      	ldrb	r3, [r2, #2]
    1c54:	2b01      	cmp	r3, #1
    1c56:	d101      	bne.n	1c5c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1c58:	6181      	str	r1, [r0, #24]
    1c5a:	e000      	b.n	1c5e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1c5c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c5e:	7853      	ldrb	r3, [r2, #1]
    1c60:	3b01      	subs	r3, #1
    1c62:	2b01      	cmp	r3, #1
    1c64:	d800      	bhi.n	1c68 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1c66:	6081      	str	r1, [r0, #8]
		}
	}
}
    1c68:	bd30      	pop	{r4, r5, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	fffbffff 	.word	0xfffbffff

00001c70 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1c70:	b508      	push	{r3, lr}
    1c72:	1c03      	adds	r3, r0, #0
    1c74:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1c76:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1c78:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1c7a:	2900      	cmp	r1, #0
    1c7c:	d104      	bne.n	1c88 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1c7e:	0958      	lsrs	r0, r3, #5
    1c80:	01c0      	lsls	r0, r0, #7
    1c82:	4905      	ldr	r1, [pc, #20]	; (1c98 <system_pinmux_pin_set_config+0x28>)
    1c84:	468c      	mov	ip, r1
    1c86:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1c88:	211f      	movs	r1, #31
    1c8a:	400b      	ands	r3, r1
    1c8c:	391e      	subs	r1, #30
    1c8e:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1c90:	4b02      	ldr	r3, [pc, #8]	; (1c9c <system_pinmux_pin_set_config+0x2c>)
    1c92:	4798      	blx	r3
}
    1c94:	bd08      	pop	{r3, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	40002800 	.word	0x40002800
    1c9c:	00001bc9 	.word	0x00001bc9

00001ca0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)

00001ca4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ca4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ca6:	4b05      	ldr	r3, [pc, #20]	; (1cbc <system_init+0x18>)
    1ca8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1caa:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <system_init+0x1c>)
    1cac:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1cae:	4b05      	ldr	r3, [pc, #20]	; (1cc4 <system_init+0x20>)
    1cb0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1cb2:	4b05      	ldr	r3, [pc, #20]	; (1cc8 <system_init+0x24>)
    1cb4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1cb6:	4b05      	ldr	r3, [pc, #20]	; (1ccc <system_init+0x28>)
    1cb8:	4798      	blx	r3
}
    1cba:	bd08      	pop	{r3, pc}
    1cbc:	00001785 	.word	0x00001785
    1cc0:	00001485 	.word	0x00001485
    1cc4:	00001ca1 	.word	0x00001ca1
    1cc8:	0000019d 	.word	0x0000019d
    1ccc:	00001ca1 	.word	0x00001ca1

00001cd0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1cd0:	e7fe      	b.n	1cd0 <Dummy_Handler>
    1cd2:	46c0      	nop			; (mov r8, r8)

00001cd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1cd4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1cd6:	4b1d      	ldr	r3, [pc, #116]	; (1d4c <Reset_Handler+0x78>)
    1cd8:	4a1d      	ldr	r2, [pc, #116]	; (1d50 <Reset_Handler+0x7c>)
    1cda:	429a      	cmp	r2, r3
    1cdc:	d003      	beq.n	1ce6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1cde:	4b1d      	ldr	r3, [pc, #116]	; (1d54 <Reset_Handler+0x80>)
    1ce0:	4a1a      	ldr	r2, [pc, #104]	; (1d4c <Reset_Handler+0x78>)
    1ce2:	429a      	cmp	r2, r3
    1ce4:	d304      	bcc.n	1cf0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ce6:	4b1c      	ldr	r3, [pc, #112]	; (1d58 <Reset_Handler+0x84>)
    1ce8:	4a1c      	ldr	r2, [pc, #112]	; (1d5c <Reset_Handler+0x88>)
    1cea:	429a      	cmp	r2, r3
    1cec:	d310      	bcc.n	1d10 <Reset_Handler+0x3c>
    1cee:	e01e      	b.n	1d2e <Reset_Handler+0x5a>
    1cf0:	4a1b      	ldr	r2, [pc, #108]	; (1d60 <Reset_Handler+0x8c>)
    1cf2:	4b18      	ldr	r3, [pc, #96]	; (1d54 <Reset_Handler+0x80>)
    1cf4:	3303      	adds	r3, #3
    1cf6:	1a9b      	subs	r3, r3, r2
    1cf8:	089b      	lsrs	r3, r3, #2
    1cfa:	3301      	adds	r3, #1
    1cfc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1cfe:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1d00:	4812      	ldr	r0, [pc, #72]	; (1d4c <Reset_Handler+0x78>)
    1d02:	4913      	ldr	r1, [pc, #76]	; (1d50 <Reset_Handler+0x7c>)
    1d04:	588c      	ldr	r4, [r1, r2]
    1d06:	5084      	str	r4, [r0, r2]
    1d08:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d1fa      	bne.n	1d04 <Reset_Handler+0x30>
    1d0e:	e7ea      	b.n	1ce6 <Reset_Handler+0x12>
    1d10:	4a14      	ldr	r2, [pc, #80]	; (1d64 <Reset_Handler+0x90>)
    1d12:	4b11      	ldr	r3, [pc, #68]	; (1d58 <Reset_Handler+0x84>)
    1d14:	3303      	adds	r3, #3
    1d16:	1a9b      	subs	r3, r3, r2
    1d18:	089b      	lsrs	r3, r3, #2
    1d1a:	3301      	adds	r3, #1
    1d1c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d1e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1d20:	480e      	ldr	r0, [pc, #56]	; (1d5c <Reset_Handler+0x88>)
    1d22:	2100      	movs	r1, #0
    1d24:	1814      	adds	r4, r2, r0
    1d26:	6021      	str	r1, [r4, #0]
    1d28:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d1fa      	bne.n	1d24 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1d2e:	4a0e      	ldr	r2, [pc, #56]	; (1d68 <Reset_Handler+0x94>)
    1d30:	21ff      	movs	r1, #255	; 0xff
    1d32:	4b0e      	ldr	r3, [pc, #56]	; (1d6c <Reset_Handler+0x98>)
    1d34:	438b      	bics	r3, r1
    1d36:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1d38:	4a0d      	ldr	r2, [pc, #52]	; (1d70 <Reset_Handler+0x9c>)
    1d3a:	6851      	ldr	r1, [r2, #4]
    1d3c:	2380      	movs	r3, #128	; 0x80
    1d3e:	430b      	orrs	r3, r1
    1d40:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1d42:	4b0c      	ldr	r3, [pc, #48]	; (1d74 <Reset_Handler+0xa0>)
    1d44:	4798      	blx	r3

        /* Branch to main function */
        main();
    1d46:	4b0c      	ldr	r3, [pc, #48]	; (1d78 <Reset_Handler+0xa4>)
    1d48:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1d4a:	e7fe      	b.n	1d4a <Reset_Handler+0x76>
    1d4c:	20000000 	.word	0x20000000
    1d50:	0000298c 	.word	0x0000298c
    1d54:	20000068 	.word	0x20000068
    1d58:	2000026c 	.word	0x2000026c
    1d5c:	20000068 	.word	0x20000068
    1d60:	20000004 	.word	0x20000004
    1d64:	2000006c 	.word	0x2000006c
    1d68:	e000ed00 	.word	0xe000ed00
    1d6c:	00000000 	.word	0x00000000
    1d70:	41004000 	.word	0x41004000
    1d74:	00001fb9 	.word	0x00001fb9
    1d78:	00001da1 	.word	0x00001da1

00001d7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1d7c:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1d7e:	4a06      	ldr	r2, [pc, #24]	; (1d98 <_sbrk+0x1c>)
    1d80:	6812      	ldr	r2, [r2, #0]
    1d82:	2a00      	cmp	r2, #0
    1d84:	d102      	bne.n	1d8c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1d86:	4905      	ldr	r1, [pc, #20]	; (1d9c <_sbrk+0x20>)
    1d88:	4a03      	ldr	r2, [pc, #12]	; (1d98 <_sbrk+0x1c>)
    1d8a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1d8c:	4a02      	ldr	r2, [pc, #8]	; (1d98 <_sbrk+0x1c>)
    1d8e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1d90:	18c3      	adds	r3, r0, r3
    1d92:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1d94:	4770      	bx	lr
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	200000c4 	.word	0x200000c4
    1d9c:	20002270 	.word	0x20002270

00001da0 <main>:

/*! \brief Main function. Execution starts here.
 */

int main(void)
{
    1da0:	b538      	push	{r3, r4, r5, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    1da2:	4d11      	ldr	r5, [pc, #68]	; (1de8 <main+0x48>)
    1da4:	2401      	movs	r4, #1
    1da6:	702c      	strb	r4, [r5, #0]
    1da8:	f3bf 8f5f 	dmb	sy
    1dac:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1dae:	4b0f      	ldr	r3, [pc, #60]	; (1dec <main+0x4c>)
    1db0:	2200      	movs	r2, #0
    1db2:	701a      	strb	r2, [r3, #0]
    1db4:	705a      	strb	r2, [r3, #1]
    1db6:	709a      	strb	r2, [r3, #2]
    1db8:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1dba:	711c      	strb	r4, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    1dbc:	4b0c      	ldr	r3, [pc, #48]	; (1df0 <main+0x50>)
    1dbe:	4798      	blx	r3
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dc0:	490c      	ldr	r1, [pc, #48]	; (1df4 <main+0x54>)
    1dc2:	684b      	ldr	r3, [r1, #4]
    1dc4:	221e      	movs	r2, #30
    1dc6:	4393      	bics	r3, r2
    1dc8:	1c1a      	adds	r2, r3, #0
    1dca:	2304      	movs	r3, #4
    1dcc:	4313      	orrs	r3, r2
    1dce:	604b      	str	r3, [r1, #4]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1dd0:	702c      	strb	r4, [r5, #0]
    1dd2:	f3bf 8f5f 	dmb	sy
    1dd6:	b662      	cpsie	i
#endif
	

	system_flash_set_waitstates(2);
	system_interrupt_enable_global();
	configure_SP1ML();
    1dd8:	4b07      	ldr	r3, [pc, #28]	; (1df8 <main+0x58>)
    1dda:	4798      	blx	r3
// 	ui_init();
// 	ui_powerdown();
// 	// Start USB stack to authorize VBus monitoring
// 	udc_start();
	SP1ML_receive_byte();
    1ddc:	4b07      	ldr	r3, [pc, #28]	; (1dfc <main+0x5c>)
    1dde:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1de0:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    1de4:	bf30      	wfi
    1de6:	e7fb      	b.n	1de0 <main+0x40>
    1de8:	20000000 	.word	0x20000000
    1dec:	200000d0 	.word	0x200000d0
    1df0:	00001ca5 	.word	0x00001ca5
    1df4:	41004000 	.word	0x41004000
    1df8:	000010a1 	.word	0x000010a1
    1dfc:	000013f5 	.word	0x000013f5

00001e00 <__aeabi_uidiv>:
    1e00:	2200      	movs	r2, #0
    1e02:	0843      	lsrs	r3, r0, #1
    1e04:	428b      	cmp	r3, r1
    1e06:	d374      	bcc.n	1ef2 <__aeabi_uidiv+0xf2>
    1e08:	0903      	lsrs	r3, r0, #4
    1e0a:	428b      	cmp	r3, r1
    1e0c:	d35f      	bcc.n	1ece <__aeabi_uidiv+0xce>
    1e0e:	0a03      	lsrs	r3, r0, #8
    1e10:	428b      	cmp	r3, r1
    1e12:	d344      	bcc.n	1e9e <__aeabi_uidiv+0x9e>
    1e14:	0b03      	lsrs	r3, r0, #12
    1e16:	428b      	cmp	r3, r1
    1e18:	d328      	bcc.n	1e6c <__aeabi_uidiv+0x6c>
    1e1a:	0c03      	lsrs	r3, r0, #16
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d30d      	bcc.n	1e3c <__aeabi_uidiv+0x3c>
    1e20:	22ff      	movs	r2, #255	; 0xff
    1e22:	0209      	lsls	r1, r1, #8
    1e24:	ba12      	rev	r2, r2
    1e26:	0c03      	lsrs	r3, r0, #16
    1e28:	428b      	cmp	r3, r1
    1e2a:	d302      	bcc.n	1e32 <__aeabi_uidiv+0x32>
    1e2c:	1212      	asrs	r2, r2, #8
    1e2e:	0209      	lsls	r1, r1, #8
    1e30:	d065      	beq.n	1efe <__aeabi_uidiv+0xfe>
    1e32:	0b03      	lsrs	r3, r0, #12
    1e34:	428b      	cmp	r3, r1
    1e36:	d319      	bcc.n	1e6c <__aeabi_uidiv+0x6c>
    1e38:	e000      	b.n	1e3c <__aeabi_uidiv+0x3c>
    1e3a:	0a09      	lsrs	r1, r1, #8
    1e3c:	0bc3      	lsrs	r3, r0, #15
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__aeabi_uidiv+0x46>
    1e42:	03cb      	lsls	r3, r1, #15
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	0b83      	lsrs	r3, r0, #14
    1e4a:	428b      	cmp	r3, r1
    1e4c:	d301      	bcc.n	1e52 <__aeabi_uidiv+0x52>
    1e4e:	038b      	lsls	r3, r1, #14
    1e50:	1ac0      	subs	r0, r0, r3
    1e52:	4152      	adcs	r2, r2
    1e54:	0b43      	lsrs	r3, r0, #13
    1e56:	428b      	cmp	r3, r1
    1e58:	d301      	bcc.n	1e5e <__aeabi_uidiv+0x5e>
    1e5a:	034b      	lsls	r3, r1, #13
    1e5c:	1ac0      	subs	r0, r0, r3
    1e5e:	4152      	adcs	r2, r2
    1e60:	0b03      	lsrs	r3, r0, #12
    1e62:	428b      	cmp	r3, r1
    1e64:	d301      	bcc.n	1e6a <__aeabi_uidiv+0x6a>
    1e66:	030b      	lsls	r3, r1, #12
    1e68:	1ac0      	subs	r0, r0, r3
    1e6a:	4152      	adcs	r2, r2
    1e6c:	0ac3      	lsrs	r3, r0, #11
    1e6e:	428b      	cmp	r3, r1
    1e70:	d301      	bcc.n	1e76 <__aeabi_uidiv+0x76>
    1e72:	02cb      	lsls	r3, r1, #11
    1e74:	1ac0      	subs	r0, r0, r3
    1e76:	4152      	adcs	r2, r2
    1e78:	0a83      	lsrs	r3, r0, #10
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d301      	bcc.n	1e82 <__aeabi_uidiv+0x82>
    1e7e:	028b      	lsls	r3, r1, #10
    1e80:	1ac0      	subs	r0, r0, r3
    1e82:	4152      	adcs	r2, r2
    1e84:	0a43      	lsrs	r3, r0, #9
    1e86:	428b      	cmp	r3, r1
    1e88:	d301      	bcc.n	1e8e <__aeabi_uidiv+0x8e>
    1e8a:	024b      	lsls	r3, r1, #9
    1e8c:	1ac0      	subs	r0, r0, r3
    1e8e:	4152      	adcs	r2, r2
    1e90:	0a03      	lsrs	r3, r0, #8
    1e92:	428b      	cmp	r3, r1
    1e94:	d301      	bcc.n	1e9a <__aeabi_uidiv+0x9a>
    1e96:	020b      	lsls	r3, r1, #8
    1e98:	1ac0      	subs	r0, r0, r3
    1e9a:	4152      	adcs	r2, r2
    1e9c:	d2cd      	bcs.n	1e3a <__aeabi_uidiv+0x3a>
    1e9e:	09c3      	lsrs	r3, r0, #7
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d301      	bcc.n	1ea8 <__aeabi_uidiv+0xa8>
    1ea4:	01cb      	lsls	r3, r1, #7
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	4152      	adcs	r2, r2
    1eaa:	0983      	lsrs	r3, r0, #6
    1eac:	428b      	cmp	r3, r1
    1eae:	d301      	bcc.n	1eb4 <__aeabi_uidiv+0xb4>
    1eb0:	018b      	lsls	r3, r1, #6
    1eb2:	1ac0      	subs	r0, r0, r3
    1eb4:	4152      	adcs	r2, r2
    1eb6:	0943      	lsrs	r3, r0, #5
    1eb8:	428b      	cmp	r3, r1
    1eba:	d301      	bcc.n	1ec0 <__aeabi_uidiv+0xc0>
    1ebc:	014b      	lsls	r3, r1, #5
    1ebe:	1ac0      	subs	r0, r0, r3
    1ec0:	4152      	adcs	r2, r2
    1ec2:	0903      	lsrs	r3, r0, #4
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d301      	bcc.n	1ecc <__aeabi_uidiv+0xcc>
    1ec8:	010b      	lsls	r3, r1, #4
    1eca:	1ac0      	subs	r0, r0, r3
    1ecc:	4152      	adcs	r2, r2
    1ece:	08c3      	lsrs	r3, r0, #3
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d301      	bcc.n	1ed8 <__aeabi_uidiv+0xd8>
    1ed4:	00cb      	lsls	r3, r1, #3
    1ed6:	1ac0      	subs	r0, r0, r3
    1ed8:	4152      	adcs	r2, r2
    1eda:	0883      	lsrs	r3, r0, #2
    1edc:	428b      	cmp	r3, r1
    1ede:	d301      	bcc.n	1ee4 <__aeabi_uidiv+0xe4>
    1ee0:	008b      	lsls	r3, r1, #2
    1ee2:	1ac0      	subs	r0, r0, r3
    1ee4:	4152      	adcs	r2, r2
    1ee6:	0843      	lsrs	r3, r0, #1
    1ee8:	428b      	cmp	r3, r1
    1eea:	d301      	bcc.n	1ef0 <__aeabi_uidiv+0xf0>
    1eec:	004b      	lsls	r3, r1, #1
    1eee:	1ac0      	subs	r0, r0, r3
    1ef0:	4152      	adcs	r2, r2
    1ef2:	1a41      	subs	r1, r0, r1
    1ef4:	d200      	bcs.n	1ef8 <__aeabi_uidiv+0xf8>
    1ef6:	4601      	mov	r1, r0
    1ef8:	4152      	adcs	r2, r2
    1efa:	4610      	mov	r0, r2
    1efc:	4770      	bx	lr
    1efe:	e7ff      	b.n	1f00 <__aeabi_uidiv+0x100>
    1f00:	b501      	push	{r0, lr}
    1f02:	2000      	movs	r0, #0
    1f04:	f000 f80c 	bl	1f20 <__aeabi_idiv0>
    1f08:	bd02      	pop	{r1, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)

00001f0c <__aeabi_uidivmod>:
    1f0c:	2900      	cmp	r1, #0
    1f0e:	d0f7      	beq.n	1f00 <__aeabi_uidiv+0x100>
    1f10:	b503      	push	{r0, r1, lr}
    1f12:	f7ff ff75 	bl	1e00 <__aeabi_uidiv>
    1f16:	bc0e      	pop	{r1, r2, r3}
    1f18:	4342      	muls	r2, r0
    1f1a:	1a89      	subs	r1, r1, r2
    1f1c:	4718      	bx	r3
    1f1e:	46c0      	nop			; (mov r8, r8)

00001f20 <__aeabi_idiv0>:
    1f20:	4770      	bx	lr
    1f22:	46c0      	nop			; (mov r8, r8)

00001f24 <__ctzsi2>:
    1f24:	4241      	negs	r1, r0
    1f26:	4008      	ands	r0, r1
    1f28:	211c      	movs	r1, #28
    1f2a:	2301      	movs	r3, #1
    1f2c:	041b      	lsls	r3, r3, #16
    1f2e:	4298      	cmp	r0, r3
    1f30:	d301      	bcc.n	1f36 <__ctzsi2+0x12>
    1f32:	0c00      	lsrs	r0, r0, #16
    1f34:	3910      	subs	r1, #16
    1f36:	0a1b      	lsrs	r3, r3, #8
    1f38:	4298      	cmp	r0, r3
    1f3a:	d301      	bcc.n	1f40 <__ctzsi2+0x1c>
    1f3c:	0a00      	lsrs	r0, r0, #8
    1f3e:	3908      	subs	r1, #8
    1f40:	091b      	lsrs	r3, r3, #4
    1f42:	4298      	cmp	r0, r3
    1f44:	d301      	bcc.n	1f4a <__ctzsi2+0x26>
    1f46:	0900      	lsrs	r0, r0, #4
    1f48:	3904      	subs	r1, #4
    1f4a:	a202      	add	r2, pc, #8	; (adr r2, 1f54 <__ctzsi2+0x30>)
    1f4c:	5c10      	ldrb	r0, [r2, r0]
    1f4e:	1a40      	subs	r0, r0, r1
    1f50:	4770      	bx	lr
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	1d1d1c1b 	.word	0x1d1d1c1b
    1f58:	1e1e1e1e 	.word	0x1e1e1e1e
    1f5c:	1f1f1f1f 	.word	0x1f1f1f1f
    1f60:	1f1f1f1f 	.word	0x1f1f1f1f

00001f64 <__aeabi_lmul>:
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f66:	464f      	mov	r7, r9
    1f68:	4646      	mov	r6, r8
    1f6a:	0405      	lsls	r5, r0, #16
    1f6c:	0c2d      	lsrs	r5, r5, #16
    1f6e:	1c2c      	adds	r4, r5, #0
    1f70:	b4c0      	push	{r6, r7}
    1f72:	0417      	lsls	r7, r2, #16
    1f74:	0c16      	lsrs	r6, r2, #16
    1f76:	0c3f      	lsrs	r7, r7, #16
    1f78:	4699      	mov	r9, r3
    1f7a:	0c03      	lsrs	r3, r0, #16
    1f7c:	437c      	muls	r4, r7
    1f7e:	4375      	muls	r5, r6
    1f80:	435f      	muls	r7, r3
    1f82:	4373      	muls	r3, r6
    1f84:	197d      	adds	r5, r7, r5
    1f86:	0c26      	lsrs	r6, r4, #16
    1f88:	19ad      	adds	r5, r5, r6
    1f8a:	469c      	mov	ip, r3
    1f8c:	42af      	cmp	r7, r5
    1f8e:	d903      	bls.n	1f98 <__aeabi_lmul+0x34>
    1f90:	2380      	movs	r3, #128	; 0x80
    1f92:	025b      	lsls	r3, r3, #9
    1f94:	4698      	mov	r8, r3
    1f96:	44c4      	add	ip, r8
    1f98:	464b      	mov	r3, r9
    1f9a:	4351      	muls	r1, r2
    1f9c:	4343      	muls	r3, r0
    1f9e:	0424      	lsls	r4, r4, #16
    1fa0:	0c2e      	lsrs	r6, r5, #16
    1fa2:	0c24      	lsrs	r4, r4, #16
    1fa4:	042d      	lsls	r5, r5, #16
    1fa6:	4466      	add	r6, ip
    1fa8:	192c      	adds	r4, r5, r4
    1faa:	1859      	adds	r1, r3, r1
    1fac:	1989      	adds	r1, r1, r6
    1fae:	1c20      	adds	r0, r4, #0
    1fb0:	bc0c      	pop	{r2, r3}
    1fb2:	4690      	mov	r8, r2
    1fb4:	4699      	mov	r9, r3
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fb8 <__libc_init_array>:
    1fb8:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <__libc_init_array+0x3c>)
    1fba:	b570      	push	{r4, r5, r6, lr}
    1fbc:	2500      	movs	r5, #0
    1fbe:	1c1e      	adds	r6, r3, #0
    1fc0:	4c0d      	ldr	r4, [pc, #52]	; (1ff8 <__libc_init_array+0x40>)
    1fc2:	1ae4      	subs	r4, r4, r3
    1fc4:	10a4      	asrs	r4, r4, #2
    1fc6:	42a5      	cmp	r5, r4
    1fc8:	d004      	beq.n	1fd4 <__libc_init_array+0x1c>
    1fca:	00ab      	lsls	r3, r5, #2
    1fcc:	58f3      	ldr	r3, [r6, r3]
    1fce:	4798      	blx	r3
    1fd0:	3501      	adds	r5, #1
    1fd2:	e7f8      	b.n	1fc6 <__libc_init_array+0xe>
    1fd4:	f000 fcca 	bl	296c <_init>
    1fd8:	4b08      	ldr	r3, [pc, #32]	; (1ffc <__libc_init_array+0x44>)
    1fda:	2500      	movs	r5, #0
    1fdc:	1c1e      	adds	r6, r3, #0
    1fde:	4c08      	ldr	r4, [pc, #32]	; (2000 <STACK_SIZE>)
    1fe0:	1ae4      	subs	r4, r4, r3
    1fe2:	10a4      	asrs	r4, r4, #2
    1fe4:	42a5      	cmp	r5, r4
    1fe6:	d004      	beq.n	1ff2 <__libc_init_array+0x3a>
    1fe8:	00ab      	lsls	r3, r5, #2
    1fea:	58f3      	ldr	r3, [r6, r3]
    1fec:	4798      	blx	r3
    1fee:	3501      	adds	r5, #1
    1ff0:	e7f8      	b.n	1fe4 <__libc_init_array+0x2c>
    1ff2:	bd70      	pop	{r4, r5, r6, pc}
    1ff4:	00002978 	.word	0x00002978
    1ff8:	00002978 	.word	0x00002978
    1ffc:	00002978 	.word	0x00002978
    2000:	0000297c 	.word	0x0000297c

00002004 <memcpy>:
    2004:	2300      	movs	r3, #0
    2006:	b510      	push	{r4, lr}
    2008:	4293      	cmp	r3, r2
    200a:	d003      	beq.n	2014 <memcpy+0x10>
    200c:	5ccc      	ldrb	r4, [r1, r3]
    200e:	54c4      	strb	r4, [r0, r3]
    2010:	3301      	adds	r3, #1
    2012:	e7f9      	b.n	2008 <memcpy+0x4>
    2014:	bd10      	pop	{r4, pc}
	...

00002018 <siprintf>:
    2018:	b40e      	push	{r1, r2, r3}
    201a:	b510      	push	{r4, lr}
    201c:	b09d      	sub	sp, #116	; 0x74
    201e:	a902      	add	r1, sp, #8
    2020:	9002      	str	r0, [sp, #8]
    2022:	6108      	str	r0, [r1, #16]
    2024:	480b      	ldr	r0, [pc, #44]	; (2054 <siprintf+0x3c>)
    2026:	2482      	movs	r4, #130	; 0x82
    2028:	6088      	str	r0, [r1, #8]
    202a:	6148      	str	r0, [r1, #20]
    202c:	2001      	movs	r0, #1
    202e:	4240      	negs	r0, r0
    2030:	ab1f      	add	r3, sp, #124	; 0x7c
    2032:	81c8      	strh	r0, [r1, #14]
    2034:	4808      	ldr	r0, [pc, #32]	; (2058 <siprintf+0x40>)
    2036:	cb04      	ldmia	r3!, {r2}
    2038:	00a4      	lsls	r4, r4, #2
    203a:	6800      	ldr	r0, [r0, #0]
    203c:	9301      	str	r3, [sp, #4]
    203e:	818c      	strh	r4, [r1, #12]
    2040:	f000 f8c4 	bl	21cc <_svfiprintf_r>
    2044:	2300      	movs	r3, #0
    2046:	9a02      	ldr	r2, [sp, #8]
    2048:	7013      	strb	r3, [r2, #0]
    204a:	b01d      	add	sp, #116	; 0x74
    204c:	bc10      	pop	{r4}
    204e:	bc08      	pop	{r3}
    2050:	b003      	add	sp, #12
    2052:	4718      	bx	r3
    2054:	7fffffff 	.word	0x7fffffff
    2058:	20000064 	.word	0x20000064

0000205c <_malloc_r>:
    205c:	2303      	movs	r3, #3
    205e:	b570      	push	{r4, r5, r6, lr}
    2060:	1ccc      	adds	r4, r1, #3
    2062:	439c      	bics	r4, r3
    2064:	3408      	adds	r4, #8
    2066:	1c05      	adds	r5, r0, #0
    2068:	2c0c      	cmp	r4, #12
    206a:	d201      	bcs.n	2070 <_malloc_r+0x14>
    206c:	240c      	movs	r4, #12
    206e:	e005      	b.n	207c <_malloc_r+0x20>
    2070:	2c00      	cmp	r4, #0
    2072:	da03      	bge.n	207c <_malloc_r+0x20>
    2074:	230c      	movs	r3, #12
    2076:	2000      	movs	r0, #0
    2078:	602b      	str	r3, [r5, #0]
    207a:	e042      	b.n	2102 <_malloc_r+0xa6>
    207c:	428c      	cmp	r4, r1
    207e:	d3f9      	bcc.n	2074 <_malloc_r+0x18>
    2080:	4a20      	ldr	r2, [pc, #128]	; (2104 <_malloc_r+0xa8>)
    2082:	6813      	ldr	r3, [r2, #0]
    2084:	1c10      	adds	r0, r2, #0
    2086:	1c19      	adds	r1, r3, #0
    2088:	2900      	cmp	r1, #0
    208a:	d013      	beq.n	20b4 <_malloc_r+0x58>
    208c:	680a      	ldr	r2, [r1, #0]
    208e:	1b12      	subs	r2, r2, r4
    2090:	d40d      	bmi.n	20ae <_malloc_r+0x52>
    2092:	2a0b      	cmp	r2, #11
    2094:	d902      	bls.n	209c <_malloc_r+0x40>
    2096:	600a      	str	r2, [r1, #0]
    2098:	188b      	adds	r3, r1, r2
    209a:	e01f      	b.n	20dc <_malloc_r+0x80>
    209c:	428b      	cmp	r3, r1
    209e:	d102      	bne.n	20a6 <_malloc_r+0x4a>
    20a0:	685a      	ldr	r2, [r3, #4]
    20a2:	6002      	str	r2, [r0, #0]
    20a4:	e01b      	b.n	20de <_malloc_r+0x82>
    20a6:	684a      	ldr	r2, [r1, #4]
    20a8:	605a      	str	r2, [r3, #4]
    20aa:	1c0b      	adds	r3, r1, #0
    20ac:	e017      	b.n	20de <_malloc_r+0x82>
    20ae:	1c0b      	adds	r3, r1, #0
    20b0:	6849      	ldr	r1, [r1, #4]
    20b2:	e7e9      	b.n	2088 <_malloc_r+0x2c>
    20b4:	4e14      	ldr	r6, [pc, #80]	; (2108 <_malloc_r+0xac>)
    20b6:	6833      	ldr	r3, [r6, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d103      	bne.n	20c4 <_malloc_r+0x68>
    20bc:	1c28      	adds	r0, r5, #0
    20be:	f000 fb01 	bl	26c4 <_sbrk_r>
    20c2:	6030      	str	r0, [r6, #0]
    20c4:	1c28      	adds	r0, r5, #0
    20c6:	1c21      	adds	r1, r4, #0
    20c8:	f000 fafc 	bl	26c4 <_sbrk_r>
    20cc:	1c03      	adds	r3, r0, #0
    20ce:	1c42      	adds	r2, r0, #1
    20d0:	d0d0      	beq.n	2074 <_malloc_r+0x18>
    20d2:	2203      	movs	r2, #3
    20d4:	1cc6      	adds	r6, r0, #3
    20d6:	4396      	bics	r6, r2
    20d8:	4286      	cmp	r6, r0
    20da:	d10a      	bne.n	20f2 <_malloc_r+0x96>
    20dc:	601c      	str	r4, [r3, #0]
    20de:	1c18      	adds	r0, r3, #0
    20e0:	2107      	movs	r1, #7
    20e2:	300b      	adds	r0, #11
    20e4:	1d1a      	adds	r2, r3, #4
    20e6:	4388      	bics	r0, r1
    20e8:	1a82      	subs	r2, r0, r2
    20ea:	d00a      	beq.n	2102 <_malloc_r+0xa6>
    20ec:	4251      	negs	r1, r2
    20ee:	5099      	str	r1, [r3, r2]
    20f0:	e007      	b.n	2102 <_malloc_r+0xa6>
    20f2:	1a31      	subs	r1, r6, r0
    20f4:	1c28      	adds	r0, r5, #0
    20f6:	f000 fae5 	bl	26c4 <_sbrk_r>
    20fa:	1c43      	adds	r3, r0, #1
    20fc:	d0ba      	beq.n	2074 <_malloc_r+0x18>
    20fe:	1c33      	adds	r3, r6, #0
    2100:	e7ec      	b.n	20dc <_malloc_r+0x80>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	200000cc 	.word	0x200000cc
    2108:	200000c8 	.word	0x200000c8

0000210c <__ssputs_r>:
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	688e      	ldr	r6, [r1, #8]
    2110:	b085      	sub	sp, #20
    2112:	1c07      	adds	r7, r0, #0
    2114:	1c0c      	adds	r4, r1, #0
    2116:	9203      	str	r2, [sp, #12]
    2118:	9301      	str	r3, [sp, #4]
    211a:	42b3      	cmp	r3, r6
    211c:	d345      	bcc.n	21aa <__ssputs_r+0x9e>
    211e:	2390      	movs	r3, #144	; 0x90
    2120:	898a      	ldrh	r2, [r1, #12]
    2122:	00db      	lsls	r3, r3, #3
    2124:	421a      	tst	r2, r3
    2126:	d03d      	beq.n	21a4 <__ssputs_r+0x98>
    2128:	2503      	movs	r5, #3
    212a:	6909      	ldr	r1, [r1, #16]
    212c:	6823      	ldr	r3, [r4, #0]
    212e:	9801      	ldr	r0, [sp, #4]
    2130:	1a5b      	subs	r3, r3, r1
    2132:	9302      	str	r3, [sp, #8]
    2134:	6963      	ldr	r3, [r4, #20]
    2136:	435d      	muls	r5, r3
    2138:	0feb      	lsrs	r3, r5, #31
    213a:	195d      	adds	r5, r3, r5
    213c:	9b02      	ldr	r3, [sp, #8]
    213e:	106d      	asrs	r5, r5, #1
    2140:	3301      	adds	r3, #1
    2142:	181b      	adds	r3, r3, r0
    2144:	429d      	cmp	r5, r3
    2146:	d200      	bcs.n	214a <__ssputs_r+0x3e>
    2148:	1c1d      	adds	r5, r3, #0
    214a:	1c38      	adds	r0, r7, #0
    214c:	0553      	lsls	r3, r2, #21
    214e:	d50f      	bpl.n	2170 <__ssputs_r+0x64>
    2150:	1c29      	adds	r1, r5, #0
    2152:	f7ff ff83 	bl	205c <_malloc_r>
    2156:	1e06      	subs	r6, r0, #0
    2158:	d013      	beq.n	2182 <__ssputs_r+0x76>
    215a:	9a02      	ldr	r2, [sp, #8]
    215c:	6921      	ldr	r1, [r4, #16]
    215e:	f7ff ff51 	bl	2004 <memcpy>
    2162:	89a2      	ldrh	r2, [r4, #12]
    2164:	4b18      	ldr	r3, [pc, #96]	; (21c8 <__ssputs_r+0xbc>)
    2166:	4013      	ands	r3, r2
    2168:	2280      	movs	r2, #128	; 0x80
    216a:	4313      	orrs	r3, r2
    216c:	81a3      	strh	r3, [r4, #12]
    216e:	e011      	b.n	2194 <__ssputs_r+0x88>
    2170:	1c2a      	adds	r2, r5, #0
    2172:	f000 fb1f 	bl	27b4 <_realloc_r>
    2176:	1e06      	subs	r6, r0, #0
    2178:	d10c      	bne.n	2194 <__ssputs_r+0x88>
    217a:	1c38      	adds	r0, r7, #0
    217c:	6921      	ldr	r1, [r4, #16]
    217e:	f000 fad3 	bl	2728 <_free_r>
    2182:	230c      	movs	r3, #12
    2184:	2240      	movs	r2, #64	; 0x40
    2186:	2001      	movs	r0, #1
    2188:	603b      	str	r3, [r7, #0]
    218a:	89a3      	ldrh	r3, [r4, #12]
    218c:	4240      	negs	r0, r0
    218e:	4313      	orrs	r3, r2
    2190:	81a3      	strh	r3, [r4, #12]
    2192:	e017      	b.n	21c4 <__ssputs_r+0xb8>
    2194:	9b02      	ldr	r3, [sp, #8]
    2196:	6126      	str	r6, [r4, #16]
    2198:	18f6      	adds	r6, r6, r3
    219a:	6026      	str	r6, [r4, #0]
    219c:	6165      	str	r5, [r4, #20]
    219e:	9e01      	ldr	r6, [sp, #4]
    21a0:	1aed      	subs	r5, r5, r3
    21a2:	60a5      	str	r5, [r4, #8]
    21a4:	9b01      	ldr	r3, [sp, #4]
    21a6:	42b3      	cmp	r3, r6
    21a8:	d200      	bcs.n	21ac <__ssputs_r+0xa0>
    21aa:	9e01      	ldr	r6, [sp, #4]
    21ac:	1c32      	adds	r2, r6, #0
    21ae:	6820      	ldr	r0, [r4, #0]
    21b0:	9903      	ldr	r1, [sp, #12]
    21b2:	f000 faa4 	bl	26fe <memmove>
    21b6:	2000      	movs	r0, #0
    21b8:	68a3      	ldr	r3, [r4, #8]
    21ba:	1b9b      	subs	r3, r3, r6
    21bc:	60a3      	str	r3, [r4, #8]
    21be:	6823      	ldr	r3, [r4, #0]
    21c0:	199e      	adds	r6, r3, r6
    21c2:	6026      	str	r6, [r4, #0]
    21c4:	b005      	add	sp, #20
    21c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c8:	fffffb7f 	.word	0xfffffb7f

000021cc <_svfiprintf_r>:
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	b09f      	sub	sp, #124	; 0x7c
    21d0:	9002      	str	r0, [sp, #8]
    21d2:	9305      	str	r3, [sp, #20]
    21d4:	898b      	ldrh	r3, [r1, #12]
    21d6:	1c0e      	adds	r6, r1, #0
    21d8:	1c17      	adds	r7, r2, #0
    21da:	061b      	lsls	r3, r3, #24
    21dc:	d510      	bpl.n	2200 <_svfiprintf_r+0x34>
    21de:	690b      	ldr	r3, [r1, #16]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d10d      	bne.n	2200 <_svfiprintf_r+0x34>
    21e4:	2140      	movs	r1, #64	; 0x40
    21e6:	f7ff ff39 	bl	205c <_malloc_r>
    21ea:	6030      	str	r0, [r6, #0]
    21ec:	6130      	str	r0, [r6, #16]
    21ee:	2800      	cmp	r0, #0
    21f0:	d104      	bne.n	21fc <_svfiprintf_r+0x30>
    21f2:	230c      	movs	r3, #12
    21f4:	9a02      	ldr	r2, [sp, #8]
    21f6:	3801      	subs	r0, #1
    21f8:	6013      	str	r3, [r2, #0]
    21fa:	e0d0      	b.n	239e <_svfiprintf_r+0x1d2>
    21fc:	2340      	movs	r3, #64	; 0x40
    21fe:	6173      	str	r3, [r6, #20]
    2200:	2300      	movs	r3, #0
    2202:	ad06      	add	r5, sp, #24
    2204:	616b      	str	r3, [r5, #20]
    2206:	3320      	adds	r3, #32
    2208:	766b      	strb	r3, [r5, #25]
    220a:	3310      	adds	r3, #16
    220c:	76ab      	strb	r3, [r5, #26]
    220e:	1c3c      	adds	r4, r7, #0
    2210:	7823      	ldrb	r3, [r4, #0]
    2212:	2b00      	cmp	r3, #0
    2214:	d103      	bne.n	221e <_svfiprintf_r+0x52>
    2216:	1be3      	subs	r3, r4, r7
    2218:	9304      	str	r3, [sp, #16]
    221a:	d012      	beq.n	2242 <_svfiprintf_r+0x76>
    221c:	e003      	b.n	2226 <_svfiprintf_r+0x5a>
    221e:	2b25      	cmp	r3, #37	; 0x25
    2220:	d0f9      	beq.n	2216 <_svfiprintf_r+0x4a>
    2222:	3401      	adds	r4, #1
    2224:	e7f4      	b.n	2210 <_svfiprintf_r+0x44>
    2226:	9b04      	ldr	r3, [sp, #16]
    2228:	9802      	ldr	r0, [sp, #8]
    222a:	1c31      	adds	r1, r6, #0
    222c:	1c3a      	adds	r2, r7, #0
    222e:	f7ff ff6d 	bl	210c <__ssputs_r>
    2232:	1c43      	adds	r3, r0, #1
    2234:	d100      	bne.n	2238 <_svfiprintf_r+0x6c>
    2236:	e0ac      	b.n	2392 <_svfiprintf_r+0x1c6>
    2238:	696a      	ldr	r2, [r5, #20]
    223a:	9b04      	ldr	r3, [sp, #16]
    223c:	4694      	mov	ip, r2
    223e:	4463      	add	r3, ip
    2240:	616b      	str	r3, [r5, #20]
    2242:	7823      	ldrb	r3, [r4, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	d100      	bne.n	224a <_svfiprintf_r+0x7e>
    2248:	e0a3      	b.n	2392 <_svfiprintf_r+0x1c6>
    224a:	2201      	movs	r2, #1
    224c:	2300      	movs	r3, #0
    224e:	4252      	negs	r2, r2
    2250:	606a      	str	r2, [r5, #4]
    2252:	a902      	add	r1, sp, #8
    2254:	3254      	adds	r2, #84	; 0x54
    2256:	1852      	adds	r2, r2, r1
    2258:	3401      	adds	r4, #1
    225a:	602b      	str	r3, [r5, #0]
    225c:	60eb      	str	r3, [r5, #12]
    225e:	60ab      	str	r3, [r5, #8]
    2260:	7013      	strb	r3, [r2, #0]
    2262:	65ab      	str	r3, [r5, #88]	; 0x58
    2264:	4f4f      	ldr	r7, [pc, #316]	; (23a4 <_svfiprintf_r+0x1d8>)
    2266:	7821      	ldrb	r1, [r4, #0]
    2268:	1c38      	adds	r0, r7, #0
    226a:	2205      	movs	r2, #5
    226c:	f000 fa3c 	bl	26e8 <memchr>
    2270:	2800      	cmp	r0, #0
    2272:	d008      	beq.n	2286 <_svfiprintf_r+0xba>
    2274:	1bc0      	subs	r0, r0, r7
    2276:	2701      	movs	r7, #1
    2278:	4087      	lsls	r7, r0
    227a:	1c38      	adds	r0, r7, #0
    227c:	682b      	ldr	r3, [r5, #0]
    227e:	3401      	adds	r4, #1
    2280:	4318      	orrs	r0, r3
    2282:	6028      	str	r0, [r5, #0]
    2284:	e7ee      	b.n	2264 <_svfiprintf_r+0x98>
    2286:	682b      	ldr	r3, [r5, #0]
    2288:	06da      	lsls	r2, r3, #27
    228a:	d504      	bpl.n	2296 <_svfiprintf_r+0xca>
    228c:	2253      	movs	r2, #83	; 0x53
    228e:	2120      	movs	r1, #32
    2290:	a802      	add	r0, sp, #8
    2292:	1812      	adds	r2, r2, r0
    2294:	7011      	strb	r1, [r2, #0]
    2296:	071a      	lsls	r2, r3, #28
    2298:	d504      	bpl.n	22a4 <_svfiprintf_r+0xd8>
    229a:	2253      	movs	r2, #83	; 0x53
    229c:	212b      	movs	r1, #43	; 0x2b
    229e:	a802      	add	r0, sp, #8
    22a0:	1812      	adds	r2, r2, r0
    22a2:	7011      	strb	r1, [r2, #0]
    22a4:	7822      	ldrb	r2, [r4, #0]
    22a6:	2a2a      	cmp	r2, #42	; 0x2a
    22a8:	d001      	beq.n	22ae <_svfiprintf_r+0xe2>
    22aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22ac:	e00e      	b.n	22cc <_svfiprintf_r+0x100>
    22ae:	9a05      	ldr	r2, [sp, #20]
    22b0:	1d11      	adds	r1, r2, #4
    22b2:	6812      	ldr	r2, [r2, #0]
    22b4:	9105      	str	r1, [sp, #20]
    22b6:	2a00      	cmp	r2, #0
    22b8:	db01      	blt.n	22be <_svfiprintf_r+0xf2>
    22ba:	9209      	str	r2, [sp, #36]	; 0x24
    22bc:	e004      	b.n	22c8 <_svfiprintf_r+0xfc>
    22be:	4252      	negs	r2, r2
    22c0:	60ea      	str	r2, [r5, #12]
    22c2:	2202      	movs	r2, #2
    22c4:	4313      	orrs	r3, r2
    22c6:	602b      	str	r3, [r5, #0]
    22c8:	3401      	adds	r4, #1
    22ca:	e009      	b.n	22e0 <_svfiprintf_r+0x114>
    22cc:	7822      	ldrb	r2, [r4, #0]
    22ce:	3a30      	subs	r2, #48	; 0x30
    22d0:	2a09      	cmp	r2, #9
    22d2:	d804      	bhi.n	22de <_svfiprintf_r+0x112>
    22d4:	210a      	movs	r1, #10
    22d6:	434b      	muls	r3, r1
    22d8:	3401      	adds	r4, #1
    22da:	189b      	adds	r3, r3, r2
    22dc:	e7f6      	b.n	22cc <_svfiprintf_r+0x100>
    22de:	9309      	str	r3, [sp, #36]	; 0x24
    22e0:	7823      	ldrb	r3, [r4, #0]
    22e2:	2b2e      	cmp	r3, #46	; 0x2e
    22e4:	d118      	bne.n	2318 <_svfiprintf_r+0x14c>
    22e6:	7863      	ldrb	r3, [r4, #1]
    22e8:	2b2a      	cmp	r3, #42	; 0x2a
    22ea:	d109      	bne.n	2300 <_svfiprintf_r+0x134>
    22ec:	9b05      	ldr	r3, [sp, #20]
    22ee:	3402      	adds	r4, #2
    22f0:	1d1a      	adds	r2, r3, #4
    22f2:	681b      	ldr	r3, [r3, #0]
    22f4:	9205      	str	r2, [sp, #20]
    22f6:	2b00      	cmp	r3, #0
    22f8:	da0d      	bge.n	2316 <_svfiprintf_r+0x14a>
    22fa:	2301      	movs	r3, #1
    22fc:	425b      	negs	r3, r3
    22fe:	e00a      	b.n	2316 <_svfiprintf_r+0x14a>
    2300:	2300      	movs	r3, #0
    2302:	3401      	adds	r4, #1
    2304:	7822      	ldrb	r2, [r4, #0]
    2306:	3a30      	subs	r2, #48	; 0x30
    2308:	2a09      	cmp	r2, #9
    230a:	d804      	bhi.n	2316 <_svfiprintf_r+0x14a>
    230c:	210a      	movs	r1, #10
    230e:	434b      	muls	r3, r1
    2310:	3401      	adds	r4, #1
    2312:	189b      	adds	r3, r3, r2
    2314:	e7f6      	b.n	2304 <_svfiprintf_r+0x138>
    2316:	9307      	str	r3, [sp, #28]
    2318:	4f23      	ldr	r7, [pc, #140]	; (23a8 <_svfiprintf_r+0x1dc>)
    231a:	7821      	ldrb	r1, [r4, #0]
    231c:	1c38      	adds	r0, r7, #0
    231e:	2203      	movs	r2, #3
    2320:	f000 f9e2 	bl	26e8 <memchr>
    2324:	2800      	cmp	r0, #0
    2326:	d007      	beq.n	2338 <_svfiprintf_r+0x16c>
    2328:	1bc0      	subs	r0, r0, r7
    232a:	2740      	movs	r7, #64	; 0x40
    232c:	4087      	lsls	r7, r0
    232e:	1c38      	adds	r0, r7, #0
    2330:	682b      	ldr	r3, [r5, #0]
    2332:	3401      	adds	r4, #1
    2334:	4318      	orrs	r0, r3
    2336:	6028      	str	r0, [r5, #0]
    2338:	7821      	ldrb	r1, [r4, #0]
    233a:	481c      	ldr	r0, [pc, #112]	; (23ac <_svfiprintf_r+0x1e0>)
    233c:	2206      	movs	r2, #6
    233e:	1c67      	adds	r7, r4, #1
    2340:	7629      	strb	r1, [r5, #24]
    2342:	f000 f9d1 	bl	26e8 <memchr>
    2346:	2800      	cmp	r0, #0
    2348:	d012      	beq.n	2370 <_svfiprintf_r+0x1a4>
    234a:	4b19      	ldr	r3, [pc, #100]	; (23b0 <_svfiprintf_r+0x1e4>)
    234c:	2b00      	cmp	r3, #0
    234e:	d106      	bne.n	235e <_svfiprintf_r+0x192>
    2350:	2207      	movs	r2, #7
    2352:	9b05      	ldr	r3, [sp, #20]
    2354:	3307      	adds	r3, #7
    2356:	4393      	bics	r3, r2
    2358:	3308      	adds	r3, #8
    235a:	9305      	str	r3, [sp, #20]
    235c:	e014      	b.n	2388 <_svfiprintf_r+0x1bc>
    235e:	ab05      	add	r3, sp, #20
    2360:	9300      	str	r3, [sp, #0]
    2362:	9802      	ldr	r0, [sp, #8]
    2364:	1c29      	adds	r1, r5, #0
    2366:	1c32      	adds	r2, r6, #0
    2368:	4b12      	ldr	r3, [pc, #72]	; (23b4 <_svfiprintf_r+0x1e8>)
    236a:	e000      	b.n	236e <_svfiprintf_r+0x1a2>
    236c:	bf00      	nop
    236e:	e007      	b.n	2380 <_svfiprintf_r+0x1b4>
    2370:	ab05      	add	r3, sp, #20
    2372:	9300      	str	r3, [sp, #0]
    2374:	9802      	ldr	r0, [sp, #8]
    2376:	1c29      	adds	r1, r5, #0
    2378:	1c32      	adds	r2, r6, #0
    237a:	4b0e      	ldr	r3, [pc, #56]	; (23b4 <_svfiprintf_r+0x1e8>)
    237c:	f000 f88a 	bl	2494 <_printf_i>
    2380:	9003      	str	r0, [sp, #12]
    2382:	9b03      	ldr	r3, [sp, #12]
    2384:	3301      	adds	r3, #1
    2386:	d004      	beq.n	2392 <_svfiprintf_r+0x1c6>
    2388:	696b      	ldr	r3, [r5, #20]
    238a:	9a03      	ldr	r2, [sp, #12]
    238c:	189b      	adds	r3, r3, r2
    238e:	616b      	str	r3, [r5, #20]
    2390:	e73d      	b.n	220e <_svfiprintf_r+0x42>
    2392:	89b3      	ldrh	r3, [r6, #12]
    2394:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2396:	065b      	lsls	r3, r3, #25
    2398:	d501      	bpl.n	239e <_svfiprintf_r+0x1d2>
    239a:	2001      	movs	r0, #1
    239c:	4240      	negs	r0, r0
    239e:	b01f      	add	sp, #124	; 0x7c
    23a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00002938 	.word	0x00002938
    23a8:	0000293e 	.word	0x0000293e
    23ac:	00002942 	.word	0x00002942
    23b0:	00000000 	.word	0x00000000
    23b4:	0000210d 	.word	0x0000210d

000023b8 <_printf_common>:
    23b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23ba:	1c17      	adds	r7, r2, #0
    23bc:	9301      	str	r3, [sp, #4]
    23be:	690a      	ldr	r2, [r1, #16]
    23c0:	688b      	ldr	r3, [r1, #8]
    23c2:	9000      	str	r0, [sp, #0]
    23c4:	1c0c      	adds	r4, r1, #0
    23c6:	4293      	cmp	r3, r2
    23c8:	da00      	bge.n	23cc <_printf_common+0x14>
    23ca:	1c13      	adds	r3, r2, #0
    23cc:	1c22      	adds	r2, r4, #0
    23ce:	603b      	str	r3, [r7, #0]
    23d0:	3243      	adds	r2, #67	; 0x43
    23d2:	7812      	ldrb	r2, [r2, #0]
    23d4:	2a00      	cmp	r2, #0
    23d6:	d001      	beq.n	23dc <_printf_common+0x24>
    23d8:	3301      	adds	r3, #1
    23da:	603b      	str	r3, [r7, #0]
    23dc:	6823      	ldr	r3, [r4, #0]
    23de:	069b      	lsls	r3, r3, #26
    23e0:	d502      	bpl.n	23e8 <_printf_common+0x30>
    23e2:	683b      	ldr	r3, [r7, #0]
    23e4:	3302      	adds	r3, #2
    23e6:	603b      	str	r3, [r7, #0]
    23e8:	2506      	movs	r5, #6
    23ea:	6823      	ldr	r3, [r4, #0]
    23ec:	401d      	ands	r5, r3
    23ee:	d01e      	beq.n	242e <_printf_common+0x76>
    23f0:	1c23      	adds	r3, r4, #0
    23f2:	3343      	adds	r3, #67	; 0x43
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	1e5a      	subs	r2, r3, #1
    23f8:	4193      	sbcs	r3, r2
    23fa:	6822      	ldr	r2, [r4, #0]
    23fc:	0692      	lsls	r2, r2, #26
    23fe:	d51c      	bpl.n	243a <_printf_common+0x82>
    2400:	2030      	movs	r0, #48	; 0x30
    2402:	18e1      	adds	r1, r4, r3
    2404:	3140      	adds	r1, #64	; 0x40
    2406:	70c8      	strb	r0, [r1, #3]
    2408:	1c21      	adds	r1, r4, #0
    240a:	1c5a      	adds	r2, r3, #1
    240c:	3145      	adds	r1, #69	; 0x45
    240e:	7809      	ldrb	r1, [r1, #0]
    2410:	18a2      	adds	r2, r4, r2
    2412:	3240      	adds	r2, #64	; 0x40
    2414:	3302      	adds	r3, #2
    2416:	70d1      	strb	r1, [r2, #3]
    2418:	e00f      	b.n	243a <_printf_common+0x82>
    241a:	1c22      	adds	r2, r4, #0
    241c:	2301      	movs	r3, #1
    241e:	9800      	ldr	r0, [sp, #0]
    2420:	9901      	ldr	r1, [sp, #4]
    2422:	3219      	adds	r2, #25
    2424:	9e08      	ldr	r6, [sp, #32]
    2426:	47b0      	blx	r6
    2428:	1c43      	adds	r3, r0, #1
    242a:	d00e      	beq.n	244a <_printf_common+0x92>
    242c:	3501      	adds	r5, #1
    242e:	68e3      	ldr	r3, [r4, #12]
    2430:	683a      	ldr	r2, [r7, #0]
    2432:	1a9b      	subs	r3, r3, r2
    2434:	429d      	cmp	r5, r3
    2436:	dbf0      	blt.n	241a <_printf_common+0x62>
    2438:	e7da      	b.n	23f0 <_printf_common+0x38>
    243a:	1c22      	adds	r2, r4, #0
    243c:	9800      	ldr	r0, [sp, #0]
    243e:	9901      	ldr	r1, [sp, #4]
    2440:	3243      	adds	r2, #67	; 0x43
    2442:	9d08      	ldr	r5, [sp, #32]
    2444:	47a8      	blx	r5
    2446:	1c43      	adds	r3, r0, #1
    2448:	d102      	bne.n	2450 <_printf_common+0x98>
    244a:	2001      	movs	r0, #1
    244c:	4240      	negs	r0, r0
    244e:	e020      	b.n	2492 <_printf_common+0xda>
    2450:	2306      	movs	r3, #6
    2452:	6820      	ldr	r0, [r4, #0]
    2454:	68e1      	ldr	r1, [r4, #12]
    2456:	683a      	ldr	r2, [r7, #0]
    2458:	4003      	ands	r3, r0
    245a:	2500      	movs	r5, #0
    245c:	2b04      	cmp	r3, #4
    245e:	d103      	bne.n	2468 <_printf_common+0xb0>
    2460:	1a8d      	subs	r5, r1, r2
    2462:	43eb      	mvns	r3, r5
    2464:	17db      	asrs	r3, r3, #31
    2466:	401d      	ands	r5, r3
    2468:	68a3      	ldr	r3, [r4, #8]
    246a:	6922      	ldr	r2, [r4, #16]
    246c:	4293      	cmp	r3, r2
    246e:	dd01      	ble.n	2474 <_printf_common+0xbc>
    2470:	1a9b      	subs	r3, r3, r2
    2472:	18ed      	adds	r5, r5, r3
    2474:	2700      	movs	r7, #0
    2476:	42af      	cmp	r7, r5
    2478:	da0a      	bge.n	2490 <_printf_common+0xd8>
    247a:	1c22      	adds	r2, r4, #0
    247c:	2301      	movs	r3, #1
    247e:	9800      	ldr	r0, [sp, #0]
    2480:	9901      	ldr	r1, [sp, #4]
    2482:	321a      	adds	r2, #26
    2484:	9e08      	ldr	r6, [sp, #32]
    2486:	47b0      	blx	r6
    2488:	1c43      	adds	r3, r0, #1
    248a:	d0de      	beq.n	244a <_printf_common+0x92>
    248c:	3701      	adds	r7, #1
    248e:	e7f2      	b.n	2476 <_printf_common+0xbe>
    2490:	2000      	movs	r0, #0
    2492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002494 <_printf_i>:
    2494:	b5f0      	push	{r4, r5, r6, r7, lr}
    2496:	b08b      	sub	sp, #44	; 0x2c
    2498:	9206      	str	r2, [sp, #24]
    249a:	1c0a      	adds	r2, r1, #0
    249c:	3243      	adds	r2, #67	; 0x43
    249e:	9307      	str	r3, [sp, #28]
    24a0:	9005      	str	r0, [sp, #20]
    24a2:	9204      	str	r2, [sp, #16]
    24a4:	7e0a      	ldrb	r2, [r1, #24]
    24a6:	1c0c      	adds	r4, r1, #0
    24a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    24aa:	2a6e      	cmp	r2, #110	; 0x6e
    24ac:	d100      	bne.n	24b0 <_printf_i+0x1c>
    24ae:	e0a8      	b.n	2602 <_printf_i+0x16e>
    24b0:	d811      	bhi.n	24d6 <_printf_i+0x42>
    24b2:	2a63      	cmp	r2, #99	; 0x63
    24b4:	d022      	beq.n	24fc <_printf_i+0x68>
    24b6:	d809      	bhi.n	24cc <_printf_i+0x38>
    24b8:	2a00      	cmp	r2, #0
    24ba:	d100      	bne.n	24be <_printf_i+0x2a>
    24bc:	e0b2      	b.n	2624 <_printf_i+0x190>
    24be:	2a58      	cmp	r2, #88	; 0x58
    24c0:	d000      	beq.n	24c4 <_printf_i+0x30>
    24c2:	e0c2      	b.n	264a <_printf_i+0x1b6>
    24c4:	3145      	adds	r1, #69	; 0x45
    24c6:	700a      	strb	r2, [r1, #0]
    24c8:	4a7c      	ldr	r2, [pc, #496]	; (26bc <_printf_i+0x228>)
    24ca:	e04f      	b.n	256c <_printf_i+0xd8>
    24cc:	2a64      	cmp	r2, #100	; 0x64
    24ce:	d01d      	beq.n	250c <_printf_i+0x78>
    24d0:	2a69      	cmp	r2, #105	; 0x69
    24d2:	d01b      	beq.n	250c <_printf_i+0x78>
    24d4:	e0b9      	b.n	264a <_printf_i+0x1b6>
    24d6:	2a73      	cmp	r2, #115	; 0x73
    24d8:	d100      	bne.n	24dc <_printf_i+0x48>
    24da:	e0a7      	b.n	262c <_printf_i+0x198>
    24dc:	d809      	bhi.n	24f2 <_printf_i+0x5e>
    24de:	2a6f      	cmp	r2, #111	; 0x6f
    24e0:	d029      	beq.n	2536 <_printf_i+0xa2>
    24e2:	2a70      	cmp	r2, #112	; 0x70
    24e4:	d000      	beq.n	24e8 <_printf_i+0x54>
    24e6:	e0b0      	b.n	264a <_printf_i+0x1b6>
    24e8:	2220      	movs	r2, #32
    24ea:	6809      	ldr	r1, [r1, #0]
    24ec:	430a      	orrs	r2, r1
    24ee:	6022      	str	r2, [r4, #0]
    24f0:	e037      	b.n	2562 <_printf_i+0xce>
    24f2:	2a75      	cmp	r2, #117	; 0x75
    24f4:	d01f      	beq.n	2536 <_printf_i+0xa2>
    24f6:	2a78      	cmp	r2, #120	; 0x78
    24f8:	d033      	beq.n	2562 <_printf_i+0xce>
    24fa:	e0a6      	b.n	264a <_printf_i+0x1b6>
    24fc:	1c0e      	adds	r6, r1, #0
    24fe:	681a      	ldr	r2, [r3, #0]
    2500:	3642      	adds	r6, #66	; 0x42
    2502:	1d11      	adds	r1, r2, #4
    2504:	6019      	str	r1, [r3, #0]
    2506:	6813      	ldr	r3, [r2, #0]
    2508:	7033      	strb	r3, [r6, #0]
    250a:	e0a1      	b.n	2650 <_printf_i+0x1bc>
    250c:	6821      	ldr	r1, [r4, #0]
    250e:	681a      	ldr	r2, [r3, #0]
    2510:	0608      	lsls	r0, r1, #24
    2512:	d406      	bmi.n	2522 <_printf_i+0x8e>
    2514:	0649      	lsls	r1, r1, #25
    2516:	d504      	bpl.n	2522 <_printf_i+0x8e>
    2518:	1d11      	adds	r1, r2, #4
    251a:	6019      	str	r1, [r3, #0]
    251c:	2300      	movs	r3, #0
    251e:	5ed5      	ldrsh	r5, [r2, r3]
    2520:	e002      	b.n	2528 <_printf_i+0x94>
    2522:	1d11      	adds	r1, r2, #4
    2524:	6019      	str	r1, [r3, #0]
    2526:	6815      	ldr	r5, [r2, #0]
    2528:	2d00      	cmp	r5, #0
    252a:	da3b      	bge.n	25a4 <_printf_i+0x110>
    252c:	232d      	movs	r3, #45	; 0x2d
    252e:	9a04      	ldr	r2, [sp, #16]
    2530:	426d      	negs	r5, r5
    2532:	7013      	strb	r3, [r2, #0]
    2534:	e036      	b.n	25a4 <_printf_i+0x110>
    2536:	6821      	ldr	r1, [r4, #0]
    2538:	681a      	ldr	r2, [r3, #0]
    253a:	0608      	lsls	r0, r1, #24
    253c:	d406      	bmi.n	254c <_printf_i+0xb8>
    253e:	0649      	lsls	r1, r1, #25
    2540:	d504      	bpl.n	254c <_printf_i+0xb8>
    2542:	6815      	ldr	r5, [r2, #0]
    2544:	1d11      	adds	r1, r2, #4
    2546:	6019      	str	r1, [r3, #0]
    2548:	b2ad      	uxth	r5, r5
    254a:	e002      	b.n	2552 <_printf_i+0xbe>
    254c:	1d11      	adds	r1, r2, #4
    254e:	6019      	str	r1, [r3, #0]
    2550:	6815      	ldr	r5, [r2, #0]
    2552:	4b5a      	ldr	r3, [pc, #360]	; (26bc <_printf_i+0x228>)
    2554:	7e22      	ldrb	r2, [r4, #24]
    2556:	9303      	str	r3, [sp, #12]
    2558:	270a      	movs	r7, #10
    255a:	2a6f      	cmp	r2, #111	; 0x6f
    255c:	d11d      	bne.n	259a <_printf_i+0x106>
    255e:	2708      	movs	r7, #8
    2560:	e01b      	b.n	259a <_printf_i+0x106>
    2562:	1c22      	adds	r2, r4, #0
    2564:	2178      	movs	r1, #120	; 0x78
    2566:	3245      	adds	r2, #69	; 0x45
    2568:	7011      	strb	r1, [r2, #0]
    256a:	4a55      	ldr	r2, [pc, #340]	; (26c0 <_printf_i+0x22c>)
    256c:	6819      	ldr	r1, [r3, #0]
    256e:	9203      	str	r2, [sp, #12]
    2570:	1d08      	adds	r0, r1, #4
    2572:	6822      	ldr	r2, [r4, #0]
    2574:	6018      	str	r0, [r3, #0]
    2576:	680d      	ldr	r5, [r1, #0]
    2578:	0610      	lsls	r0, r2, #24
    257a:	d402      	bmi.n	2582 <_printf_i+0xee>
    257c:	0650      	lsls	r0, r2, #25
    257e:	d500      	bpl.n	2582 <_printf_i+0xee>
    2580:	b2ad      	uxth	r5, r5
    2582:	07d3      	lsls	r3, r2, #31
    2584:	d502      	bpl.n	258c <_printf_i+0xf8>
    2586:	2320      	movs	r3, #32
    2588:	431a      	orrs	r2, r3
    258a:	6022      	str	r2, [r4, #0]
    258c:	2710      	movs	r7, #16
    258e:	2d00      	cmp	r5, #0
    2590:	d103      	bne.n	259a <_printf_i+0x106>
    2592:	2320      	movs	r3, #32
    2594:	6822      	ldr	r2, [r4, #0]
    2596:	439a      	bics	r2, r3
    2598:	6022      	str	r2, [r4, #0]
    259a:	1c23      	adds	r3, r4, #0
    259c:	2200      	movs	r2, #0
    259e:	3343      	adds	r3, #67	; 0x43
    25a0:	701a      	strb	r2, [r3, #0]
    25a2:	e002      	b.n	25aa <_printf_i+0x116>
    25a4:	270a      	movs	r7, #10
    25a6:	4b45      	ldr	r3, [pc, #276]	; (26bc <_printf_i+0x228>)
    25a8:	9303      	str	r3, [sp, #12]
    25aa:	6863      	ldr	r3, [r4, #4]
    25ac:	60a3      	str	r3, [r4, #8]
    25ae:	2b00      	cmp	r3, #0
    25b0:	db03      	blt.n	25ba <_printf_i+0x126>
    25b2:	2204      	movs	r2, #4
    25b4:	6821      	ldr	r1, [r4, #0]
    25b6:	4391      	bics	r1, r2
    25b8:	6021      	str	r1, [r4, #0]
    25ba:	2d00      	cmp	r5, #0
    25bc:	d102      	bne.n	25c4 <_printf_i+0x130>
    25be:	9e04      	ldr	r6, [sp, #16]
    25c0:	2b00      	cmp	r3, #0
    25c2:	d00e      	beq.n	25e2 <_printf_i+0x14e>
    25c4:	9e04      	ldr	r6, [sp, #16]
    25c6:	1c28      	adds	r0, r5, #0
    25c8:	1c39      	adds	r1, r7, #0
    25ca:	f7ff fc9f 	bl	1f0c <__aeabi_uidivmod>
    25ce:	9b03      	ldr	r3, [sp, #12]
    25d0:	3e01      	subs	r6, #1
    25d2:	5c5b      	ldrb	r3, [r3, r1]
    25d4:	1c28      	adds	r0, r5, #0
    25d6:	7033      	strb	r3, [r6, #0]
    25d8:	1c39      	adds	r1, r7, #0
    25da:	f7ff fc11 	bl	1e00 <__aeabi_uidiv>
    25de:	1e05      	subs	r5, r0, #0
    25e0:	d1f1      	bne.n	25c6 <_printf_i+0x132>
    25e2:	2f08      	cmp	r7, #8
    25e4:	d109      	bne.n	25fa <_printf_i+0x166>
    25e6:	6823      	ldr	r3, [r4, #0]
    25e8:	07db      	lsls	r3, r3, #31
    25ea:	d506      	bpl.n	25fa <_printf_i+0x166>
    25ec:	6863      	ldr	r3, [r4, #4]
    25ee:	6922      	ldr	r2, [r4, #16]
    25f0:	4293      	cmp	r3, r2
    25f2:	dc02      	bgt.n	25fa <_printf_i+0x166>
    25f4:	2330      	movs	r3, #48	; 0x30
    25f6:	3e01      	subs	r6, #1
    25f8:	7033      	strb	r3, [r6, #0]
    25fa:	9b04      	ldr	r3, [sp, #16]
    25fc:	1b9b      	subs	r3, r3, r6
    25fe:	6123      	str	r3, [r4, #16]
    2600:	e02b      	b.n	265a <_printf_i+0x1c6>
    2602:	6809      	ldr	r1, [r1, #0]
    2604:	681a      	ldr	r2, [r3, #0]
    2606:	0608      	lsls	r0, r1, #24
    2608:	d407      	bmi.n	261a <_printf_i+0x186>
    260a:	0649      	lsls	r1, r1, #25
    260c:	d505      	bpl.n	261a <_printf_i+0x186>
    260e:	1d11      	adds	r1, r2, #4
    2610:	6019      	str	r1, [r3, #0]
    2612:	6813      	ldr	r3, [r2, #0]
    2614:	8aa2      	ldrh	r2, [r4, #20]
    2616:	801a      	strh	r2, [r3, #0]
    2618:	e004      	b.n	2624 <_printf_i+0x190>
    261a:	1d11      	adds	r1, r2, #4
    261c:	6019      	str	r1, [r3, #0]
    261e:	6813      	ldr	r3, [r2, #0]
    2620:	6962      	ldr	r2, [r4, #20]
    2622:	601a      	str	r2, [r3, #0]
    2624:	2300      	movs	r3, #0
    2626:	9e04      	ldr	r6, [sp, #16]
    2628:	6123      	str	r3, [r4, #16]
    262a:	e016      	b.n	265a <_printf_i+0x1c6>
    262c:	681a      	ldr	r2, [r3, #0]
    262e:	1d11      	adds	r1, r2, #4
    2630:	6019      	str	r1, [r3, #0]
    2632:	6816      	ldr	r6, [r2, #0]
    2634:	2100      	movs	r1, #0
    2636:	1c30      	adds	r0, r6, #0
    2638:	6862      	ldr	r2, [r4, #4]
    263a:	f000 f855 	bl	26e8 <memchr>
    263e:	2800      	cmp	r0, #0
    2640:	d001      	beq.n	2646 <_printf_i+0x1b2>
    2642:	1b80      	subs	r0, r0, r6
    2644:	6060      	str	r0, [r4, #4]
    2646:	6863      	ldr	r3, [r4, #4]
    2648:	e003      	b.n	2652 <_printf_i+0x1be>
    264a:	1c26      	adds	r6, r4, #0
    264c:	3642      	adds	r6, #66	; 0x42
    264e:	7032      	strb	r2, [r6, #0]
    2650:	2301      	movs	r3, #1
    2652:	6123      	str	r3, [r4, #16]
    2654:	2300      	movs	r3, #0
    2656:	9a04      	ldr	r2, [sp, #16]
    2658:	7013      	strb	r3, [r2, #0]
    265a:	9b07      	ldr	r3, [sp, #28]
    265c:	9805      	ldr	r0, [sp, #20]
    265e:	9300      	str	r3, [sp, #0]
    2660:	1c21      	adds	r1, r4, #0
    2662:	9b06      	ldr	r3, [sp, #24]
    2664:	aa09      	add	r2, sp, #36	; 0x24
    2666:	f7ff fea7 	bl	23b8 <_printf_common>
    266a:	1c43      	adds	r3, r0, #1
    266c:	d102      	bne.n	2674 <_printf_i+0x1e0>
    266e:	2001      	movs	r0, #1
    2670:	4240      	negs	r0, r0
    2672:	e021      	b.n	26b8 <_printf_i+0x224>
    2674:	6923      	ldr	r3, [r4, #16]
    2676:	9805      	ldr	r0, [sp, #20]
    2678:	9906      	ldr	r1, [sp, #24]
    267a:	1c32      	adds	r2, r6, #0
    267c:	9d07      	ldr	r5, [sp, #28]
    267e:	47a8      	blx	r5
    2680:	1c43      	adds	r3, r0, #1
    2682:	d0f4      	beq.n	266e <_printf_i+0x1da>
    2684:	6823      	ldr	r3, [r4, #0]
    2686:	079b      	lsls	r3, r3, #30
    2688:	d405      	bmi.n	2696 <_printf_i+0x202>
    268a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    268c:	68e0      	ldr	r0, [r4, #12]
    268e:	4298      	cmp	r0, r3
    2690:	da12      	bge.n	26b8 <_printf_i+0x224>
    2692:	1c18      	adds	r0, r3, #0
    2694:	e010      	b.n	26b8 <_printf_i+0x224>
    2696:	2500      	movs	r5, #0
    2698:	68e3      	ldr	r3, [r4, #12]
    269a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    269c:	1a9b      	subs	r3, r3, r2
    269e:	429d      	cmp	r5, r3
    26a0:	daf3      	bge.n	268a <_printf_i+0x1f6>
    26a2:	1c22      	adds	r2, r4, #0
    26a4:	2301      	movs	r3, #1
    26a6:	9805      	ldr	r0, [sp, #20]
    26a8:	9906      	ldr	r1, [sp, #24]
    26aa:	3219      	adds	r2, #25
    26ac:	9e07      	ldr	r6, [sp, #28]
    26ae:	47b0      	blx	r6
    26b0:	1c43      	adds	r3, r0, #1
    26b2:	d0dc      	beq.n	266e <_printf_i+0x1da>
    26b4:	3501      	adds	r5, #1
    26b6:	e7ef      	b.n	2698 <_printf_i+0x204>
    26b8:	b00b      	add	sp, #44	; 0x2c
    26ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26bc:	00002949 	.word	0x00002949
    26c0:	0000295a 	.word	0x0000295a

000026c4 <_sbrk_r>:
    26c4:	b538      	push	{r3, r4, r5, lr}
    26c6:	2300      	movs	r3, #0
    26c8:	4c06      	ldr	r4, [pc, #24]	; (26e4 <_sbrk_r+0x20>)
    26ca:	1c05      	adds	r5, r0, #0
    26cc:	1c08      	adds	r0, r1, #0
    26ce:	6023      	str	r3, [r4, #0]
    26d0:	f7ff fb54 	bl	1d7c <_sbrk>
    26d4:	1c43      	adds	r3, r0, #1
    26d6:	d103      	bne.n	26e0 <_sbrk_r+0x1c>
    26d8:	6823      	ldr	r3, [r4, #0]
    26da:	2b00      	cmp	r3, #0
    26dc:	d000      	beq.n	26e0 <_sbrk_r+0x1c>
    26de:	602b      	str	r3, [r5, #0]
    26e0:	bd38      	pop	{r3, r4, r5, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	20000268 	.word	0x20000268

000026e8 <memchr>:
    26e8:	b2c9      	uxtb	r1, r1
    26ea:	1882      	adds	r2, r0, r2
    26ec:	4290      	cmp	r0, r2
    26ee:	d004      	beq.n	26fa <memchr+0x12>
    26f0:	7803      	ldrb	r3, [r0, #0]
    26f2:	428b      	cmp	r3, r1
    26f4:	d002      	beq.n	26fc <memchr+0x14>
    26f6:	3001      	adds	r0, #1
    26f8:	e7f8      	b.n	26ec <memchr+0x4>
    26fa:	2000      	movs	r0, #0
    26fc:	4770      	bx	lr

000026fe <memmove>:
    26fe:	b510      	push	{r4, lr}
    2700:	4281      	cmp	r1, r0
    2702:	d208      	bcs.n	2716 <memmove+0x18>
    2704:	188b      	adds	r3, r1, r2
    2706:	4298      	cmp	r0, r3
    2708:	d205      	bcs.n	2716 <memmove+0x18>
    270a:	1a9b      	subs	r3, r3, r2
    270c:	3a01      	subs	r2, #1
    270e:	d309      	bcc.n	2724 <memmove+0x26>
    2710:	5c99      	ldrb	r1, [r3, r2]
    2712:	5481      	strb	r1, [r0, r2]
    2714:	e7fa      	b.n	270c <memmove+0xe>
    2716:	2300      	movs	r3, #0
    2718:	4293      	cmp	r3, r2
    271a:	d003      	beq.n	2724 <memmove+0x26>
    271c:	5ccc      	ldrb	r4, [r1, r3]
    271e:	54c4      	strb	r4, [r0, r3]
    2720:	3301      	adds	r3, #1
    2722:	e7f9      	b.n	2718 <memmove+0x1a>
    2724:	bd10      	pop	{r4, pc}
	...

00002728 <_free_r>:
    2728:	b530      	push	{r4, r5, lr}
    272a:	2900      	cmp	r1, #0
    272c:	d03e      	beq.n	27ac <_free_r+0x84>
    272e:	3904      	subs	r1, #4
    2730:	680b      	ldr	r3, [r1, #0]
    2732:	2b00      	cmp	r3, #0
    2734:	da00      	bge.n	2738 <_free_r+0x10>
    2736:	18c9      	adds	r1, r1, r3
    2738:	4a1d      	ldr	r2, [pc, #116]	; (27b0 <_free_r+0x88>)
    273a:	6813      	ldr	r3, [r2, #0]
    273c:	1c14      	adds	r4, r2, #0
    273e:	2b00      	cmp	r3, #0
    2740:	d102      	bne.n	2748 <_free_r+0x20>
    2742:	604b      	str	r3, [r1, #4]
    2744:	6011      	str	r1, [r2, #0]
    2746:	e031      	b.n	27ac <_free_r+0x84>
    2748:	4299      	cmp	r1, r3
    274a:	d20d      	bcs.n	2768 <_free_r+0x40>
    274c:	6808      	ldr	r0, [r1, #0]
    274e:	180a      	adds	r2, r1, r0
    2750:	429a      	cmp	r2, r3
    2752:	d103      	bne.n	275c <_free_r+0x34>
    2754:	6813      	ldr	r3, [r2, #0]
    2756:	18c3      	adds	r3, r0, r3
    2758:	600b      	str	r3, [r1, #0]
    275a:	6853      	ldr	r3, [r2, #4]
    275c:	604b      	str	r3, [r1, #4]
    275e:	6021      	str	r1, [r4, #0]
    2760:	e024      	b.n	27ac <_free_r+0x84>
    2762:	428a      	cmp	r2, r1
    2764:	d803      	bhi.n	276e <_free_r+0x46>
    2766:	1c13      	adds	r3, r2, #0
    2768:	685a      	ldr	r2, [r3, #4]
    276a:	2a00      	cmp	r2, #0
    276c:	d1f9      	bne.n	2762 <_free_r+0x3a>
    276e:	681d      	ldr	r5, [r3, #0]
    2770:	195c      	adds	r4, r3, r5
    2772:	428c      	cmp	r4, r1
    2774:	d10b      	bne.n	278e <_free_r+0x66>
    2776:	6809      	ldr	r1, [r1, #0]
    2778:	1869      	adds	r1, r5, r1
    277a:	1858      	adds	r0, r3, r1
    277c:	6019      	str	r1, [r3, #0]
    277e:	4290      	cmp	r0, r2
    2780:	d114      	bne.n	27ac <_free_r+0x84>
    2782:	6810      	ldr	r0, [r2, #0]
    2784:	6852      	ldr	r2, [r2, #4]
    2786:	1809      	adds	r1, r1, r0
    2788:	6019      	str	r1, [r3, #0]
    278a:	605a      	str	r2, [r3, #4]
    278c:	e00e      	b.n	27ac <_free_r+0x84>
    278e:	428c      	cmp	r4, r1
    2790:	d902      	bls.n	2798 <_free_r+0x70>
    2792:	230c      	movs	r3, #12
    2794:	6003      	str	r3, [r0, #0]
    2796:	e009      	b.n	27ac <_free_r+0x84>
    2798:	6808      	ldr	r0, [r1, #0]
    279a:	180c      	adds	r4, r1, r0
    279c:	4294      	cmp	r4, r2
    279e:	d103      	bne.n	27a8 <_free_r+0x80>
    27a0:	6814      	ldr	r4, [r2, #0]
    27a2:	6852      	ldr	r2, [r2, #4]
    27a4:	1900      	adds	r0, r0, r4
    27a6:	6008      	str	r0, [r1, #0]
    27a8:	604a      	str	r2, [r1, #4]
    27aa:	6059      	str	r1, [r3, #4]
    27ac:	bd30      	pop	{r4, r5, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	200000cc 	.word	0x200000cc

000027b4 <_realloc_r>:
    27b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27b6:	1c06      	adds	r6, r0, #0
    27b8:	1c0c      	adds	r4, r1, #0
    27ba:	1c15      	adds	r5, r2, #0
    27bc:	2900      	cmp	r1, #0
    27be:	d104      	bne.n	27ca <_realloc_r+0x16>
    27c0:	1c11      	adds	r1, r2, #0
    27c2:	f7ff fc4b 	bl	205c <_malloc_r>
    27c6:	1c04      	adds	r4, r0, #0
    27c8:	e018      	b.n	27fc <_realloc_r+0x48>
    27ca:	2a00      	cmp	r2, #0
    27cc:	d103      	bne.n	27d6 <_realloc_r+0x22>
    27ce:	f7ff ffab 	bl	2728 <_free_r>
    27d2:	1c2c      	adds	r4, r5, #0
    27d4:	e012      	b.n	27fc <_realloc_r+0x48>
    27d6:	f000 f813 	bl	2800 <_malloc_usable_size_r>
    27da:	42a8      	cmp	r0, r5
    27dc:	d20e      	bcs.n	27fc <_realloc_r+0x48>
    27de:	1c30      	adds	r0, r6, #0
    27e0:	1c29      	adds	r1, r5, #0
    27e2:	f7ff fc3b 	bl	205c <_malloc_r>
    27e6:	1e07      	subs	r7, r0, #0
    27e8:	d007      	beq.n	27fa <_realloc_r+0x46>
    27ea:	1c21      	adds	r1, r4, #0
    27ec:	1c2a      	adds	r2, r5, #0
    27ee:	f7ff fc09 	bl	2004 <memcpy>
    27f2:	1c30      	adds	r0, r6, #0
    27f4:	1c21      	adds	r1, r4, #0
    27f6:	f7ff ff97 	bl	2728 <_free_r>
    27fa:	1c3c      	adds	r4, r7, #0
    27fc:	1c20      	adds	r0, r4, #0
    27fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002800 <_malloc_usable_size_r>:
    2800:	1f0b      	subs	r3, r1, #4
    2802:	681a      	ldr	r2, [r3, #0]
    2804:	1f10      	subs	r0, r2, #4
    2806:	2a00      	cmp	r2, #0
    2808:	da04      	bge.n	2814 <_malloc_usable_size_r+0x14>
    280a:	1889      	adds	r1, r1, r2
    280c:	3904      	subs	r1, #4
    280e:	680b      	ldr	r3, [r1, #0]
    2810:	18d0      	adds	r0, r2, r3
    2812:	3804      	subs	r0, #4
    2814:	4770      	bx	lr
	...

00002818 <_usb_device_irq_bits>:
    2818:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........
    2828:	0000 4200 0400 4200 0800 4200 0c00 4200     ...B...B...B...B
    2838:	1000 4200 0400 4300 5441 3053 3f30 000d     ...B...CATS00?..
    2848:	5441 3053 3f34 000d 5441 3053 3d33 0d34     ATS04?..ATS03=4.
    2858:	2b2b 002b 5441 562f 000d 0000 5441 3053     +++.AT/V....ATS0
    2868:	3d30 2b25 3630 0d64 0000 0000 5441 3053     0=%+06d.....ATS0
    2878:	3d34 2b25 3330 0d64 0000 0000 5441 0d4f     4=%+03d.....ATO.
    2888:	0000 0000 150a 0000 1506 0000 1506 0000     ................
    2898:	1568 0000 1568 0000 1520 0000 1510 0000     h...h... .......
    28a8:	1526 0000 1556 0000 16f4 0000 16d4 0000     &...V...........
    28b8:	16d4 0000 176e 0000 16e6 0000 1702 0000     ....n...........
    28c8:	16d8 0000 1710 0000 1752 0000 0043 0000     ........R...C...

000028d8 <__sf_fake_stdin>:
	...

000028f8 <__sf_fake_stdout>:
	...

00002918 <__sf_fake_stderr>:
	...
    2938:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    2948:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    2958:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    2968:	6665 0000                                   ef..

0000296c <_init>:
    296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2972:	bc08      	pop	{r3}
    2974:	469e      	mov	lr, r3
    2976:	4770      	bx	lr

00002978 <__init_array_start>:
    2978:	000000dd 	.word	0x000000dd

0000297c <_fini>:
    297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2982:	bc08      	pop	{r3}
    2984:	469e      	mov	lr, r3
    2986:	4770      	bx	lr

00002988 <__fini_array_start>:
    2988:	000000b5 	.word	0x000000b5
